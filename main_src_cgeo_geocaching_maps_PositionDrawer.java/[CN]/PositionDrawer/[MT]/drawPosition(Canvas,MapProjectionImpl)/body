{
  if (coordinates == null || location == null) {
    return;
  }
  if (accuracyCircle == null) {
    accuracyCircle=new Paint();
    accuracyCircle.setAntiAlias(true);
    accuracyCircle.setStrokeWidth(1.0f);
  }
  if (historyLine == null) {
    historyLine=new Paint();
    historyLine.setAntiAlias(true);
    historyLine.setStrokeWidth(3.0f);
    historyLine.setColor(0xFFFFFFFF);
  }
  if (historyLineShadow == null) {
    historyLineShadow=new Paint();
    historyLineShadow.setAntiAlias(true);
    historyLineShadow.setStrokeWidth(7.0f);
    historyLineShadow.setColor(0x66000000);
  }
  if (setfil == null) {
    setfil=new PaintFlagsDrawFilter(0,Paint.FILTER_BITMAP_FLAG);
  }
  if (remfil == null) {
    remfil=new PaintFlagsDrawFilter(Paint.FILTER_BITMAP_FLAG,0);
  }
  canvas.setDrawFilter(setfil);
  final double latitude=coordinates.getLatitude();
  final double longitude=coordinates.getLongitude();
  final float accuracy=coordinates.getAccuracy();
  final float[] result=new float[1];
  Location.distanceBetween(latitude,longitude,latitude,longitude + 1,result);
  final float longitudeLineDistance=result[0];
  final Geopoint leftCoords=new Geopoint(latitude,longitude - accuracy / longitudeLineDistance);
  final GeoPointImpl leftGeo=mapItemFactory.getGeoPointBase(leftCoords);
  projection.toPixels(leftGeo,left);
  projection.toPixels(location,center);
  final int radius=center.x - left.x;
  accuracyCircle.setColor(0x66000000);
  accuracyCircle.setStyle(Style.STROKE);
  canvas.drawCircle(center.x,center.y,radius,accuracyCircle);
  accuracyCircle.setColor(0x08000000);
  accuracyCircle.setStyle(Style.FILL);
  canvas.drawCircle(center.x,center.y,radius,accuracyCircle);
  positionHistory.rememberTrailPosition(coordinates);
  if (Settings.isMapTrail()) {
    final ArrayList<Location> paintHistory=new ArrayList<>(positionHistory.getHistory());
    paintHistory.add(coordinates);
    final int size=paintHistory.size();
    if (size > 1) {
      int alphaCnt=size - 201;
      if (alphaCnt < 1) {
        alphaCnt=1;
      }
      final Point pointNow=new Point();
      final Point pointPrevious=new Point();
      final Location prev=paintHistory.get(0);
      projection.toPixels(mapItemFactory.getGeoPointBase(new Geopoint(prev)),pointPrevious);
      for (int cnt=1; cnt < size; cnt++) {
        final Location now=paintHistory.get(cnt);
        projection.toPixels(mapItemFactory.getGeoPointBase(new Geopoint(now)),pointNow);
        final int alpha;
        if ((alphaCnt - cnt) > 0) {
          alpha=255 / (alphaCnt - cnt);
        }
 else {
          alpha=255;
        }
        historyLineShadow.setAlpha(alpha);
        historyLine.setAlpha(alpha);
        canvas.drawLine(pointPrevious.x,pointPrevious.y,pointNow.x,pointNow.y,historyLineShadow);
        canvas.drawLine(pointPrevious.x,pointPrevious.y,pointNow.x,pointNow.y,historyLine);
        pointPrevious.set(pointNow.x,pointNow.y);
      }
    }
  }
  if (arrow == null) {
    arrow=BitmapFactory.decodeResource(CgeoApplication.getInstance().getResources(),R.drawable.my_location_chevron);
    widthArrowHalf=arrow.getWidth() / 2;
    heightArrowHalf=arrow.getHeight() / 2;
  }
  final int marginLeft=center.x - widthArrowHalf;
  final int marginTop=center.y - heightArrowHalf;
  final Matrix matrix=new Matrix();
  matrix.setRotate(heading,widthArrowHalf,heightArrowHalf);
  matrix.postTranslate(marginLeft,marginTop);
  canvas.drawBitmap(arrow,matrix,null);
  canvas.setDrawFilter(remfil);
}
