{
  if (search == null) {
    return;
  }
  cache=app.getCache(search);
  if (cache == null) {
    progress.dismiss();
    if (StringUtils.isNotBlank(geocode)) {
      showToast(res.getString(R.string.err_detail_cache_find) + " " + geocode+ ".");
    }
 else {
      geocode=null;
      showToast(res.getString(R.string.err_detail_cache_find_some));
    }
    finish();
    return;
  }
  try {
    if (geocode == null && StringUtils.isNotBlank(cache.getGeocode())) {
      geocode=cache.getGeocode();
    }
    if (guid == null && StringUtils.isNotBlank(cache.getGuid())) {
      guid=cache.getGuid();
    }
    setTitle(cache.getGeocode().toUpperCase());
    inflater=getLayoutInflater();
    ScrollView scroll=(ScrollView)findViewById(R.id.details_list_box);
    scroll.setVisibility(View.VISIBLE);
    detailsList=(LinearLayout)findViewById(R.id.details_list);
    detailsList.removeAllViews();
    ((TextView)findViewById(R.id.actionbar_title)).setCompoundDrawablesWithIntrinsicBounds(getResources().getDrawable(cgBase.getCacheIcon(cache.getType())),null,null,null);
    Spannable span=(new Spannable.Factory()).newSpannable(Html.fromHtml(cache.getName()).toString());
    if (cache.isDisabled() || cache.isArchived()) {
      span.setSpan(new StrikethroughSpan(),0,span.toString().length(),Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
    }
    addCacheDetail(R.string.cache_name,span);
    addCacheDetail(R.string.cache_type,cache.getType().getL10n());
    if (null != cache.getSize() && cache.showSize()) {
      addCacheDetail(R.string.cache_size,cache.getSize().getL10n());
    }
    addCacheDetail(R.string.cache_geocode,cache.getGeocode().toUpperCase());
    if (cache.isLogOffline() || cache.isArchived() || cache.isDisabled()|| cache.isMembers()|| cache.isFound()) {
      final StringBuilder state=new StringBuilder();
      if (cache.isLogOffline()) {
        state.append(res.getString(R.string.cache_status_offline_log));
      }
      if (cache.isFound()) {
        if (state.length() > 0) {
          state.append(", ");
        }
        state.append(res.getString(R.string.cache_status_found));
      }
      if (cache.isArchived()) {
        if (state.length() > 0) {
          state.append(", ");
        }
        state.append(res.getString(R.string.cache_status_archived));
      }
      if (cache.isDisabled()) {
        if (state.length() > 0) {
          state.append(", ");
        }
        state.append(res.getString(R.string.cache_status_disabled));
      }
      if (cache.isMembers()) {
        if (state.length() > 0) {
          state.append(", ");
        }
        state.append(res.getString(R.string.cache_status_premium));
      }
      addCacheDetail(R.string.cache_status,state.toString());
    }
    cacheDistance=addCacheDetail(R.string.cache_distance,cache.getDistance() != null ? "~" + cgBase.getHumanDistance(cache.getDistance()) : "--");
    if (cache.getDifficulty() != null && cache.getDifficulty() > 0) {
      addStarRating(R.string.cache_difficulty,cache.getDifficulty());
    }
    if (cache.getTerrain() != null && cache.getTerrain() > 0) {
      addStarRating(R.string.cache_terrain,cache.getTerrain());
    }
    if (cache.getRating() != null && cache.getRating() > 0) {
      final RelativeLayout itemLayout=addStarRating(R.string.cache_rating,cache.getRating());
      if (cache.getVotes() != null) {
        final TextView itemAddition=(TextView)itemLayout.findViewById(R.id.addition);
        itemAddition.setText("(" + cache.getVotes() + ")");
        itemAddition.setVisibility(View.VISIBLE);
      }
    }
    if (cache.getFavouriteCnt() != null) {
      addCacheDetail(R.string.cache_favourite,String.format("%d",cache.getFavouriteCnt()) + "??");
    }
    if (StringUtils.isNotBlank(cache.getOwner()) || StringUtils.isNotBlank(cache.getOwnerReal())) {
      TextView ownerView=addCacheDetail(R.string.cache_owner,"");
      if (StringUtils.isNotBlank(cache.getOwner())) {
        ownerView.setText(Html.fromHtml(cache.getOwner()),TextView.BufferType.SPANNABLE);
      }
 else       if (StringUtils.isNotBlank(cache.getOwnerReal())) {
        ownerView.setText(Html.fromHtml(cache.getOwnerReal()),TextView.BufferType.SPANNABLE);
      }
      ownerView.setOnClickListener(new userActions());
    }
    if (cache.getHidden() != null && cache.getHidden().getTime() > 0) {
      addCacheDetail(cache.isEventCache() ? R.string.cache_event : R.string.cache_hidden,base.formatFullDate(cache.getHidden().getTime()));
    }
    if (StringUtils.isNotBlank(cache.getLocation())) {
      addCacheDetail(R.string.cache_location,cache.getLocation());
    }
    if (cache.getCoords() != null) {
      addCacheDetail(R.string.cache_coordinates,cache.getCoords().toString()).setOnClickListener(new View.OnClickListener(){
        private int position=0;
        private GeopointFormatter.Format[] availableFormats=new GeopointFormatter.Format[]{GeopointFormatter.Format.LAT_LON_DECMINUTE,GeopointFormatter.Format.LAT_LON_DECSECOND,GeopointFormatter.Format.LAT_LON_DECDEGREE};
        @Override public void onClick(        View view){
          position=(position + 1) % availableFormats.length;
          final TextView valueView=(TextView)view.findViewById(R.id.value);
          valueView.setText(cache.getCoords().format(availableFormats[position]));
        }
      }
);
    }
    if (CollectionUtils.isNotEmpty(cache.getAttributes())) {
      final LinearLayout attribBox=(LinearLayout)findViewById(R.id.attributes_innerbox);
      attributeBoxMaxWidth=((WindowManager)getSystemService(Context.WINDOW_SERVICE)).getDefaultDisplay().getWidth();
      ViewParent child=attribBox;
      do {
        if (child instanceof View) {
          attributeBoxMaxWidth=attributeBoxMaxWidth - ((View)child).getPaddingLeft() - ((View)child).getPaddingRight();
        }
        child=child.getParent();
      }
 while (child != null);
      attributeDescriptionsLayout=null;
      attributeIconsLayout=null;
      attribBox.setOnClickListener(new View.OnClickListener(){
        @Override public void onClick(        View v){
          toggleAttributeDisplay(attribBox,attributeBoxMaxWidth);
        }
      }
);
      if (attributesShowAsIcons || noAttributeIconsFound) {
        showAttributeIcons(attribBox,attributeBoxMaxWidth);
      }
 else {
        showAttributeDescriptions(attribBox);
      }
      findViewById(R.id.attributes_box).setVisibility(View.VISIBLE);
    }
    if (CollectionUtils.isNotEmpty(cache.getInventory())) {
      final LinearLayout inventBox=(LinearLayout)findViewById(R.id.inventory_box);
      final TextView inventView=(TextView)findViewById(R.id.inventory);
      StringBuilder inventoryString=new StringBuilder();
      for (      cgTrackable inventoryItem : cache.getInventory()) {
        if (inventoryString.length() > 0) {
          inventoryString.append('\n');
        }
        inventoryString.append(StringEscapeUtils.unescapeHtml4(inventoryItem.getName()));
      }
      inventView.setText(inventoryString);
      inventBox.setClickable(true);
      inventBox.setOnClickListener(new selectTrackable());
      inventBox.setVisibility(View.VISIBLE);
    }
    final TextView offlineText=(TextView)findViewById(R.id.offline_text);
    final Button offlineRefresh=(Button)findViewById(R.id.offline_refresh);
    final Button offlineStore=(Button)findViewById(R.id.offline_store);
    if (cache.getReason() >= 1) {
      Long diff=(System.currentTimeMillis() / (60 * 1000)) - (cache.getDetailedUpdate() / (60 * 1000));
      String ago="";
      if (diff < 15) {
        ago=res.getString(R.string.cache_offline_time_mins_few);
      }
 else       if (diff < 50) {
        ago=res.getString(R.string.cache_offline_time_about) + " " + diff+ " "+ res.getString(R.string.cache_offline_time_mins);
      }
 else       if (diff < 90) {
        ago=res.getString(R.string.cache_offline_time_about) + " " + res.getString(R.string.cache_offline_time_hour);
      }
 else       if (diff < (48 * 60)) {
        ago=res.getString(R.string.cache_offline_time_about) + " " + (diff / 60)+ " "+ res.getString(R.string.cache_offline_time_hours);
      }
 else {
        ago=res.getString(R.string.cache_offline_time_about) + " " + (diff / (24 * 60))+ " "+ res.getString(R.string.cache_offline_time_days);
      }
      offlineText.setText(res.getString(R.string.cache_offline_stored) + "\n" + ago);
      offlineRefresh.setOnClickListener(new storeCache());
      offlineStore.setText(res.getString(R.string.cache_offline_drop));
      offlineStore.setClickable(true);
      offlineStore.setOnClickListener(new dropCache());
    }
 else {
      offlineText.setText(res.getString(R.string.cache_offline_not_ready));
      offlineRefresh.setOnClickListener(new refreshCache());
      offlineStore.setText(res.getString(R.string.cache_offline_store));
      offlineStore.setClickable(true);
      offlineStore.setOnClickListener(new storeCache());
    }
    offlineRefresh.setVisibility(cache.supportsRefresh() ? View.VISIBLE : View.GONE);
    offlineRefresh.setClickable(true);
    if (StringUtils.isNotBlank(cache.getPersonalNote())) {
      ((LinearLayout)findViewById(R.id.personalnote_box)).setVisibility(View.VISIBLE);
      TextView personalNoteText=(TextView)findViewById(R.id.personalnote);
      personalNoteText.setVisibility(View.VISIBLE);
      personalNoteText.setText(cache.getPersonalNote(),TextView.BufferType.SPANNABLE);
      personalNoteText.setMovementMethod(LinkMovementMethod.getInstance());
    }
 else {
      ((LinearLayout)findViewById(R.id.personalnote_box)).setVisibility(View.GONE);
    }
    if (StringUtils.isNotBlank(cache.getShortdesc())) {
      ((LinearLayout)findViewById(R.id.desc_box)).setVisibility(View.VISIBLE);
      TextView descView=(TextView)findViewById(R.id.shortdesc);
      descView.setVisibility(View.VISIBLE);
      descView.setText(Html.fromHtml(cache.getShortdesc().trim(),new HtmlImage(this,geocode,true,cache.getReason(),false),null),TextView.BufferType.SPANNABLE);
      descView.setMovementMethod(LinkMovementMethod.getInstance());
    }
    if (longDescDisplayed) {
      parseLongDescription();
      if (StringUtils.isNotBlank(longDesc)) {
        ((LinearLayout)findViewById(R.id.desc_box)).setVisibility(View.VISIBLE);
        TextView descView=(TextView)findViewById(R.id.description);
        descView.setVisibility(View.VISIBLE);
        descView.setText(longDesc,TextView.BufferType.SPANNABLE);
        descView.setMovementMethod(LinkMovementMethod.getInstance());
        Button showDesc=(Button)findViewById(R.id.show_description);
        showDesc.setVisibility(View.GONE);
        showDesc.setOnTouchListener(null);
        showDesc.setOnClickListener(null);
      }
    }
 else     if (!longDescDisplayed && StringUtils.isNotBlank(cache.getDescription())) {
      ((LinearLayout)findViewById(R.id.desc_box)).setVisibility(View.VISIBLE);
      Button showDesc=(Button)findViewById(R.id.show_description);
      showDesc.setVisibility(View.VISIBLE);
      showDesc.setOnClickListener(new View.OnClickListener(){
        public void onClick(        View arg0){
          loadLongDesc();
        }
      }
);
    }
    Button buttonWatchlistAdd=(Button)findViewById(R.id.add_to_watchlist);
    Button buttonWatchlistRemove=(Button)findViewById(R.id.remove_from_watchlist);
    buttonWatchlistAdd.setOnClickListener(new AddToWatchlistClickListener());
    buttonWatchlistRemove.setOnClickListener(new RemoveFromWatchlistClickListener());
    updateWatchlistBox();
    LinearLayout waypoints=(LinearLayout)findViewById(R.id.waypoints);
    waypoints.removeAllViews();
    if (CollectionUtils.isNotEmpty(cache.getWaypoints())) {
      LinearLayout waypointView;
      List<cgWaypoint> sortedWaypoints=new ArrayList<cgWaypoint>(cache.getWaypoints());
      Collections.sort(sortedWaypoints);
      for (      cgWaypoint wpt : sortedWaypoints) {
        waypointView=(LinearLayout)inflater.inflate(R.layout.waypoint_item,null);
        final TextView identification=(TextView)waypointView.findViewById(R.id.identification);
        ((TextView)waypointView.findViewById(R.id.type)).setText(cgBase.waypointTypes.get(wpt.getWaypointType()));
        if (!wpt.getPrefix().equalsIgnoreCase("OWN")) {
          identification.setText(wpt.getPrefix().trim() + "/" + wpt.getLookup().trim());
        }
 else {
          identification.setText(res.getString(R.string.waypoint_custom));
        }
        TextView nameView=(TextView)waypointView.findViewById(R.id.name);
        if (StringUtils.isBlank(wpt.getName())) {
          nameView.setText(wpt.getCoords().toString());
        }
 else {
          nameView.setText(StringEscapeUtils.unescapeHtml4(wpt.getName()));
        }
        wpt.setIcon(res,nameView);
        TextView noteView=(TextView)waypointView.findViewById(R.id.note);
        if (containsHtml(wpt.getNote())) {
          noteView.setText(Html.fromHtml(wpt.getNote().trim()),TextView.BufferType.SPANNABLE);
        }
 else {
          noteView.setText(wpt.getNote().trim());
        }
        waypointView.setOnClickListener(new waypointInfo(wpt.getId()));
        registerForContextMenu(waypointView);
        waypoints.addView(waypointView);
      }
    }
    Button addWaypoint=(Button)findViewById(R.id.add_waypoint);
    addWaypoint.setClickable(true);
    addWaypoint.setOnClickListener(new addWaypoint());
    if (StringUtils.isNotBlank(cache.getHint())) {
      ((LinearLayout)findViewById(R.id.hint_box)).setVisibility(View.VISIBLE);
      TextView hintView=((TextView)findViewById(R.id.hint));
      hintView.setText(CryptUtils.rot13(cache.getHint().trim()));
      hintView.setClickable(true);
      hintView.setOnClickListener(new codeHint());
    }
 else {
      ((LinearLayout)findViewById(R.id.hint_box)).setVisibility(View.GONE);
      TextView hintView=((TextView)findViewById(R.id.hint));
      hintView.setClickable(false);
      hintView.setOnClickListener(null);
    }
    if (geo != null && geo.coordsNow != null && cache != null && cache.getCoords() != null) {
      cacheDistance.setText(cgBase.getHumanDistance(geo.coordsNow.distanceTo(cache.getCoords())));
      cacheDistance.bringToFront();
    }
  }
 catch (  Exception e) {
    Log.e(Settings.tag,"cgeodetail.setView: " + e.toString());
  }
  progress.dismiss();
  displayLogs();
  IConnector connector=ConnectorFactory.getConnector(cache);
  if (connector != null) {
    String license=connector.getLicenseText(cache);
    if (StringUtils.isNotBlank(license)) {
      ((LinearLayout)findViewById(R.id.license_box)).setVisibility(View.VISIBLE);
      TextView licenseView=((TextView)findViewById(R.id.license));
      licenseView.setText(Html.fromHtml(license),BufferType.SPANNABLE);
      licenseView.setClickable(true);
      licenseView.setMovementMethod(LinkMovementMethod.getInstance());
    }
 else {
      ((LinearLayout)findViewById(R.id.license_box)).setVisibility(View.GONE);
    }
  }
  if (geo != null) {
    geoUpdate.updateLoc(geo);
  }
}
