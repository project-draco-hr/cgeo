{
  RelativeLayout itemLayout;
  TextView itemName;
  TextView itemValue;
  if (searchId == null) {
    return;
  }
  cache=app.getCache(searchId);
  if (cache == null) {
    if (waitDialog != null && waitDialog.isShowing())     waitDialog.dismiss();
    if (StringUtils.isNotBlank(geocode)) {
      showToast(res.getString(R.string.err_detail_cache_find) + " " + geocode+ ".");
    }
 else {
      geocode=null;
      showToast(res.getString(R.string.err_detail_cache_find_some));
    }
    finish();
    return;
  }
  try {
    if (geocode == null && StringUtils.isNotBlank(cache.geocode)) {
      geocode=cache.geocode;
    }
    if (guid == null && StringUtils.isNotBlank(cache.guid)) {
      guid=cache.guid;
    }
    setTitle(cache.geocode.toUpperCase());
    inflater=getLayoutInflater();
    ScrollView scroll=(ScrollView)findViewById(R.id.details_list_box);
    scroll.setVisibility(View.VISIBLE);
    LinearLayout detailsList=(LinearLayout)findViewById(R.id.details_list);
    detailsList.removeAllViews();
    ((TextView)findViewById(R.id.actionbar_title)).setCompoundDrawablesWithIntrinsicBounds((Drawable)getResources().getDrawable(cgBase.getCacheIcon(cache.type)),null,null,null);
    itemLayout=(RelativeLayout)inflater.inflate(R.layout.cache_item,null);
    itemName=(TextView)itemLayout.findViewById(R.id.name);
    itemValue=(TextView)itemLayout.findViewById(R.id.value);
    itemName.setText(res.getString(R.string.cache_name));
    Spannable span=(new Spannable.Factory()).newSpannable(Html.fromHtml(cache.name).toString());
    if (cache.disabled || cache.archived) {
      span.setSpan(new StrikethroughSpan(),0,span.toString().length(),Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);
    }
    itemValue.setText(span);
    detailsList.addView(itemLayout);
    itemLayout=(RelativeLayout)inflater.inflate(R.layout.cache_item,null);
    itemName=(TextView)itemLayout.findViewById(R.id.name);
    itemValue=(TextView)itemLayout.findViewById(R.id.value);
    itemName.setText(res.getString(R.string.cache_type));
    String size="";
    if (cache.size != null) {
      if (!(cache.isEventCache() && cache.size == CacheSize.NOT_CHOSEN)) {
        size=" (" + res.getString(cache.size.stringId) + ")";
      }
    }
    if (cgBase.cacheTypesInv.containsKey(cache.type)) {
      itemValue.setText(cgBase.cacheTypesInv.get(cache.type) + size);
    }
 else {
      itemValue.setText(cgBase.cacheTypesInv.get("mystery") + size);
    }
    detailsList.addView(itemLayout);
    itemLayout=(RelativeLayout)inflater.inflate(R.layout.cache_item,null);
    itemName=(TextView)itemLayout.findViewById(R.id.name);
    itemValue=(TextView)itemLayout.findViewById(R.id.value);
    itemName.setText(res.getString(R.string.cache_geocode));
    itemValue.setText(cache.geocode.toUpperCase());
    detailsList.addView(itemLayout);
    if (cache.logOffline || cache.archived || cache.disabled|| cache.members|| cache.found) {
      itemLayout=(RelativeLayout)inflater.inflate(R.layout.cache_item,null);
      itemName=(TextView)itemLayout.findViewById(R.id.name);
      itemValue=(TextView)itemLayout.findViewById(R.id.value);
      itemName.setText(res.getString(R.string.cache_status));
      StringBuilder state=new StringBuilder();
      if (cache.logOffline) {
        if (state.length() > 0) {
          state.append(", ");
        }
        state.append(res.getString(R.string.cache_status_offline_log));
      }
      if (cache.found) {
        if (state.length() > 0) {
          state.append(", ");
        }
        state.append(res.getString(R.string.cache_status_found));
      }
      if (cache.archived) {
        if (state.length() > 0) {
          state.append(", ");
        }
        state.append(res.getString(R.string.cache_status_archived));
      }
      if (cache.disabled) {
        if (state.length() > 0) {
          state.append(", ");
        }
        state.append(res.getString(R.string.cache_status_disabled));
      }
      if (cache.members) {
        if (state.length() > 0) {
          state.append(", ");
        }
        state.append(res.getString(R.string.cache_status_premium));
      }
      itemValue.setText(state.toString());
      detailsList.addView(itemLayout);
      state=null;
    }
    itemLayout=(RelativeLayout)inflater.inflate(R.layout.cache_item,null);
    itemName=(TextView)itemLayout.findViewById(R.id.name);
    itemValue=(TextView)itemLayout.findViewById(R.id.value);
    itemName.setText(res.getString(R.string.cache_distance));
    if (cache.distance != null) {
      itemValue.setText("~" + base.getHumanDistance(cache.distance));
    }
 else {
      itemValue.setText("--");
    }
    detailsList.addView(itemLayout);
    cacheDistance=itemValue;
    if (cache.difficulty != null && cache.difficulty > 0) {
      addStarRating(detailsList,res.getString(R.string.cache_difficulty),cache.difficulty);
    }
    if (cache.terrain != null && cache.terrain > 0) {
      addStarRating(detailsList,res.getString(R.string.cache_terrain),cache.terrain);
    }
    if (cache.rating != null && cache.rating > 0) {
      itemLayout=addStarRating(detailsList,res.getString(R.string.cache_rating),cache.rating);
      if (cache.votes != null) {
        final TextView itemAddition=(TextView)itemLayout.findViewById(R.id.addition);
        itemAddition.setText("(" + cache.votes + ")");
        itemAddition.setVisibility(View.VISIBLE);
      }
    }
    if (cache.favouriteCnt != null) {
      itemLayout=(RelativeLayout)inflater.inflate(R.layout.cache_item,null);
      itemName=(TextView)itemLayout.findViewById(R.id.name);
      itemValue=(TextView)itemLayout.findViewById(R.id.value);
      itemName.setText(res.getString(R.string.cache_favourite));
      itemValue.setText(String.format("%d",cache.favouriteCnt) + "??");
      detailsList.addView(itemLayout);
    }
    if (StringUtils.isNotBlank(cache.owner) || StringUtils.isNotBlank(cache.ownerReal)) {
      itemLayout=(RelativeLayout)inflater.inflate(R.layout.cache_item,null);
      itemName=(TextView)itemLayout.findViewById(R.id.name);
      itemValue=(TextView)itemLayout.findViewById(R.id.value);
      itemName.setText(res.getString(R.string.cache_owner));
      if (StringUtils.isNotBlank(cache.owner)) {
        itemValue.setText(Html.fromHtml(cache.owner),TextView.BufferType.SPANNABLE);
      }
 else       if (StringUtils.isNotBlank(cache.ownerReal)) {
        itemValue.setText(Html.fromHtml(cache.ownerReal),TextView.BufferType.SPANNABLE);
      }
      itemValue.setOnClickListener(new userActions());
      detailsList.addView(itemLayout);
    }
    if (cache.hidden != null && cache.hidden.getTime() > 0) {
      itemLayout=(RelativeLayout)inflater.inflate(R.layout.cache_item,null);
      itemName=(TextView)itemLayout.findViewById(R.id.name);
      itemValue=(TextView)itemLayout.findViewById(R.id.value);
      if (cache.type != null && (cache.type.equalsIgnoreCase("event") || cache.type.equalsIgnoreCase("mega") || cache.type.equalsIgnoreCase("cito"))) {
        itemName.setText(res.getString(R.string.cache_event));
      }
 else {
        itemName.setText(res.getString(R.string.cache_hidden));
      }
      itemValue.setText(base.formatFullDate(cache.hidden.getTime()));
      detailsList.addView(itemLayout);
    }
    if (StringUtils.isNotBlank(cache.location)) {
      itemLayout=(RelativeLayout)inflater.inflate(R.layout.cache_item,null);
      itemName=(TextView)itemLayout.findViewById(R.id.name);
      itemValue=(TextView)itemLayout.findViewById(R.id.value);
      itemName.setText(res.getString(R.string.cache_location));
      itemValue.setText(cache.location);
      detailsList.addView(itemLayout);
    }
    if (cache.coords != null) {
      itemLayout=(RelativeLayout)inflater.inflate(R.layout.cache_item,null);
      itemName=(TextView)itemLayout.findViewById(R.id.name);
      itemValue=(TextView)itemLayout.findViewById(R.id.value);
      itemName.setText(res.getString(R.string.cache_coordinates));
      itemValue.setText(cache.latitudeString + " | " + cache.longitudeString);
      detailsList.addView(itemLayout);
    }
    if (CollectionUtils.isNotEmpty(cache.attributes)) {
      final LinearLayout attribBox=(LinearLayout)findViewById(R.id.attributes_innerbox);
      attributeBoxMaxWidth=((WindowManager)getSystemService(Context.WINDOW_SERVICE)).getDefaultDisplay().getWidth();
      ViewParent child=attribBox;
      do {
        if (child instanceof View)         attributeBoxMaxWidth=attributeBoxMaxWidth - ((View)child).getPaddingLeft() - ((View)child).getPaddingRight();
        child=child.getParent();
      }
 while (child != null);
      attributeDescriptionsLayout=null;
      attributeIconsLayout=null;
      attribBox.setOnClickListener(new View.OnClickListener(){
        @Override public void onClick(        View v){
          toggleAttributeDisplay(attribBox,attributeBoxMaxWidth);
        }
      }
);
      if (attributesShowAsIcons || noAttributeIconsFound) {
        showAttributeIcons(attribBox,attributeBoxMaxWidth);
      }
 else {
        showAttributeDescriptions(attribBox);
      }
      findViewById(R.id.attributes_box).setVisibility(View.VISIBLE);
    }
    if (CollectionUtils.isNotEmpty(cache.inventory)) {
      final LinearLayout inventBox=(LinearLayout)findViewById(R.id.inventory_box);
      final TextView inventView=(TextView)findViewById(R.id.inventory);
      StringBuilder inventoryString=new StringBuilder();
      for (      cgTrackable inventoryItem : cache.inventory) {
        if (inventoryString.length() > 0) {
          inventoryString.append('\n');
        }
        if (inventoryItem.name.indexOf('<') >= 0 || inventoryItem.name.indexOf('&') >= 0) {
          inventoryString.append(Html.fromHtml(inventoryItem.name).toString());
        }
 else {
          inventoryString.append(inventoryItem.name);
        }
      }
      inventView.setText(inventoryString);
      inventBox.setClickable(true);
      inventBox.setOnClickListener(new selectTrackable());
      inventBox.setVisibility(View.VISIBLE);
    }
    final TextView offlineText=(TextView)findViewById(R.id.offline_text);
    final Button offlineRefresh=(Button)findViewById(R.id.offline_refresh);
    final Button offlineStore=(Button)findViewById(R.id.offline_store);
    if (cache.reason >= 1) {
      Long diff=(System.currentTimeMillis() / (60 * 1000)) - (cache.detailedUpdate / (60 * 1000));
      String ago="";
      if (diff < 15) {
        ago=res.getString(R.string.cache_offline_time_mins_few);
      }
 else       if (diff < 50) {
        ago=res.getString(R.string.cache_offline_time_about) + " " + diff+ " "+ res.getString(R.string.cache_offline_time_mins);
      }
 else       if (diff < 90) {
        ago=res.getString(R.string.cache_offline_time_about) + " " + res.getString(R.string.cache_offline_time_hour);
      }
 else       if (diff < (48 * 60)) {
        ago=res.getString(R.string.cache_offline_time_about) + " " + (diff / 60)+ " "+ res.getString(R.string.cache_offline_time_hours);
      }
 else {
        ago=res.getString(R.string.cache_offline_time_about) + " " + (diff / (24 * 60))+ " "+ res.getString(R.string.cache_offline_time_days);
      }
      offlineText.setText(res.getString(R.string.cache_offline_stored) + "\n" + ago);
      offlineRefresh.setOnClickListener(new storeCache());
      offlineStore.setText(res.getString(R.string.cache_offline_drop));
      offlineStore.setClickable(true);
      offlineStore.setOnClickListener(new dropCache());
    }
 else {
      offlineText.setText(res.getString(R.string.cache_offline_not_ready));
      offlineRefresh.setOnClickListener(new refreshCache());
      offlineStore.setText(res.getString(R.string.cache_offline_store));
      offlineStore.setClickable(true);
      offlineStore.setOnClickListener(new storeCache());
    }
    offlineRefresh.setVisibility(cache.supportsRefresh() ? View.VISIBLE : View.GONE);
    offlineRefresh.setClickable(true);
    if (StringUtils.isNotBlank(cache.personalNote)) {
      ((LinearLayout)findViewById(R.id.personalnote_box)).setVisibility(View.VISIBLE);
      TextView personalNoteText=(TextView)findViewById(R.id.personalnote);
      personalNoteText.setVisibility(View.VISIBLE);
      personalNoteText.setText(cache.personalNote,TextView.BufferType.SPANNABLE);
      personalNoteText.setMovementMethod(LinkMovementMethod.getInstance());
    }
    if (StringUtils.isNotBlank(cache.shortdesc)) {
      ((LinearLayout)findViewById(R.id.desc_box)).setVisibility(View.VISIBLE);
      TextView descView=(TextView)findViewById(R.id.shortdesc);
      descView.setVisibility(View.VISIBLE);
      descView.setText(Html.fromHtml(cache.shortdesc.trim(),new cgHtmlImg(this,geocode,true,cache.reason,false),null),TextView.BufferType.SPANNABLE);
      descView.setMovementMethod(LinkMovementMethod.getInstance());
    }
    if (longDescDisplayed) {
      parseLongDescription();
      if (StringUtils.isNotBlank(longDesc)) {
        ((LinearLayout)findViewById(R.id.desc_box)).setVisibility(View.VISIBLE);
        TextView descView=(TextView)findViewById(R.id.description);
        descView.setVisibility(View.VISIBLE);
        descView.setText(longDesc,TextView.BufferType.SPANNABLE);
        descView.setMovementMethod(LinkMovementMethod.getInstance());
        Button showDesc=(Button)findViewById(R.id.show_description);
        showDesc.setVisibility(View.GONE);
        showDesc.setOnTouchListener(null);
        showDesc.setOnClickListener(null);
      }
    }
 else     if (longDescDisplayed == false && StringUtils.isNotBlank(cache.description)) {
      ((LinearLayout)findViewById(R.id.desc_box)).setVisibility(View.VISIBLE);
      Button showDesc=(Button)findViewById(R.id.show_description);
      showDesc.setVisibility(View.VISIBLE);
      showDesc.setOnClickListener(new View.OnClickListener(){
        public void onClick(        View arg0){
          loadLongDesc();
        }
      }
);
    }
    Button buttonWatchlistAdd=(Button)findViewById(R.id.add_to_watchlist);
    Button buttonWatchlistRemove=(Button)findViewById(R.id.remove_from_watchlist);
    buttonWatchlistAdd.setOnClickListener(new AddToWatchlistClickListener());
    buttonWatchlistRemove.setOnClickListener(new RemoveFromWatchlistClickListener());
    updateWatchlistBox();
    LinearLayout waypoints=(LinearLayout)findViewById(R.id.waypoints);
    waypoints.removeAllViews();
    if (CollectionUtils.isNotEmpty(cache.waypoints)) {
      LinearLayout waypointView;
      List<cgWaypoint> sortedWaypoints=new ArrayList<cgWaypoint>(cache.waypoints);
      Collections.sort(sortedWaypoints);
      for (      cgWaypoint wpt : sortedWaypoints) {
        waypointView=(LinearLayout)inflater.inflate(R.layout.waypoint_item,null);
        final TextView identification=(TextView)waypointView.findViewById(R.id.identification);
        ((TextView)waypointView.findViewById(R.id.type)).setText(cgBase.waypointTypes.get(wpt.type));
        if (wpt.prefix.equalsIgnoreCase("OWN") == false) {
          identification.setText(wpt.prefix.trim() + "/" + wpt.lookup.trim());
        }
 else {
          identification.setText(res.getString(R.string.waypoint_custom));
        }
        TextView nameView=(TextView)waypointView.findViewById(R.id.name);
        if (StringUtils.isBlank(wpt.name)) {
          nameView.setText(cgBase.formatCoords(wpt.coords,true));
        }
 else {
          if (wpt.name.indexOf('<') >= 0 || wpt.name.indexOf('&') >= 0) {
            nameView.setText(Html.fromHtml(wpt.name.trim()),TextView.BufferType.SPANNABLE);
          }
 else {
            nameView.setText(wpt.name.trim());
          }
        }
        wpt.setIcon(res,base,nameView);
        if (wpt.note.indexOf('<') >= 0 || wpt.note.indexOf('&') >= 0) {
          ((TextView)waypointView.findViewById(R.id.note)).setText(Html.fromHtml(wpt.note.trim()),TextView.BufferType.SPANNABLE);
        }
 else {
          ((TextView)waypointView.findViewById(R.id.note)).setText(wpt.note.trim());
        }
        waypointView.setOnClickListener(new waypointInfo(wpt.id));
        waypoints.addView(waypointView);
      }
    }
    Button addWaypoint=(Button)findViewById(R.id.add_waypoint);
    addWaypoint.setClickable(true);
    addWaypoint.setOnClickListener(new addWaypoint());
    if (StringUtils.isNotBlank(cache.hint)) {
      ((LinearLayout)findViewById(R.id.hint_box)).setVisibility(View.VISIBLE);
      TextView hintView=((TextView)findViewById(R.id.hint));
      hintView.setText(cgBase.rot13(cache.hint.trim()));
      hintView.setClickable(true);
      hintView.setOnClickListener(new codeHint());
    }
 else {
      ((LinearLayout)findViewById(R.id.hint_box)).setVisibility(View.GONE);
      TextView hintView=((TextView)findViewById(R.id.hint));
      hintView.setClickable(false);
      hintView.setOnClickListener(null);
    }
    if (geo != null && geo.coordsNow != null && cache != null && cache.coords != null) {
      cacheDistance.setText(base.getHumanDistance(geo.coordsNow.distanceTo(cache.coords)));
      cacheDistance.bringToFront();
    }
  }
 catch (  Exception e) {
    Log.e(cgSettings.tag,"cgeodetail.setView: " + e.toString());
  }
  if (waitDialog != null && waitDialog.isShowing())   waitDialog.dismiss();
  if (storeDialog != null && storeDialog.isShowing())   storeDialog.dismiss();
  if (dropDialog != null && dropDialog.isShowing())   dropDialog.dismiss();
  if (refreshDialog != null && refreshDialog.isShowing())   refreshDialog.dismiss();
  displayLogs();
  if (geo != null)   geoUpdate.updateLoc(geo);
}
