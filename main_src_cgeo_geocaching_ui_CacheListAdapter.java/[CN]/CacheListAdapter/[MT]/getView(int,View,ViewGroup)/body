{
  if (inflater == null) {
    inflater=((Activity)getContext()).getLayoutInflater();
  }
  if (position > getCount()) {
    Log.w("CacheListAdapter.getView: Attempt to access missing item #" + position);
    return null;
  }
  final Geocache cache=getItem(position);
  View v=rowView;
  final ViewHolder holder;
  if (v == null) {
    v=inflater.inflate(R.layout.cacheslist_item,null);
    holder=new ViewHolder(v);
  }
 else {
    holder=(ViewHolder)v.getTag();
  }
  final boolean lightSkin=Settings.isLightSkin();
  final TouchListener touchListener=new TouchListener(cache,this);
  v.setOnClickListener(touchListener);
  v.setOnLongClickListener(touchListener);
  v.setOnTouchListener(touchListener);
  holder.checkbox.setVisibility(selectMode ? View.VISIBLE : View.GONE);
  holder.checkbox.setChecked(cache.isStatusChecked());
  holder.checkbox.setOnClickListener(new SelectionCheckBoxListener(cache));
  distances.add(holder.distance);
  holder.distance.setContent(cache.getCoords());
  compasses.add(holder.direction);
  holder.direction.setTargetCoords(cache.getCoords());
  if (cache.isFound() && cache.isLogOffline()) {
    holder.logStatusMark.setImageResource(R.drawable.mark_green_orange);
    holder.logStatusMark.setVisibility(View.VISIBLE);
  }
 else   if (cache.isFound()) {
    holder.logStatusMark.setImageResource(R.drawable.mark_green_more);
    holder.logStatusMark.setVisibility(View.VISIBLE);
  }
 else   if (cache.isLogOffline()) {
    holder.logStatusMark.setImageResource(R.drawable.mark_orange);
    holder.logStatusMark.setVisibility(View.VISIBLE);
  }
 else {
    holder.logStatusMark.setVisibility(View.GONE);
  }
  Spannable spannable=null;
  if (cache.isDisabled() || cache.isArchived() || DateUtils.isPastEvent(cache)) {
    spannable=Spannable.Factory.getInstance().newSpannable(cache.getName());
    spannable.setSpan(new StrikethroughSpan(),0,spannable.toString().length(),Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
  }
  if (cache.isArchived()) {
    if (spannable == null) {
      spannable=Spannable.Factory.getInstance().newSpannable(cache.getName());
    }
    spannable.setSpan(new ForegroundColorSpan(res.getColor(R.color.archived_cache_color)),0,spannable.toString().length(),Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
  }
  if (spannable != null) {
    holder.text.setText(spannable,TextView.BufferType.SPANNABLE);
  }
 else {
    holder.text.setText(cache.getName());
  }
  holder.text.setCompoundDrawablesWithIntrinsicBounds(getCacheIcon(cache),null,null,null);
  if (cache.getInventoryItems() > 0) {
    holder.inventory.setVisibility(View.VISIBLE);
  }
 else {
    holder.inventory.setVisibility(View.GONE);
  }
  if (cache.getDistance() != null) {
    holder.distance.setDistance(cache.getDistance());
  }
  if (cache.getCoords() != null && coords != null) {
    holder.distance.update(coords);
  }
  if (isLiveList) {
    if (cache.getCoords() != null) {
      holder.direction.setVisibility(View.VISIBLE);
      holder.dirImg.setVisibility(View.GONE);
      holder.direction.updateAzimuth(azimuth);
      if (coords != null) {
        holder.direction.updateCurrentCoords(coords);
      }
    }
 else     if (cache.getDirection() != null) {
      holder.direction.setVisibility(View.VISIBLE);
      holder.dirImg.setVisibility(View.GONE);
      holder.direction.updateAzimuth(azimuth);
      holder.direction.updateHeading(cache.getDirection());
    }
 else     if (StringUtils.isNotBlank(cache.getDirectionImg())) {
      holder.dirImg.setImageDrawable(DirectionImage.getDrawable(cache.getDirectionImg()));
      holder.dirImg.setVisibility(View.VISIBLE);
      holder.direction.setVisibility(View.GONE);
    }
 else {
      holder.dirImg.setVisibility(View.GONE);
      holder.direction.setVisibility(View.GONE);
    }
  }
  holder.favorite.setText(Integer.toString(cache.getFavoritePoints()));
  int favoriteBack;
  if (lightSkin) {
    favoriteBack=R.drawable.favorite_background_light;
  }
 else {
    favoriteBack=R.drawable.favorite_background_dark;
  }
  final float myVote=cache.getMyVote();
  if (myVote > 0) {
    if (myVote >= 4) {
      favoriteBack=RATING_BACKGROUND[2];
    }
 else     if (myVote >= 3) {
      favoriteBack=RATING_BACKGROUND[1];
    }
 else     if (myVote > 0) {
      favoriteBack=RATING_BACKGROUND[0];
    }
  }
 else {
    final float rating=cache.getRating();
    if (rating >= 3.5) {
      favoriteBack=RATING_BACKGROUND[2];
    }
 else     if (rating >= 2.1) {
      favoriteBack=RATING_BACKGROUND[1];
    }
 else     if (rating > 0.0) {
      favoriteBack=RATING_BACKGROUND[0];
    }
  }
  holder.favorite.setBackgroundResource(favoriteBack);
  if (isHistory() && cache.getVisitedDate() > 0) {
    holder.info.setText(Formatter.formatCacheInfoHistory(cache));
  }
 else {
    holder.info.setText(Formatter.formatCacheInfoLong(cache,cacheListType));
  }
  return v;
}
