{
  if (dir != null) {
    dir=app.removeDir();
  }
  if (geo != null) {
    geo=app.removeGeo();
  }
  int delay=-1;
  int times=0;
  while (times < 3 * 60 / 5) {
    if (needToStop) {
      handler.sendEmptyMessage(-1);
      break;
    }
    String deviceCode=settings.webDeviceCode;
    if (deviceCode == null) {
      deviceCode="";
    }
    HttpResponse responseFromWeb=base.request(URI_SEND2CGEO_READ,"code=" + cgBase.urlencode_rfc3986(deviceCode),true);
    if (responseFromWeb.getStatusLine().getStatusCode() == 200) {
      final String response=cgBase.getResponseData(responseFromWeb);
      if (response.length() > 2) {
        String GCcode=response;
        delay=1;
        Message mes=new Message();
        mes.what=1;
        mes.obj=GCcode;
        handler.sendMessage(mes);
        yield();
        base.storeCache(app,cgeocaches.this,null,GCcode,reason,null);
        Message mes1=new Message();
        mes1.what=2;
        mes1.obj=GCcode;
        handler.sendMessage(mes1);
        yield();
      }
 else       if ("RG".equals(cgBase.getResponseData(responseFromWeb))) {
        settings.setWebNameCode(null,null);
        needToStop=true;
        handler.sendEmptyMessage(-3);
        return;
      }
 else {
        delay=0;
        handler.sendEmptyMessage(0);
        yield();
      }
    }
    if (responseFromWeb.getStatusLine().getStatusCode() != 200) {
      needToStop=true;
      handler.sendEmptyMessage(-2);
      return;
    }
    try {
      yield();
      if (delay == 0) {
        sleep(5000);
        times++;
      }
 else {
        sleep(500);
        times=0;
      }
    }
 catch (    InterruptedException e) {
      Log.e(cgSettings.tag,"cgeocaches.geocachesLoadFromWeb.sleep: " + e.toString());
    }
  }
  handler.sendEmptyMessage(-1);
}
