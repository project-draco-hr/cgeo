{
  final int id=item.getItemId();
  ContextMenu.ContextMenuInfo info=item.getMenuInfo();
  if (info == null) {
    info=lastMenuInfo;
    lastMenuInfo=null;
  }
  AdapterContextMenuInfo adapterInfo=null;
  try {
    adapterInfo=(AdapterContextMenuInfo)info;
  }
 catch (  Exception e) {
    Log.w(Settings.tag,"cgeocaches.onContextItemSelected: " + e.toString());
  }
  int touchedPos=-1;
  cgCache cache=null;
  if (adapterInfo != null) {
    touchedPos=adapterInfo.position;
    if (touchedPos < adapter.getCount()) {
      cache=adapter.getItem(touchedPos);
    }
  }
  if (id == MENU_COMPASS) {
    Intent navigateIntent=new Intent(this,cgeonavigate.class);
    navigateIntent.putExtra("latitude",cache.coords.getLatitude());
    navigateIntent.putExtra("longitude",cache.coords.getLongitude());
    navigateIntent.putExtra("geocode",cache.geocode.toUpperCase());
    navigateIntent.putExtra("name",cache.name);
    startActivity(navigateIntent);
    return true;
  }
 else   if (id == MENU_LOG_VISIT) {
    return cache.logVisit(this);
  }
 else   if (id == MENU_CACHE_DETAILS) {
    Intent cachesIntent=new Intent(this,cgeodetail.class);
    cachesIntent.putExtra("geocode",cache.geocode.toUpperCase());
    cachesIntent.putExtra("name",cache.name);
    startActivity(cachesIntent);
    return true;
  }
 else   if (id == MENU_FILTER_SIZE_MICRO) {
    return setFilter(new cgFilterBySize(CacheSize.MICRO));
  }
 else   if (id == MENU_FILTER_SIZE_SMALL) {
    return setFilter(new cgFilterBySize(CacheSize.SMALL));
  }
 else   if (id == MENU_FILTER_SIZE_REGULAR) {
    return setFilter(new cgFilterBySize(CacheSize.REGULAR));
  }
 else   if (id == MENU_FILTER_SIZE_LARGE) {
    return setFilter(new cgFilterBySize(CacheSize.LARGE));
  }
 else   if (id == MENU_FILTER_SIZE_OTHER) {
    return setFilter(new cgFilterBySize(CacheSize.OTHER));
  }
 else   if (id == MENU_FILTER_SIZE_VIRTUAL) {
    return setFilter(new cgFilterBySize(CacheSize.VIRTUAL));
  }
 else   if (id == MENU_FILTER_SIZE_NOT_CHOSEN) {
    return setFilter(new cgFilterBySize(CacheSize.NOT_CHOSEN));
  }
 else   if (id == MENU_FILTER_TYPE_TRADITIONAL) {
    return setFilter(new cgFilterByType(CacheType.TRADITIONAL));
  }
 else   if (id == MENU_FILTER_TYPE_MULTI) {
    return setFilter(new cgFilterByType(CacheType.MULTI));
  }
 else   if (id == MENU_FILTER_TYPE_MYSTERY) {
    return setFilter(new cgFilterByType(CacheType.MYSTERY));
  }
 else   if (id == MENU_FILTER_TYPE_LETTERBOX) {
    return setFilter(new cgFilterByType(CacheType.LETTERBOX));
  }
 else   if (id == MENU_FILTER_TYPE_EVENT) {
    return setFilter(new cgFilterByType(CacheType.EVENT));
  }
 else   if (id == MENU_FILTER_TYPE_MEGA) {
    return setFilter(new cgFilterByType(CacheType.MEGA_EVENT));
  }
 else   if (id == MENU_FILTER_TYPE_EARTH) {
    return setFilter(new cgFilterByType(CacheType.EARTH));
  }
 else   if (id == MENU_FILTER_TYPE_CITO) {
    return setFilter(new cgFilterByType(CacheType.CITO));
  }
 else   if (id == MENU_FILTER_TYPE_WEBCAM) {
    return setFilter(new cgFilterByType(CacheType.WEBCAM));
  }
 else   if (id == MENU_FILTER_TYPE_VIRTUAL) {
    return setFilter(new cgFilterByType(CacheType.VIRTUAL));
  }
 else   if (id == MENU_FILTER_TYPE_WHERIGO) {
    return setFilter(new cgFilterByType(CacheType.WHERIGO));
  }
 else   if (id == MENU_FILTER_TYPE_LOSTFOUND) {
    return setFilter(new cgFilterByType(CacheType.LOSTANDFOUND));
  }
 else   if (id == MENU_FILTER_TYPE_APE) {
    return setFilter(new cgFilterByType(CacheType.PROJECT_APE));
  }
 else   if (id == MENU_FILTER_TYPE_GCHQ) {
    return setFilter(new cgFilterByType(CacheType.GCHQ));
  }
 else   if (id == MENU_FILTER_TYPE_GPS) {
    return setFilter(new cgFilterByType(CacheType.GPS_EXHIBIT));
  }
 else   if (id == MENU_DROP_CACHE) {
    cgBase.dropCache(app,cache,new Handler(){
      @Override public void handleMessage(      Message msg){
        refreshCurrentList();
      }
    }
);
    return true;
  }
 else   if (id >= CONTEXT_MENU_MOVE_TO_LIST && id < CONTEXT_MENU_MOVE_TO_LIST + 100) {
    int newListId=id - CONTEXT_MENU_MOVE_TO_LIST;
    if (cache != null) {
      app.moveToList(cache.geocode,newListId);
    }
    adapter.resetChecks();
    refreshCurrentList();
    return true;
  }
 else   if (id >= MENU_MOVE_SELECTED_OR_ALL_TO_LIST && id < MENU_MOVE_SELECTED_OR_ALL_TO_LIST + 100) {
    int newListId=id - MENU_MOVE_SELECTED_OR_ALL_TO_LIST;
    boolean moveAll=adapter.getChecked() == 0;
    final List<cgCache> cacheListTemp=new ArrayList<cgCache>(cacheList);
    for (    cgCache c : cacheListTemp) {
      if (moveAll || c.statusChecked) {
        app.moveToList(c.geocode,newListId);
      }
    }
    adapter.resetChecks();
    refreshCurrentList();
    return true;
  }
  lastMenuInfo=info;
  if (cache != null) {
    final UUID singleSearchId=base.searchByGeocode(cache.geocode,null,0,false,null);
    if (NavigationAppFactory.onMenuItemSelected(item,geo,this,res,cache,singleSearchId,null,null)) {
      return true;
    }
    int logType=id - MENU_LOG_VISIT_OFFLINE;
    cache.logOffline(this,logType,base);
  }
  return true;
}
