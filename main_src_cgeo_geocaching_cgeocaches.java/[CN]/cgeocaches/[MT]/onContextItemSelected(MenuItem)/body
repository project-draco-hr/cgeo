{
  ContextMenu.ContextMenuInfo info=item.getMenuInfo();
  if (info == null) {
    info=lastMenuInfo;
    lastMenuInfo=null;
  }
  AdapterContextMenuInfo adapterInfo=null;
  try {
    adapterInfo=(AdapterContextMenuInfo)info;
  }
 catch (  Exception e) {
    Log.w("cgeocaches.onContextItemSelected",e);
  }
  final cgCache cache=adapterInfo != null ? getCacheFromAdapter(adapterInfo) : null;
  if (cache == null) {
    return true;
  }
  final int id=item.getItemId();
switch (id) {
case MENU_DEFAULT_NAVIGATION:
    NavigationAppFactory.startDefaultNavigationApplication(1,this,cache);
  break;
case MENU_NAVIGATION:
NavigationAppFactory.showNavigationMenu(this,cache,null,null);
break;
case MENU_CACHE_DETAILS:
final Intent cachesIntent=new Intent(this,CacheDetailActivity.class);
cachesIntent.putExtra("geocode",cache.getGeocode());
cachesIntent.putExtra("name",cache.getName());
startActivity(cachesIntent);
break;
case MENU_DROP_CACHE:
cache.drop(new Handler(){
@Override public void handleMessage(Message msg){
adapter.notifyDataSetChanged();
refreshCurrentList();
}
}
);
break;
case MENU_MOVE_TO_LIST:
new StoredList.UserInterface(this).promptForListSelection(R.string.cache_menu_move_list,new RunnableWithArgument<Integer>(){
@Override public void run(Integer newListId){
cgData.moveToList(Collections.singletonList(cache),newListId);
adapter.setSelectMode(false);
refreshCurrentList();
}
}
,true,listId);
break;
case MENU_STORE_CACHE:
cache.store(null);
break;
case MENU_EXPORT:
ExportFactory.showExportMenu(Collections.singletonList(cache),this);
return false;
default :
lastMenuInfo=info;
LoggingUI.onMenuItemSelected(item,this,cache);
}
return true;
}
