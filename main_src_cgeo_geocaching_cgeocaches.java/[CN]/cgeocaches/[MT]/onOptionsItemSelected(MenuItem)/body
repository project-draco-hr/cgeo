{
  int itemId=item.getItemId();
switch (itemId) {
case MENU_SWITCH_SELECT_MODE:
    if (adapter != null) {
      adapter.switchSelectMode();
    }
  invalidateOptionsMenuCompatible();
return true;
case MENU_REFRESH_STORED:
refreshStored();
invalidateOptionsMenuCompatible();
return true;
case MENU_DROP_CACHES:
dropStored(false);
invalidateOptionsMenuCompatible();
return false;
case MENU_DROP_CACHES_AND_LIST:
dropStored(true);
invalidateOptionsMenuCompatible();
return true;
case MENU_IMPORT_GPX:
importGpx();
invalidateOptionsMenuCompatible();
return false;
case MENU_CREATE_LIST:
new StoredList.UserInterface(this).promptForListCreation(null);
invalidateOptionsMenuCompatible();
return false;
case MENU_DROP_LIST:
removeList(true);
invalidateOptionsMenuCompatible();
return false;
case MENU_RENAME_LIST:
renameList();
return false;
case MENU_INVERT_SELECTION:
if (adapter != null) {
adapter.invertSelection();
}
invalidateOptionsMenuCompatible();
return false;
case MENU_SWITCH_LIST:
selectList(null);
invalidateOptionsMenuCompatible();
return false;
case MENU_FILTER:
showFilterMenu(null);
return true;
case MENU_SORT:
new ComparatorUserInterface(this).selectComparator(adapter.getCacheComparator(),new RunnableWithArgument<CacheComparator>(){
@Override public void run(CacheComparator selectedComparator){
setComparator(selectedComparator);
}
}
);
return true;
case MENU_IMPORT_WEB:
importWeb();
return false;
case MENU_EXPORT:
ExportFactory.showExportMenu(adapter.getCheckedOrAllCaches(),this);
return false;
case MENU_REMOVE_FROM_HISTORY:
removeFromHistoryCheck();
invalidateOptionsMenuCompatible();
return false;
case MENU_MOVE_TO_LIST:
moveCachesToOtherList();
invalidateOptionsMenuCompatible();
return true;
case MENU_DELETE_EVENTS:
deletePastEvents();
invalidateOptionsMenuCompatible();
return true;
default :
return CacheListAppFactory.onMenuItemSelected(item,cacheList,this,search);
}
}
