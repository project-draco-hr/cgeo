{
  int itemId=item.getItemId();
switch (itemId) {
case MENU_SWITCH_SELECT_MODE:
    if (adapter != null) {
      adapter.switchSelectMode();
    }
  invalidateOptionsMenuCompatible();
return true;
case MENU_REFRESH_STORED:
refreshStored();
invalidateOptionsMenuCompatible();
return true;
case MENU_DROP_CACHES:
dropStored(false);
invalidateOptionsMenuCompatible();
return false;
case MENU_DROP_CACHES_AND_LIST:
dropStored(true);
invalidateOptionsMenuCompatible();
return true;
case MENU_IMPORT_GPX:
importGpx();
invalidateOptionsMenuCompatible();
return false;
case MENU_CREATE_LIST:
new StoredList.UserInterface(this).promptForListCreation(null);
invalidateOptionsMenuCompatible();
return false;
case MENU_DROP_LIST:
removeList(true);
invalidateOptionsMenuCompatible();
return false;
case MENU_RENAME_LIST:
renameList();
return false;
case MENU_INVERT_SELECTION:
if (adapter != null) {
adapter.invertSelection();
}
invalidateOptionsMenuCompatible();
return false;
case MENU_SORT_DISTANCE:
setComparator(item,null);
return false;
case MENU_SORT_DIFFICULTY:
setComparator(item,new DifficultyComparator());
return false;
case MENU_SORT_TERRAIN:
setComparator(item,new TerrainComparator());
return false;
case MENU_SORT_SIZE:
setComparator(item,new SizeComparator());
return false;
case MENU_SORT_FAVORITES:
setComparator(item,new PopularityComparator());
return false;
case MENU_SORT_NAME:
setComparator(item,new NameComparator());
return false;
case MENU_SORT_GEOCODE:
setComparator(item,new GeocodeComparator());
return false;
case MENU_SORT_STORAGE:
setComparator(item,new StorageTimeComparator());
return false;
case MENU_SWITCH_LIST:
selectList(null);
invalidateOptionsMenuCompatible();
return false;
case MENU_SORT_RATING:
setComparator(item,new RatingComparator());
return false;
case MENU_SORT_VOTE:
setComparator(item,new VoteComparator());
return false;
case MENU_SORT_INVENTORY:
setComparator(item,new InventoryComparator());
return false;
case MENU_SORT_DATE:
setComparator(item,new DateComparator());
return true;
case MENU_SORT_FINDS:
setComparator(item,new FindsComparator(app));
return true;
case MENU_SORT_STATE:
setComparator(item,new StateComparator());
return true;
case MENU_FILTER:
new FilterUserInterface(this).selectFilter(new RunnableWithArgument<IFilter>(){
@Override public void run(IFilter selectedFilter){
if (selectedFilter != null) {
setFilter(selectedFilter);
}
 else {
if (adapter != null) {
setFilter(null);
}
}
}
}
);
return true;
case MENU_IMPORT_WEB:
importWeb();
return false;
case MENU_EXPORT:
exportCaches();
return false;
case MENU_REMOVE_FROM_HISTORY:
removeFromHistoryCheck();
invalidateOptionsMenuCompatible();
return false;
case MENU_MOVE_TO_LIST:
moveCachesToOtherList();
invalidateOptionsMenuCompatible();
return true;
}
return CacheListAppFactory.onMenuItemSelected(item,app.currentGeo(),cacheList,this,search);
}
