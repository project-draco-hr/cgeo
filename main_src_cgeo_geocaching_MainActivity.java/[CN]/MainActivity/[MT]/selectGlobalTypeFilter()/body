{
  final List<CacheType> cacheTypes=new ArrayList<>();
  cacheTypes.add(CacheType.ALL);
  cacheTypes.add(CacheType.TRADITIONAL);
  cacheTypes.add(CacheType.MULTI);
  cacheTypes.add(CacheType.MYSTERY);
  final List<CacheType> sorted=new ArrayList<>(Arrays.asList(CacheType.values()));
  sorted.removeAll(cacheTypes);
  Collections.sort(sorted,new Comparator<CacheType>(){
    @Override public int compare(    final CacheType left,    final CacheType right){
      return TextUtils.COLLATOR.compare(left.getL10n(),right.getL10n());
    }
  }
);
  cacheTypes.addAll(sorted);
  int checkedItem=cacheTypes.indexOf(Settings.getCacheType());
  if (checkedItem < 0) {
    checkedItem=0;
  }
  final String[] items=new String[cacheTypes.size()];
  for (int i=0; i < cacheTypes.size(); i++) {
    items[i]=cacheTypes.get(i).getL10n();
  }
  final Builder builder=new AlertDialog.Builder(this);
  builder.setTitle(R.string.menu_filter);
  builder.setSingleChoiceItems(items,checkedItem,new DialogInterface.OnClickListener(){
    @Override public void onClick(    final DialogInterface dialog,    final int position){
      final CacheType cacheType=cacheTypes.get(position);
      Settings.setCacheType(cacheType);
      setFilterTitle();
      dialog.dismiss();
    }
  }
);
  builder.create().show();
}
