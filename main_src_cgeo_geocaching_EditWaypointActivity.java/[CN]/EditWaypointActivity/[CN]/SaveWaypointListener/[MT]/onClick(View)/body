{
  final String bearingText=bearing.getText().toString();
  final String distanceText=distanceView.getText().toString() + distanceUnits.get(distanceUnitSelector.getSelectedItemPosition());
  final String latText=buttonLat.getText().toString();
  final String lonText=buttonLon.getText().toString();
  if (StringUtils.isBlank(bearingText) && StringUtils.isBlank(distanceText) && StringUtils.isBlank(latText)&& StringUtils.isBlank(lonText)) {
    Dialogs.message(EditWaypointActivity.this,R.string.err_point_no_position_given_title,R.string.err_point_no_position_given);
    return;
  }
  Geopoint coords;
  if (StringUtils.isNotBlank(latText) && StringUtils.isNotBlank(lonText)) {
    try {
      coords=new Geopoint(latText,lonText);
    }
 catch (    Geopoint.ParseException e) {
      showToast(res.getString(e.resource));
      return;
    }
  }
 else {
    final IGeoData geo=app.currentGeo();
    if (geo.getCoords() == null) {
      showToast(res.getString(R.string.err_point_curr_position_unavailable));
      return;
    }
    coords=geo.getCoords();
  }
  if (StringUtils.isNotBlank(bearingText) && StringUtils.isNotBlank(distanceText)) {
    double bearing;
    try {
      bearing=Double.parseDouble(bearingText);
    }
 catch (    NumberFormatException e) {
      Dialogs.message(EditWaypointActivity.this,R.string.err_point_bear_and_dist_title,R.string.err_point_bear_and_dist);
      return;
    }
    double distance;
    try {
      distance=DistanceParser.parseDistance(distanceText,!Settings.isUseImperialUnits());
    }
 catch (    NumberFormatException e) {
      showToast(res.getString(R.string.err_parse_dist));
      return;
    }
    coords=coords.project(bearing,distance);
  }
  final String givenName=waypointName.getText().toString().trim();
  final String name=StringUtils.isNotEmpty(givenName) ? givenName : res.getString(R.string.waypoint) + " " + (wpCount + 1);
  final String noteText=note.getText().toString().trim();
  final Geopoint coordsToSave=coords;
  final int selectedTypeIndex=waypointTypeSelector.getSelectedItemPosition();
  final WaypointType type=selectedTypeIndex >= 0 ? POSSIBLE_WAYPOINT_TYPES.get(selectedTypeIndex) : waypoint.getWaypointType();
  final boolean visited=visitedCheckBox.isChecked();
  final ProgressDialog progress=ProgressDialog.show(EditWaypointActivity.this,getString(R.string.waypoint_uploading),getString(R.string.waypoint_being_saved),true);
  final Handler finishHandler=new Handler(){
    @Override public void handleMessage(    Message msg){
switch (msg.what) {
case UPLOAD_SUCCESS:
        showToast(getString(R.string.waypoint_coordinates_has_been_modified_on_website,coordsToSave));
      progress.dismiss();
    finish();
  break;
case SUCCESS:
progress.dismiss();
finish();
break;
case UPLOAD_START:
progress.setMessage(getString(R.string.waypoint_coordinates_uploading_to_website,coordsToSave));
break;
case UPLOAD_ERROR:
progress.dismiss();
finish();
showToast(getString(R.string.waypoint_coordinates_upload_error));
break;
case UPLOAD_NOT_POSSIBLE:
progress.dismiss();
finish();
showToast(getString(R.string.waypoint_coordinates_couldnt_be_modified_on_website));
break;
case SAVE_ERROR:
progress.dismiss();
finish();
showToast(res.getString(R.string.err_waypoint_add_failed));
break;
default :
throw new UnsupportedOperationException();
}
}
}
;
class SaveWptTask extends AsyncTask<Void,Void,Void> {
@Override protected Void doInBackground(Void... params){
final Waypoint waypoint=new Waypoint(name,type,own);
waypoint.setGeocode(geocode);
waypoint.setPrefix(prefix);
waypoint.setLookup(lookup);
waypoint.setCoords(coordsToSave);
waypoint.setNote(noteText);
waypoint.setVisited(visited);
waypoint.setId(id);
Geocache cache=DataStore.loadCache(geocode,LoadFlags.LOAD_WAYPOINTS);
if (cache == null) {
finishHandler.sendEmptyMessage(SAVE_ERROR);
return null;
}
Waypoint oldWaypoint=cache.getWaypointById(id);
if (cache.addOrChangeWaypoint(waypoint,true)) {
DataStore.saveCache(cache,EnumSet.of(SaveFlag.DB));
if (!StaticMapsProvider.hasAllStaticMapsForWaypoint(geocode,waypoint)) {
StaticMapsProvider.removeWpStaticMaps(oldWaypoint,geocode);
if (Settings.isStoreOfflineWpMaps()) {
StaticMapsProvider.storeWaypointStaticMap(cache,waypoint).subscribe();
}
}
if (modifyLocal.isChecked() || modifyBoth.isChecked()) {
if (!cache.hasUserModifiedCoords()) {
final Waypoint origWaypoint=new Waypoint(CgeoApplication.getInstance().getString(R.string.cache_coordinates_original),WaypointType.ORIGINAL,false);
origWaypoint.setCoords(cache.getCoords());
cache.addOrChangeWaypoint(origWaypoint,false);
cache.setUserModifiedCoords(true);
}
cache.setCoords(waypoint.getCoords());
DataStore.saveChangedCache(cache);
}
if (modifyBoth.isChecked() && waypoint.getCoords() != null) {
finishHandler.sendEmptyMessage(UPLOAD_START);
if (cache.supportsOwnCoordinates()) {
boolean result=uploadModifiedCoords(cache,waypoint.getCoords());
finishHandler.sendEmptyMessage(result ? SUCCESS : UPLOAD_ERROR);
}
 else {
showToast(getString(R.string.waypoint_coordinates_couldnt_be_modified_on_website));
finishHandler.sendEmptyMessage(UPLOAD_NOT_POSSIBLE);
}
}
 else {
finishHandler.sendEmptyMessage(SUCCESS);
}
}
 else {
finishHandler.sendEmptyMessage(SAVE_ERROR);
}
return null;
}
}
new SaveWptTask().execute();
}
