{
  if (guids == null && geocodes == null) {
    return null;
  }
  final Map<String,cgRating> ratings=new HashMap<String,cgRating>();
  try {
    final Parameters params=new Parameters();
    if (Settings.isLogin()) {
      final Map<String,String> login=Settings.getGCvoteLogin();
      if (login != null) {
        params.put("userName",login.get("username"),"password",login.get("password"));
      }
    }
    if (CollectionUtils.isNotEmpty(guids)) {
      params.put("cacheIds",StringUtils.join(guids.toArray(),','));
    }
 else {
      params.put("waypoints",StringUtils.join(geocodes.toArray(),','));
    }
    params.put("version","cgeo");
    final String votes=cgBase.getResponseData(cgBase.request("http://gcvote.com/getVotes.php",params,false,false,false));
    if (votes == null) {
      return null;
    }
    String voteData=null;
    final Matcher matcherVoteElement=patternVoteElement.matcher(votes);
    while (matcherVoteElement.find()) {
      if (matcherVoteElement.groupCount() > 0) {
        voteData=matcherVoteElement.group(1);
      }
      if (voteData == null) {
        continue;
      }
      String guid=null;
      cgRating rating=new cgRating();
      boolean loggedIn=false;
      try {
        final Matcher matcherGuid=patternGuid.matcher(voteData);
        if (matcherGuid.find()) {
          if (matcherGuid.groupCount() > 0) {
            guid=matcherGuid.group(1);
          }
        }
      }
 catch (      Exception e) {
        Log.w(Settings.tag,"cgBase.getRating: Failed to parse guid");
      }
      try {
        final Matcher matcherLoggedIn=patternLogIn.matcher(votes);
        if (matcherLoggedIn.find()) {
          if (matcherLoggedIn.groupCount() > 0) {
            if (matcherLoggedIn.group(1).equalsIgnoreCase("true")) {
              loggedIn=true;
            }
          }
        }
      }
 catch (      Exception e) {
        Log.w(Settings.tag,"cgBase.getRating: Failed to parse loggedIn");
      }
      try {
        final Matcher matcherRating=patternRating.matcher(voteData);
        if (matcherRating.find()) {
          if (matcherRating.groupCount() > 0) {
            rating.rating=Float.parseFloat(matcherRating.group(1));
          }
        }
      }
 catch (      Exception e) {
        Log.w(Settings.tag,"cgBase.getRating: Failed to parse rating");
      }
      try {
        final Matcher matcherVotes=patternVotes.matcher(voteData);
        if (matcherVotes.find()) {
          if (matcherVotes.groupCount() > 0) {
            rating.votes=Integer.parseInt(matcherVotes.group(1));
          }
        }
      }
 catch (      Exception e) {
        Log.w(Settings.tag,"cgBase.getRating: Failed to parse vote count");
      }
      if (loggedIn) {
        try {
          final Matcher matcherVote=patternVote.matcher(voteData);
          if (matcherVote.find()) {
            if (matcherVote.groupCount() > 0) {
              rating.myVote=Float.parseFloat(matcherVote.group(1));
            }
          }
        }
 catch (        Exception e) {
          Log.w(Settings.tag,"cgBase.getRating: Failed to parse user's vote");
        }
      }
      if (StringUtils.isNotBlank(guid)) {
        ratings.put(guid,rating);
      }
    }
  }
 catch (  Exception e) {
    Log.e(Settings.tag,"cgBase.getRating: " + e.toString());
  }
  return ratings;
}
