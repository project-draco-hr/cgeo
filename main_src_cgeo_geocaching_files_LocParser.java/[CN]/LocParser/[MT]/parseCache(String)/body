{
  final cgCache cache=new cgCache();
  final Matcher matcherGeocode=patternGeocode.matcher(pointString);
  if (matcherGeocode.find()) {
    cache.setGeocode(matcherGeocode.group(1).trim());
  }
  final Matcher matcherName=patternName.matcher(pointString);
  if (matcherName.find()) {
    final String name=matcherName.group(1).trim();
    cache.setName(StringUtils.substringBeforeLast(name," by ").trim());
  }
 else {
    cache.setName(cache.getGeocode());
  }
  final Matcher matcherLat=patternLat.matcher(pointString);
  final Matcher matcherLon=patternLon.matcher(pointString);
  if (matcherLat.find() && matcherLon.find()) {
    cache.setCoords(parsePoint(matcherLat.group(1).trim(),matcherLon.group(1).trim()));
  }
  final Matcher matcherDifficulty=patternDifficulty.matcher(pointString);
  if (matcherDifficulty.find()) {
    cache.setDifficulty(Float.parseFloat(matcherDifficulty.group(1).trim()));
  }
  final Matcher matcherTerrain=patternTerrain.matcher(pointString);
  if (matcherTerrain.find()) {
    cache.setTerrain(Float.parseFloat(matcherTerrain.group(1).trim()));
  }
  final Matcher matcherContainer=patternContainer.matcher(pointString);
  if (matcherContainer.find()) {
    final int size=Integer.parseInt(matcherContainer.group(1).trim());
    if (size >= 1 && size <= 8) {
      cache.setSize(SIZES[size - 1]);
    }
  }
  return cache;
}
