{
  final Geocache cache=new Geocache();
  final MatcherWrapper matcherGeocode=new MatcherWrapper(patternGeocode,pointString);
  if (matcherGeocode.find()) {
    cache.setGeocode(matcherGeocode.group(1).trim());
  }
  final MatcherWrapper matcherName=new MatcherWrapper(patternName,pointString);
  if (matcherName.find()) {
    final String name=matcherName.group(1).trim();
    String ownerName=StringUtils.trim(StringUtils.substringAfterLast(name,NAME_OWNER_SEPARATOR));
    if (StringUtils.isEmpty(cache.getOwnerUserId()) && StringUtils.isNotEmpty(ownerName)) {
      cache.setOwnerUserId(ownerName);
    }
    cache.setName(StringUtils.substringBeforeLast(name,NAME_OWNER_SEPARATOR).trim());
  }
 else {
    cache.setName(cache.getGeocode());
  }
  final MatcherWrapper matcherLat=new MatcherWrapper(patternLat,pointString);
  final MatcherWrapper matcherLon=new MatcherWrapper(patternLon,pointString);
  if (matcherLat.find() && matcherLon.find()) {
    cache.setCoords(parsePoint(matcherLat.group(1).trim(),matcherLon.group(1).trim()));
  }
  final String difficulty=StringUtils.substringBetween(pointString,"<difficulty>","</difficulty>");
  final String terrain=StringUtils.substringBetween(pointString,"<terrain>","</terrain>");
  final String container=StringUtils.substringBetween(pointString,"<container>","</container");
  try {
    if (StringUtils.isNotBlank(difficulty)) {
      cache.setDifficulty(Float.parseFloat(difficulty.trim()));
    }
    if (StringUtils.isNotBlank(terrain)) {
      cache.setTerrain(Float.parseFloat(terrain.trim()));
    }
    if (StringUtils.isNotBlank(container)) {
      final int size=Integer.parseInt(container.trim());
      if (size >= 1 && size <= 8) {
        cache.setSize(SIZES[size - 1]);
      }
    }
  }
 catch (  NumberFormatException e) {
    Log.e("LocParser.parseCache",e);
  }
  return cache;
}
