{
  final Geocache cache=new Geocache();
  final MatcherWrapper matcherGeocode=new MatcherWrapper(patternGeocode,pointString);
  if (matcherGeocode.find()) {
    cache.setGeocode(matcherGeocode.group(1).trim());
  }
  final MatcherWrapper matcherName=new MatcherWrapper(patternName,pointString);
  if (matcherName.find()) {
    final String name=matcherName.group(1).trim();
    cache.setName(StringUtils.substringBeforeLast(name," by ").trim());
  }
 else {
    cache.setName(cache.getGeocode());
  }
  final MatcherWrapper matcherLat=new MatcherWrapper(patternLat,pointString);
  final MatcherWrapper matcherLon=new MatcherWrapper(patternLon,pointString);
  if (matcherLat.find() && matcherLon.find()) {
    cache.setCoords(parsePoint(matcherLat.group(1).trim(),matcherLon.group(1).trim()));
  }
  final MatcherWrapper matcherDifficulty=new MatcherWrapper(patternDifficulty,pointString);
  try {
    if (matcherDifficulty.find()) {
      cache.setDifficulty(Float.parseFloat(matcherDifficulty.group(1).trim()));
    }
    final MatcherWrapper matcherTerrain=new MatcherWrapper(patternTerrain,pointString);
    if (matcherTerrain.find()) {
      cache.setTerrain(Float.parseFloat(matcherTerrain.group(1).trim()));
    }
    final MatcherWrapper matcherContainer=new MatcherWrapper(patternContainer,pointString);
    if (matcherContainer.find()) {
      final int size=Integer.parseInt(matcherContainer.group(1).trim());
      if (size >= 1 && size <= 8) {
        cache.setSize(SIZES[size - 1]);
      }
    }
  }
 catch (  NumberFormatException e) {
    Log.e("LocParser.parseCache",e);
  }
  return cache;
}
