{
  final String host="twitter.com";
  final String pathRequest="/oauth/request_token";
  final String pathAuthorize="/oauth/authorize";
  final String method="GET";
  int status=0;
  try {
    String lineOne=null;
    HttpsURLConnection connection=null;
    try {
      final StringBuilder sb=new StringBuilder();
      final String params=cgOAuth.signOAuth(host,pathRequest,method,true,new HashMap<String,String>(),null,null);
      int code=-1;
      int retries=0;
      do {
        Log.d(cgSettings.tag,"https://" + host + pathRequest+ "?"+ params);
        final URL u=new URL("https://" + host + pathRequest+ "?"+ params);
        final URLConnection uc=u.openConnection();
        connection=(HttpsURLConnection)uc;
        connection.setReadTimeout(30000);
        connection.setRequestMethod(method);
        HttpsURLConnection.setFollowRedirects(true);
        connection.setDoInput(true);
        connection.setDoOutput(false);
        final InputStream in=connection.getInputStream();
        final InputStreamReader ins=new InputStreamReader(in);
        final BufferedReader br=new BufferedReader(ins,16 * 1024);
        while ((lineOne=br.readLine()) != null) {
          sb.append(lineOne);
          sb.append('\n');
        }
        code=connection.getResponseCode();
        retries++;
        Log.i(cgSettings.tag,host + ": " + connection.getResponseCode()+ " "+ connection.getResponseMessage());
        br.close();
        in.close();
        ins.close();
      }
 while (code == -1 && retries < 5);
      final String line=sb.toString();
      if (StringUtils.isNotBlank(line)) {
        final Matcher paramsMatcher1=paramsPattern1.matcher(line);
        if (paramsMatcher1.find() && paramsMatcher1.groupCount() > 0) {
          OAtoken=paramsMatcher1.group(1);
        }
        final Matcher paramsMatcher2=paramsPattern2.matcher(line);
        if (paramsMatcher2.find() && paramsMatcher2.groupCount() > 0) {
          OAtokenSecret=paramsMatcher2.group(1);
        }
        if (StringUtils.isNotBlank(OAtoken) && StringUtils.isNotBlank(OAtokenSecret)) {
          final SharedPreferences.Editor prefsEdit=getSharedPreferences(cgSettings.preferences,0).edit();
          prefsEdit.putString("temp-token-public",OAtoken);
          prefsEdit.putString("temp-token-secret",OAtokenSecret);
          prefsEdit.commit();
          try {
            final Map<String,String> paramsPre=new HashMap<String,String>();
            paramsPre.put("oauth_callback","oob");
            final String paramsBrowser=cgOAuth.signOAuth(host,pathAuthorize,"GET",true,paramsPre,OAtoken,OAtokenSecret);
            startActivity(new Intent(Intent.ACTION_VIEW,Uri.parse("https://" + host + pathAuthorize+ "?"+ paramsBrowser)));
            status=1;
          }
 catch (          Exception e) {
            Log.e(cgSettings.tag,"cgeoauth.requestToken(2): " + e.toString());
          }
        }
      }
    }
 catch (    IOException eio) {
      Log.e(cgSettings.tag,"cgeoauth.requestToken(IO): " + eio.toString() + " ~ "+ connection.getResponseCode()+ ": "+ connection.getResponseMessage());
    }
catch (    Exception e) {
      Log.e(cgSettings.tag,"cgeoauth.requestToken(1): " + e.toString());
    }
 finally {
      if (connection != null) {
        connection.disconnect();
      }
    }
  }
 catch (  Exception e2) {
    Log.e(cgSettings.tag,"cgeoauth.requestToken(3): " + e2.toString());
  }
  requestTokenHandler.sendEmptyMessage(status);
}
