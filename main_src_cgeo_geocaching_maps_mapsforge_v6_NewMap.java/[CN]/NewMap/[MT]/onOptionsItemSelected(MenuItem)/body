{
  final int id=item.getItemId();
switch (id) {
case android.R.id.home:
    ActivityMixin.navigateUp(this);
  return true;
case R.id.menu_trail_mode:
Settings.setMapTrail(!Settings.isMapTrail());
historyLayer.requestRedraw();
ActivityMixin.invalidateOptionsMenu(this);
return true;
case R.id.menu_direction_line:
Settings.setMapDirection(!Settings.isMapDirection());
navigationLayer.requestRedraw();
ActivityMixin.invalidateOptionsMenu(this);
return true;
case R.id.menu_map_live:
isLiveEnabled=!isLiveEnabled;
if (mapMode == MapMode.LIVE) {
Settings.setLiveMap(isLiveEnabled);
}
caches.handleLiveLayers(isLiveEnabled);
ActivityMixin.invalidateOptionsMenu(this);
if (mapMode != MapMode.SINGLE) {
mapTitle=StringUtils.EMPTY;
}
 else {
targetGeocode=geocodeIntent;
}
return true;
case R.id.menu_store_caches:
if (!caches.isDownloading()) {
final Set<String> geocodes=caches.getVisibleGeocodes();
if (geocodes.isEmpty()) {
ActivityMixin.showToast(this,res.getString(R.string.warn_save_nothing));
return true;
}
if (Settings.getChooseList()) {
new StoredList.UserInterface(this).promptForListSelection(R.string.list_title,new Action1<Integer>(){
@Override public void call(final Integer selectedListId){
storeCaches(geocodes,selectedListId);
}
}
,true,StoredList.TEMPORARY_LIST.id);
}
 else {
storeCaches(geocodes,StoredList.STANDARD_LIST_ID);
}
}
return true;
case R.id.menu_circle_mode:
return true;
case R.id.menu_mycaches_mode:
Settings.setExcludeMine(!Settings.isExcludeMyCaches());
caches.invalidate();
ActivityMixin.invalidateOptionsMenu(this);
if (!Settings.isExcludeMyCaches()) {
Tile.cache.clear();
}
return true;
case R.id.menu_disabled_mode:
Settings.setExcludeDisabled(!Settings.isExcludeDisabledCaches());
caches.invalidate();
ActivityMixin.invalidateOptionsMenu(this);
if (!Settings.isExcludeDisabledCaches()) {
Tile.cache.clear();
}
return true;
case R.id.menu_theme_mode:
selectMapTheme();
return true;
case R.id.menu_as_list:
{
CacheListActivity.startActivityMap(this,new SearchResult(caches.getVisibleGeocodes()));
return true;
}
case R.id.menu_strategy_fastest:
{
item.setChecked(true);
Settings.setLiveMapStrategy(LivemapStrategy.FASTEST);
return true;
}
case R.id.menu_strategy_fast:
{
item.setChecked(true);
Settings.setLiveMapStrategy(LivemapStrategy.FAST);
return true;
}
case R.id.menu_strategy_auto:
{
item.setChecked(true);
Settings.setLiveMapStrategy(LivemapStrategy.AUTO);
return true;
}
case R.id.menu_strategy_detailed:
{
item.setChecked(true);
Settings.setLiveMapStrategy(LivemapStrategy.DETAILED);
return true;
}
case R.id.menu_hint:
menuShowHint();
return true;
case R.id.menu_compass:
menuCompass();
return true;
default :
final MapSource mapSource=MapProviderFactory.getMapSource(id);
if (mapSource != null) {
item.setChecked(true);
setMapSource(mapSource);
return true;
}
}
return false;
}
