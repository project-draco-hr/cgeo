{
  if (val.get(Calendar.YEAR) > 280000000) {
    throw new ArithmeticException("Calendar value too large for accurate calculations");
  }
  if (field == Calendar.MILLISECOND) {
    return;
  }
  Date date=val.getTime();
  long time=date.getTime();
  boolean done=false;
  int millisecs=val.get(Calendar.MILLISECOND);
  if (MODIFY_TRUNCATE == modType || millisecs < 500) {
    time=time - millisecs;
  }
  if (field == Calendar.SECOND) {
    done=true;
  }
  int seconds=val.get(Calendar.SECOND);
  if (!done && (MODIFY_TRUNCATE == modType || seconds < 30)) {
    time=time - (seconds * 1000L);
  }
  if (field == Calendar.MINUTE) {
    done=true;
  }
  int minutes=val.get(Calendar.MINUTE);
  if (!done && (MODIFY_TRUNCATE == modType || minutes < 30)) {
    time=time - (minutes * 60000L);
  }
  if (date.getTime() != time) {
    date.setTime(time);
    val.setTime(date);
  }
  boolean roundUp=false;
  for (  int[] aField : fields) {
    for (    int element : aField) {
      if (element == field) {
        if (modType == MODIFY_CEILING || (modType == MODIFY_ROUND && roundUp)) {
          if (field == DateUtils.SEMI_MONTH) {
            if (val.get(Calendar.DATE) == 1) {
              val.add(Calendar.DATE,15);
            }
 else {
              val.add(Calendar.DATE,-15);
              val.add(Calendar.MONTH,1);
            }
          }
 else           if (field == Calendar.AM_PM) {
            if (val.get(Calendar.HOUR_OF_DAY) == 0) {
              val.add(Calendar.HOUR_OF_DAY,12);
            }
 else {
              val.add(Calendar.HOUR_OF_DAY,-12);
              val.add(Calendar.DATE,1);
            }
          }
 else {
            val.add(aField[0],1);
          }
        }
        return;
      }
    }
    int offset=0;
    boolean offsetSet=false;
switch (field) {
case DateUtils.SEMI_MONTH:
      if (aField[0] == Calendar.DATE) {
        offset=val.get(Calendar.DATE) - 1;
        if (offset >= 15) {
          offset-=15;
        }
        roundUp=offset > 7;
        offsetSet=true;
      }
    break;
case Calendar.AM_PM:
  if (aField[0] == Calendar.HOUR_OF_DAY) {
    offset=val.get(Calendar.HOUR_OF_DAY);
    if (offset >= 12) {
      offset-=12;
    }
    roundUp=offset >= 6;
    offsetSet=true;
  }
break;
}
if (!offsetSet) {
int min=val.getActualMinimum(aField[0]);
int max=val.getActualMaximum(aField[0]);
offset=val.get(aField[0]) - min;
roundUp=offset > ((max - min) / 2);
}
if (offset != 0) {
val.set(aField[0],val.get(aField[0]) - offset);
}
}
throw new IllegalArgumentException("The field " + field + " is not supported");
}
