{
  try {
    final String[] parts=StringUtils.split(StringUtils.trim(text));
    if (parts.length == 2) {
      final double lat=Double.parseDouble(StringUtils.strip(parts[0]," \t\u00a0"));
      final double lon=Double.parseDouble(StringUtils.strip(parts[1]," \t\u00a0"));
      return new Geopoint(lat,lon);
    }
  }
 catch (  final NumberFormatException ignored) {
  }
  try {
    final UTMPoint utmPoint=new UTMPoint(text);
    return utmPoint.toLatLong();
  }
 catch (  final Exception ignored) {
  }
  final ResultWrapper latitudeWrapper=parseHelper(text,LatLon.LAT);
  final ResultWrapper longitudeWrapper=parseHelper(text.substring(latitudeWrapper.matcherPos + latitudeWrapper.matcherLength),LatLon.LON);
  if (longitudeWrapper.matcherPos - (latitudeWrapper.matcherPos + latitudeWrapper.matcherLength) >= 10) {
    throw new Geopoint.ParseException("Distance between latitude and longitude text is to large.",LatLon.LON);
  }
  final double lat=latitudeWrapper.result;
  if (!Geopoint.isValidLatitude(lat)) {
    throw new Geopoint.ParseException(text,LatLon.LAT);
  }
  final double lon=longitudeWrapper.result;
  if (!Geopoint.isValidLongitude(lon)) {
    throw new Geopoint.ParseException(text,LatLon.LON);
  }
  return new Geopoint(lat,lon);
}
