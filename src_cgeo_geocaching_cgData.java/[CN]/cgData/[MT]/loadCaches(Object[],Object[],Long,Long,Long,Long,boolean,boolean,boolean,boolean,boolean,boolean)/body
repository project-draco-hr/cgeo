{
  init();
  StringBuilder where=new StringBuilder();
  Cursor cursor=null;
  List<cgCache> caches=new ArrayList<cgCache>();
  try {
    if (geocodes != null && geocodes.length > 0) {
      StringBuilder all=new StringBuilder();
      for (      Object one : geocodes) {
        if (all.length() > 0) {
          all.append(", ");
        }
        all.append('"');
        all.append((String)one);
        all.append('"');
      }
      if (where.length() > 0) {
        where.append(" and ");
      }
      where.append("geocode in (");
      where.append(all);
      where.append(')');
    }
 else     if (guids != null && guids.length > 0) {
      StringBuilder all=new StringBuilder();
      for (      Object one : guids) {
        if (all.length() > 0) {
          all.append(", ");
        }
        all.append('"');
        all.append((String)one);
        all.append('"');
      }
      if (where.length() > 0) {
        where.append(" and ");
      }
      where.append("guid in (");
      where.append(all);
      where.append(')');
    }
 else {
      return caches;
    }
    if (centerLat != null && centerLon != null && spanLat != null && spanLon != null) {
      double latMin=(centerLat / 1e6) - ((spanLat / 1e6) / 2) - ((spanLat / 1e6) / 4);
      double latMax=(centerLat / 1e6) + ((spanLat / 1e6) / 2) + ((spanLat / 1e6) / 4);
      double lonMin=(centerLon / 1e6) - ((spanLon / 1e6) / 2) - ((spanLon / 1e6) / 4);
      double lonMax=(centerLon / 1e6) + ((spanLon / 1e6) / 2) + ((spanLon / 1e6) / 4);
      double llCache;
      if (latMin > latMax) {
        llCache=latMax;
        latMax=latMin;
        latMin=llCache;
      }
      if (lonMin > lonMax) {
        llCache=lonMax;
        lonMax=lonMin;
        lonMin=llCache;
      }
      if (where.length() > 0) {
        where.append(" and ");
      }
      where.append("(latitude >= ");
      where.append(String.format((Locale)null,"%.6f",latMin));
      where.append(" and latitude <= ");
      where.append(String.format((Locale)null,"%.6f",latMax));
      where.append(" and longitude >= ");
      where.append(String.format((Locale)null,"%.6f",lonMin));
      where.append(" and longitude <= ");
      where.append(String.format((Locale)null,"%.6f",lonMax));
      where.append(')');
    }
    cursor=databaseRO.query(dbTableCaches,new String[]{"_id","updated","reason","detailed","detailedupdate","visiteddate","geocode","cacheid","guid","type","name","own","owner","owner_real","hidden","hint","size","difficulty","distance","direction","terrain","latlon","latitude_string","longitude_string","location","latitude","longitude","elevation","shortdesc","description","favourite_cnt","rating","votes","myvote","disabled","archived","members","found","favourite","inventorycoins","inventorytags","inventoryunknown","onWatchlist","personal_note"},where.toString(),null,null,null,null,null);
    if (cursor != null) {
      int index=0;
      if (cursor.getCount() > 0) {
        cursor.moveToFirst();
        do {
          cgCache cache=new cgCache();
          cache.updated=(long)cursor.getLong(cursor.getColumnIndex("updated"));
          cache.reason=(int)cursor.getInt(cursor.getColumnIndex("reason"));
          cache.detailed=cursor.getInt(cursor.getColumnIndex("detailed")) == 1;
          cache.detailedUpdate=(Long)cursor.getLong(cursor.getColumnIndex("detailedupdate"));
          cache.visitedDate=(Long)cursor.getLong(cursor.getColumnIndex("visiteddate"));
          cache.geocode=(String)cursor.getString(cursor.getColumnIndex("geocode"));
          cache.cacheid=(String)cursor.getString(cursor.getColumnIndex("cacheid"));
          cache.guid=(String)cursor.getString(cursor.getColumnIndex("guid"));
          cache.type=(String)cursor.getString(cursor.getColumnIndex("type"));
          cache.name=(String)cursor.getString(cursor.getColumnIndex("name"));
          cache.own=cursor.getInt(cursor.getColumnIndex("own")) == 1;
          cache.owner=(String)cursor.getString(cursor.getColumnIndex("owner"));
          cache.ownerReal=(String)cursor.getString(cursor.getColumnIndex("owner_real"));
          cache.hidden=new Date((long)cursor.getLong(cursor.getColumnIndex("hidden")));
          cache.hint=(String)cursor.getString(cursor.getColumnIndex("hint"));
          cache.size=(String)cursor.getString(cursor.getColumnIndex("size"));
          cache.difficulty=(Float)cursor.getFloat(cursor.getColumnIndex("difficulty"));
          index=cursor.getColumnIndex("direction");
          if (cursor.isNull(index)) {
            cache.direction=null;
          }
 else {
            cache.direction=(Double)cursor.getDouble(index);
          }
          index=cursor.getColumnIndex("distance");
          if (cursor.isNull(index)) {
            cache.distance=null;
          }
 else {
            cache.distance=(Double)cursor.getDouble(index);
          }
          cache.terrain=(Float)cursor.getFloat(cursor.getColumnIndex("terrain"));
          cache.latlon=(String)cursor.getString(cursor.getColumnIndex("latlon"));
          cache.latitudeString=(String)cursor.getString(cursor.getColumnIndex("latitude_string"));
          cache.longitudeString=(String)cursor.getString(cursor.getColumnIndex("longitude_string"));
          cache.location=(String)cursor.getString(cursor.getColumnIndex("location"));
          final int indexLat=cursor.getColumnIndex("latitude");
          final int indexLon=cursor.getColumnIndex("longitude");
          if (cursor.isNull(indexLat) || cursor.isNull(indexLon)) {
            cache.coords=null;
          }
 else {
            cache.coords=new Geopoint(cursor.getDouble(indexLat),cursor.getDouble(indexLon));
            ;
          }
          index=cursor.getColumnIndex("elevation");
          if (cursor.isNull(index)) {
            cache.elevation=null;
          }
 else {
            cache.elevation=(Double)cursor.getDouble(index);
          }
          cache.personalNote=(String)cursor.getString(cursor.getColumnIndex("personal_note"));
          cache.shortdesc=(String)cursor.getString(cursor.getColumnIndex("shortdesc"));
          cache.description=(String)cursor.getString(cursor.getColumnIndex("description"));
          cache.favouriteCnt=(Integer)cursor.getInt(cursor.getColumnIndex("favourite_cnt"));
          cache.rating=(Float)cursor.getFloat(cursor.getColumnIndex("rating"));
          cache.votes=(Integer)cursor.getInt(cursor.getColumnIndex("votes"));
          cache.myVote=(Float)cursor.getFloat(cursor.getColumnIndex("myvote"));
          cache.disabled=cursor.getLong(cursor.getColumnIndex("disabled")) == 1L;
          cache.archived=cursor.getLong(cursor.getColumnIndex("archived")) == 1L;
          cache.members=cursor.getLong(cursor.getColumnIndex("members")) == 1L;
          cache.found=cursor.getLong(cursor.getColumnIndex("found")) == 1L;
          cache.favourite=cursor.getLong(cursor.getColumnIndex("favourite")) == 1L;
          cache.inventoryItems=(Integer)cursor.getInt(cursor.getColumnIndex("inventoryunknown"));
          cache.onWatchlist=cursor.getLong(cursor.getColumnIndex("onWatchlist")) == 1L;
          if (loadA) {
            List<String> attributes=loadAttributes(cache.geocode);
            if (attributes != null && attributes.isEmpty() == false) {
              if (cache.attributes == null)               cache.attributes=new ArrayList<String>();
 else               cache.attributes.clear();
              cache.attributes.addAll(attributes);
            }
          }
          if (loadW) {
            List<cgWaypoint> waypoints=loadWaypoints(cache.geocode);
            if (waypoints != null && waypoints.isEmpty() == false) {
              if (cache.waypoints == null)               cache.waypoints=new ArrayList<cgWaypoint>();
 else               cache.waypoints.clear();
              cache.waypoints.addAll(waypoints);
            }
          }
          if (loadS) {
            List<cgImage> spoilers=loadSpoilers(cache.geocode);
            if (spoilers != null && spoilers.isEmpty() == false) {
              if (cache.spoilers == null)               cache.spoilers=new ArrayList<cgImage>();
 else               cache.spoilers.clear();
              cache.spoilers.addAll(spoilers);
            }
          }
          if (loadL) {
            List<cgLog> logs=loadLogs(cache.geocode);
            if (logs != null && logs.isEmpty() == false) {
              if (cache.logs == null)               cache.logs=new ArrayList<cgLog>();
 else               cache.logs.clear();
              cache.logs.addAll(logs);
            }
            Map<Integer,Integer> logCounts=loadLogCounts(cache.geocode);
            if (logCounts != null && logCounts.isEmpty() == false) {
              cache.logCounts.clear();
              cache.logCounts.putAll(logCounts);
            }
          }
          if (loadI) {
            List<cgTrackable> inventory=loadInventory(cache.geocode);
            if (inventory != null && inventory.isEmpty() == false) {
              if (cache.inventory == null)               cache.inventory=new ArrayList<cgTrackable>();
 else               cache.inventory.clear();
              cache.inventory.addAll(inventory);
            }
          }
          if (loadO) {
            cache.logOffline=hasLogOffline(cache.geocode);
          }
          caches.add(cache);
        }
 while (cursor.moveToNext());
      }
 else {
        if (cursor != null) {
          cursor.close();
        }
        return null;
      }
    }
  }
 catch (  Exception e) {
    Log.e(cgSettings.tag,"cgData.loadCaches: " + e.toString());
  }
  if (cursor != null) {
    cursor.close();
  }
  return caches;
}
