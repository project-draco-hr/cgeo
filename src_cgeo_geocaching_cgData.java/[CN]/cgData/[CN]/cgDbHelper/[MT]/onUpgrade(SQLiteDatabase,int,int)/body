{
  Log.i(cgSettings.tag,"Upgrade database from ver. " + oldVersion + " to ver. "+ newVersion+ ": start");
  try {
    if (db.isReadOnly() == true) {
      return;
    }
    db.beginTransaction();
    if (oldVersion <= 0) {
      dropDatabase(db);
      onCreate(db);
      Log.i(cgSettings.tag,"Database structure created.");
    }
    if (oldVersion > 0) {
      db.execSQL("delete from " + dbTableCaches + " where reason = 0");
      if (oldVersion < 34) {
        try {
          db.execSQL("create index if not exists in_a on " + dbTableCaches + " (geocode)");
          db.execSQL("create index if not exists in_b on " + dbTableCaches + " (guid)");
          db.execSQL("create index if not exists in_c on " + dbTableCaches + " (reason)");
          db.execSQL("create index if not exists in_d on " + dbTableCaches + " (detailed)");
          db.execSQL("create index if not exists in_e on " + dbTableCaches + " (type)");
          db.execSQL("create index if not exists in_a on " + dbTableAttributes + " (geocode)");
          db.execSQL("create index if not exists in_a on " + dbTableWaypoints + " (geocode)");
          db.execSQL("create index if not exists in_b on " + dbTableWaypoints + " (geocode, type)");
          db.execSQL("create index if not exists in_a on " + dbTableSpoilers + " (geocode)");
          db.execSQL("create index if not exists in_a on " + dbTableLogs + " (geocode)");
          db.execSQL("create index if not exists in_a on " + dbTableTrackables + " (geocode)");
          Log.i(cgSettings.tag,"Indexes added.");
        }
 catch (        Exception e) {
          Log.e(cgSettings.tag,"Failed to upgrade to ver. 34: " + e.toString());
        }
      }
      if (oldVersion < 37) {
        try {
          db.execSQL("alter table " + dbTableCaches + " add column direction text");
          db.execSQL("alter table " + dbTableCaches + " add column distance double");
          Log.i(cgSettings.tag,"Columns direction and distance added to " + dbTableCaches + ".");
        }
 catch (        Exception e) {
          Log.e(cgSettings.tag,"Failed to upgrade to ver. 37: " + e.toString());
        }
      }
      if (oldVersion < 38) {
        try {
          db.execSQL("drop table " + dbTableLogs);
          db.execSQL(dbCreateLogs);
          Log.i(cgSettings.tag,"Changed type column in " + dbTableLogs + " to integer.");
        }
 catch (        Exception e) {
          Log.e(cgSettings.tag,"Failed to upgrade to ver. 38: " + e.toString());
        }
      }
      if (oldVersion < 39) {
        try {
          db.execSQL(dbCreateLists);
          Log.i(cgSettings.tag,"Created lists table.");
        }
 catch (        Exception e) {
          Log.e(cgSettings.tag,"Failed to upgrade to ver. 39: " + e.toString());
        }
      }
      if (oldVersion < 40) {
        try {
          db.execSQL("drop table " + dbTableTrackables);
          db.execSQL(dbCreateTrackables);
          Log.i(cgSettings.tag,"Changed type of geocode column in trackables table.");
        }
 catch (        Exception e) {
          Log.e(cgSettings.tag,"Failed to upgrade to ver. 40: " + e.toString());
        }
      }
      if (oldVersion < 41) {
        try {
          db.execSQL("alter table " + dbTableCaches + " add column rating float");
          db.execSQL("alter table " + dbTableCaches + " add column votes integer");
          db.execSQL("alter table " + dbTableCaches + " add column vote integer");
          Log.i(cgSettings.tag,"Added columns for GCvote.");
        }
 catch (        Exception e) {
          Log.e(cgSettings.tag,"Failed to upgrade to ver. 41: " + e.toString());
        }
      }
      if (oldVersion < 42) {
        try {
          db.execSQL(dbCreateLogsOffline);
          Log.i(cgSettings.tag,"Added table for offline logs");
        }
 catch (        Exception e) {
          Log.e(cgSettings.tag,"Failed to upgrade to ver. 42: " + e.toString());
        }
      }
      if (oldVersion < 43) {
        try {
          final String dbCreateCachesTemp="" + "create temporary table " + dbTableCaches + "_temp ("+ "_id integer primary key autoincrement, "+ "updated long not null, "+ "detailed integer not null default 0, "+ "detailedupdate long, "+ "geocode text unique not null, "+ "reason integer not null default 0, "+ "cacheid text, "+ "guid text, "+ "type text, "+ "name text, "+ "owner text, "+ "hidden long, "+ "hint text, "+ "size text, "+ "difficulty float, "+ "terrain float, "+ "latlon text, "+ "latitude_string text, "+ "longitude_string text, "+ "location text, "+ "distance double, "+ "latitude double, "+ "longitude double, "+ "shortdesc text, "+ "description text, "+ "rating float, "+ "votes integer, "+ "vote integer, "+ "disabled integer not null default 0, "+ "archived integer not null default 0, "+ "members integer not null default 0, "+ "found integer not null default 0, "+ "favourite integer not null default 0, "+ "inventorycoins integer default 0, "+ "inventorytags integer default 0, "+ "inventoryunknown integer default 0 "+ "); ";
          final String dbCreateCachesNew="" + "create table " + dbTableCaches + " ("+ "_id integer primary key autoincrement, "+ "updated long not null, "+ "detailed integer not null default 0, "+ "detailedupdate long, "+ "geocode text unique not null, "+ "reason integer not null default 0, "+ "cacheid text, "+ "guid text, "+ "type text, "+ "name text, "+ "owner text, "+ "hidden long, "+ "hint text, "+ "size text, "+ "difficulty float, "+ "terrain float, "+ "latlon text, "+ "latitude_string text, "+ "longitude_string text, "+ "location text, "+ "direction double, "+ "distance double, "+ "latitude double, "+ "longitude double, "+ "shortdesc text, "+ "description text, "+ "rating float, "+ "votes integer, "+ "vote integer, "+ "disabled integer not null default 0, "+ "archived integer not null default 0, "+ "members integer not null default 0, "+ "found integer not null default 0, "+ "favourite integer not null default 0, "+ "inventorycoins integer default 0, "+ "inventorytags integer default 0, "+ "inventoryunknown integer default 0 "+ "); ";
          db.beginTransaction();
          db.execSQL(dbCreateCachesTemp);
          db.execSQL("insert into " + dbTableCaches + "_temp select _id, updated, detailed, detailedupdate, geocode, reason, cacheid, guid, type, name, owner, hidden, hint, size, difficulty, terrain, latlon, latitude_string, longitude_string, location, distance, latitude, longitude, shortdesc, description, rating, votes, vote, disabled, archived, members, found, favourite, inventorycoins, inventorytags, inventoryunknown from "+ dbTableCaches);
          db.execSQL("drop table " + dbTableCaches);
          db.execSQL(dbCreateCachesNew);
          db.execSQL("insert into " + dbTableCaches + " select _id, updated, detailed, detailedupdate, geocode, reason, cacheid, guid, type, name, owner, hidden, hint, size, difficulty, terrain, latlon, latitude_string, longitude_string, location, null, distance, latitude, longitude, shortdesc, description, rating, votes, vote, disabled, archived, members, found, favourite, inventorycoins, inventorytags, inventoryunknown from "+ dbTableCaches+ "_temp");
          db.execSQL("drop table " + dbTableCaches + "_temp");
          db.setTransactionSuccessful();
          Log.i(cgSettings.tag,"Changed direction column");
        }
 catch (        Exception e) {
          Log.e(cgSettings.tag,"Failed to upgrade to ver. 43: " + e.toString());
        }
 finally {
          db.endTransaction();
        }
      }
      if (oldVersion < 44) {
        try {
          db.execSQL("alter table " + dbTableCaches + " add column favourite_cnt integer");
          Log.i(cgSettings.tag,"Column favourite_cnt added to " + dbTableCaches + ".");
        }
 catch (        Exception e) {
          Log.e(cgSettings.tag,"Failed to upgrade to ver. 44: " + e.toString());
        }
      }
      if (oldVersion < 45) {
        try {
          db.execSQL("alter table " + dbTableCaches + " add column owner_real text");
          Log.i(cgSettings.tag,"Column owner_real added to " + dbTableCaches + ".");
        }
 catch (        Exception e) {
          Log.e(cgSettings.tag,"Failed to upgrade to ver. 45: " + e.toString());
        }
      }
      if (oldVersion < 46) {
        try {
          db.execSQL("alter table " + dbTableCaches + " add column visiteddate long");
          db.execSQL("create index if not exists in_f on " + dbTableCaches + " (visiteddate, detailedupdate)");
          Log.i(cgSettings.tag,"Added column for date of visit.");
        }
 catch (        Exception e) {
          Log.e(cgSettings.tag,"Failed to upgrade to ver. 46: " + e.toString());
        }
      }
      if (oldVersion < 47) {
        try {
          db.execSQL("alter table " + dbTableCaches + " add column own integer not null default 0");
          Log.i(cgSettings.tag,"Added column own.");
        }
 catch (        Exception e) {
          Log.e(cgSettings.tag,"Failed to upgrade to ver. 47: " + e.toString());
        }
      }
      if (oldVersion < 48) {
        try {
          db.execSQL("alter table " + dbTableCaches + " add column elevation double");
          Log.i(cgSettings.tag,"Column elevation added to " + dbTableCaches + ".");
        }
 catch (        Exception e) {
          Log.e(cgSettings.tag,"Failed to upgrade to ver. 48: " + e.toString());
        }
      }
      if (oldVersion < 49) {
        try {
          db.execSQL(dbCreateLogCount);
          Log.i(cgSettings.tag,"Created table " + dbTableLogCount + ".");
        }
 catch (        Exception e) {
          Log.e(cgSettings.tag,"Failed to upgrade to ver. 49: " + e.toString());
        }
      }
      if (oldVersion < 50) {
        try {
          db.execSQL("alter table " + dbTableCaches + " add column myvote float");
          Log.i(cgSettings.tag,"Added float column for votes to " + dbTableCaches + ".");
        }
 catch (        Exception e) {
          Log.e(cgSettings.tag,"Failed to upgrade to ver. 50: " + e.toString());
        }
      }
      if (oldVersion < 51) {
        try {
          db.execSQL("alter table " + dbTableCaches + " add column reliable_latlon integer");
          Log.i(cgSettings.tag,"Column reliable_latlon added to " + dbTableCaches + ".");
        }
 catch (        Exception e) {
          Log.e(cgSettings.tag,"Failed to upgrade to ver. 51: " + e.toString());
        }
      }
      if (oldVersion < 52) {
        try {
          db.execSQL(dbCreateSearchDestinationHistory);
          Log.i(cgSettings.tag,"Added table " + dbTableSearchDestionationHistory + ".");
        }
 catch (        Exception e) {
          Log.e(cgSettings.tag,"Failed to upgrade to ver. 52",e);
        }
      }
      if (oldVersion < 53) {
        try {
          db.execSQL("alter table " + dbTableCaches + " add column onWatchlist integer");
          Log.i(cgSettings.tag,"Column onWatchlist added to " + dbTableCaches + ".");
        }
 catch (        Exception e) {
          Log.e(cgSettings.tag,"Failed to upgrade to ver. 53",e);
        }
      }
      if (oldVersion < 54) {
        try {
          db.execSQL(dbCreateLogImages);
        }
 catch (        Exception e) {
          Log.e(cgSettings.tag,"Failed to upgrade to ver. 54: " + e.toString());
        }
      }
      if (oldVersion < 55) {
        try {
          db.execSQL("alter table " + dbTableCaches + " add column personal_note text");
        }
 catch (        Exception e) {
          Log.e(cgSettings.tag,"Failed to upgrade to ver. 55: " + e.toString());
        }
      }
    }
    db.setTransactionSuccessful();
  }
  finally {
    db.endTransaction();
  }
  Log.i(cgSettings.tag,"Upgrade database from ver. " + oldVersion + " to ver. "+ newVersion+ ": completed");
}
