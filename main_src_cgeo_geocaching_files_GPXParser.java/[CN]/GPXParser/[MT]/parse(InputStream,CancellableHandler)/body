{
  terraChildWaypoint=false;
  resetCache();
  final RootElement root=new RootElement(namespace,"gpx");
  final Element waypoint=root.getChild(namespace,"wpt");
  root.getChild(namespace,"url").setEndTextElementListener(new EndTextElementListener(){
    @Override public void end(    final String body){
      scriptUrl=body;
    }
  }
);
  root.getChild(namespace,"creator").setEndTextElementListener(new EndTextElementListener(){
    @Override public void end(    final String body){
      scriptUrl=body;
    }
  }
);
  waypoint.setStartElementListener(new StartElementListener(){
    @Override public void start(    final Attributes attrs){
      try {
        if (attrs.getIndex("lat") > -1 && attrs.getIndex("lon") > -1) {
          final String latitude=attrs.getValue("lat");
          final String longitude=attrs.getValue("lon");
          if (StringUtils.isNotBlank(latitude) && StringUtils.isNotBlank(longitude)) {
            cache.setCoords(new Geopoint(Double.parseDouble(latitude),Double.parseDouble(longitude)));
          }
        }
      }
 catch (      final NumberFormatException e) {
        Log.w("Failed to parse waypoint's latitude and/or longitude",e);
      }
    }
  }
);
  waypoint.setEndElementListener(new EndElementListener(){
    @Override public void end(){
      if (StringUtils.isBlank(cache.getGeocode())) {
        findGeoCode(name);
        findGeoCode(desc);
        findGeoCode(cmt);
      }
      if (StringUtils.isBlank(cache.getGeocode()) && StringUtils.isNotBlank(name)) {
        cache.setGeocode(name.trim());
      }
      if (isValidForImport()) {
        fixCache(cache);
        cache.getLists().add(listId);
        cache.setDetailed(true);
        createNoteFromGSAKUserdata();
        final String geocode=cache.getGeocode();
        if (result.contains(geocode)) {
          Log.w("Duplicate geocode during GPX import: " + geocode);
        }
        afterParsing(cache);
        result.add(geocode);
        DataStore.saveCache(cache,EnumSet.of(SaveFlag.DB));
        DataStore.saveLogs(cache.getGeocode(),logs);
        DataStore.removeCache(geocode,EnumSet.of(RemoveFlag.CACHE));
        showProgressMessage(progressHandler,progressStream.getProgress());
      }
 else       if (StringUtils.isNotBlank(cache.getName()) && (StringUtils.containsIgnoreCase(type,"waypoint") || terraChildWaypoint)) {
        addWaypointToCache();
      }
      resetCache();
    }
    private void addWaypointToCache(){
      fixCache(cache);
      if (cache.getName().length() > 2 || StringUtils.isNotBlank(parentCacheCode)) {
        if (StringUtils.isBlank(parentCacheCode)) {
          if (StringUtils.containsIgnoreCase(scriptUrl,"extremcaching")) {
            parentCacheCode=cache.getName().substring(2);
          }
 else           if (terraChildWaypoint) {
            parentCacheCode=StringUtils.left(cache.getGeocode(),cache.getGeocode().length() - 1);
          }
 else {
            parentCacheCode="GC" + cache.getName().substring(2).toUpperCase(Locale.US);
          }
        }
        if ("GC_WayPoint1".equals(cache.getShortDescription())) {
          cache.setShortDescription("");
        }
        final Geocache cacheForWaypoint=findParentCache();
        if (cacheForWaypoint != null) {
          final Waypoint waypoint=new Waypoint(cache.getShortDescription(),WaypointType.fromGPXString(sym),false);
          if (wptUserDefined) {
            waypoint.setUserDefined();
          }
          waypoint.setId(-1);
          waypoint.setGeocode(parentCacheCode);
          waypoint.setPrefix(cacheForWaypoint.getWaypointPrefix(cache.getName()));
          waypoint.setLookup("---");
          waypoint.setCoords(cache.getCoords());
          waypoint.setNote(cache.getDescription());
          waypoint.setVisited(wptVisited);
          final List<Waypoint> mergedWayPoints=new ArrayList<>(cacheForWaypoint.getWaypoints());
          final List<Waypoint> newPoints=new ArrayList<>();
          newPoints.add(waypoint);
          Waypoint.mergeWayPoints(newPoints,mergedWayPoints,true);
          cacheForWaypoint.setWaypoints(newPoints,false);
          DataStore.saveCache(cacheForWaypoint,EnumSet.of(SaveFlag.DB));
          showProgressMessage(progressHandler,progressStream.getProgress());
        }
      }
    }
  }
);
  waypoint.getChild(namespace,"time").setEndTextElementListener(new EndTextElementListener(){
    @Override public void end(    final String body){
      try {
        cache.setHidden(parseDate(body));
      }
 catch (      final Exception e) {
        Log.w("Failed to parse cache date",e);
      }
    }
  }
);
  waypoint.getChild(namespace,"name").setEndTextElementListener(new EndTextElementListener(){
    @Override public void end(    final String body){
      name=body;
      String content=body.trim();
      if (StringUtils.startsWithIgnoreCase(content,"GCEC") && StringUtils.containsIgnoreCase(scriptUrl,"extremcaching")) {
        content=content.substring(2);
      }
      cache.setName(content);
      findGeoCode(cache.getName());
    }
  }
);
  waypoint.getChild(namespace,"desc").setEndTextElementListener(new EndTextElementListener(){
    @Override public void end(    final String body){
      desc=body;
      cache.setShortDescription(validate(body));
    }
  }
);
  waypoint.getChild(namespace,"cmt").setEndTextElementListener(new EndTextElementListener(){
    @Override public void end(    final String body){
      cmt=body;
      cache.setDescription(validate(body));
    }
  }
);
  waypoint.getChild(namespace,"type").setEndTextElementListener(new EndTextElementListener(){
    @Override public void end(    final String body){
      final String[] content=StringUtils.split(body,'|');
      if (content.length > 0) {
        type=content[0].toLowerCase(Locale.US).trim();
      }
    }
  }
);
  waypoint.getChild(namespace,"sym").setEndTextElementListener(new EndTextElementListener(){
    @Override public void end(    final String body){
      sym=body.toLowerCase(Locale.US);
      if (sym.contains("geocache") && sym.contains("found")) {
        cache.setFound(true);
      }
    }
  }
);
  waypoint.getChild(namespace,"url").setEndTextElementListener(new EndTextElementListener(){
    @Override public void end(    final String url){
      final MatcherWrapper matcher=new MatcherWrapper(PATTERN_GUID,url);
      if (matcher.matches()) {
        final String guid=matcher.group(1);
        if (StringUtils.isNotBlank(guid)) {
          cache.setGuid(guid);
        }
      }
      final MatcherWrapper matcherCode=new MatcherWrapper(PATTERN_URL_GEOCODE,url);
      if (matcherCode.matches()) {
        final String geocode=matcherCode.group(1);
        cache.setGeocode(geocode);
      }
    }
  }
);
  waypoint.getChild(namespace,"urlname").setEndTextElementListener(new EndTextElementListener(){
    @Override public void end(    final String urlName){
      if (cache.getName().equals(cache.getGeocode()) && StringUtils.startsWith(cache.getGeocode(),"WM")) {
        cache.setName(StringUtils.trim(urlName));
      }
    }
  }
);
  final Element cacheParent=getCacheParent(waypoint);
  registerGsakExtensions(cacheParent);
  registerTerraCachingExtensions(cacheParent);
  registerCgeoExtensions(cacheParent);
  for (  final String nsGC : GROUNDSPEAK_NAMESPACE) {
    final Element gcCache=cacheParent.getChild(nsGC,"cache");
    gcCache.setStartElementListener(new StartElementListener(){
      @Override public void start(      final Attributes attrs){
        try {
          if (attrs.getIndex("id") > -1) {
            cache.setCacheId(attrs.getValue("id"));
          }
          if (attrs.getIndex("archived") > -1) {
            cache.setArchived(attrs.getValue("archived").equalsIgnoreCase("true"));
          }
          if (attrs.getIndex("available") > -1) {
            cache.setDisabled(!attrs.getValue("available").equalsIgnoreCase("true"));
          }
        }
 catch (        final RuntimeException e) {
          Log.w("Failed to parse cache attributes",e);
        }
      }
    }
);
    gcCache.getChild(nsGC,"name").setEndTextElementListener(new EndTextElementListener(){
      @Override public void end(      final String cacheName){
        cache.setName(validate(cacheName));
      }
    }
);
    gcCache.getChild(nsGC,"owner").setEndTextElementListener(new EndTextElementListener(){
      @Override public void end(      final String ownerUserId){
        cache.setOwnerUserId(validate(ownerUserId));
      }
    }
);
    gcCache.getChild(nsGC,"placed_by").setEndTextElementListener(new EndTextElementListener(){
      @Override public void end(      final String ownerDisplayName){
        cache.setOwnerDisplayName(validate(ownerDisplayName));
      }
    }
);
    gcCache.getChild(nsGC,"type").setEndTextElementListener(new EndTextElementListener(){
      @Override public void end(      final String bodyIn){
        String body=validate(bodyIn);
        if (body.startsWith("Geocache|")) {
          body=StringUtils.substringAfter(body,"Geocache|").trim();
        }
        cache.setType(CacheType.getByPattern(body));
      }
    }
);
    gcCache.getChild(nsGC,"container").setEndTextElementListener(new EndTextElementListener(){
      @Override public void end(      final String body){
        cache.setSize(CacheSize.getById(validate(body)));
      }
    }
);
    final Element gcAttributes=gcCache.getChild(nsGC,"attributes");
    final Element gcAttribute=gcAttributes.getChild(nsGC,"attribute");
    gcAttribute.setStartElementListener(new StartElementListener(){
      @Override public void start(      final Attributes attrs){
        try {
          if (attrs.getIndex("id") > -1 && attrs.getIndex("inc") > -1) {
            final int attributeId=Integer.parseInt(attrs.getValue("id"));
            final boolean attributeActive=Integer.parseInt(attrs.getValue("inc")) != 0;
            final CacheAttribute attribute=CacheAttribute.getById(attributeId);
            if (attribute != null) {
              cache.getAttributes().add(attribute.getValue(attributeActive));
            }
          }
        }
 catch (        final NumberFormatException ignored) {
        }
      }
    }
);
    gcCache.getChild(nsGC,"difficulty").setEndTextElementListener(new EndTextElementListener(){
      @Override public void end(      final String body){
        try {
          cache.setDifficulty(Float.parseFloat(body));
        }
 catch (        final NumberFormatException e) {
          Log.w("Failed to parse difficulty",e);
        }
      }
    }
);
    gcCache.getChild(nsGC,"terrain").setEndTextElementListener(new EndTextElementListener(){
      @Override public void end(      final String body){
        try {
          cache.setTerrain(Float.parseFloat(body));
        }
 catch (        final NumberFormatException e) {
          Log.w("Failed to parse terrain",e);
        }
      }
    }
);
    gcCache.getChild(nsGC,"country").setEndTextElementListener(new EndTextElementListener(){
      @Override public void end(      final String country){
        if (StringUtils.isBlank(cache.getLocation())) {
          cache.setLocation(validate(country));
        }
 else {
          cache.setLocation(cache.getLocation() + ", " + country.trim());
        }
      }
    }
);
    gcCache.getChild(nsGC,"state").setEndTextElementListener(new EndTextElementListener(){
      @Override public void end(      final String state){
        final String trimmedState=state.trim();
        if (StringUtils.isNotEmpty(trimmedState)) {
          if (StringUtils.isBlank(cache.getLocation())) {
            cache.setLocation(validate(state));
          }
 else {
            cache.setLocation(trimmedState + ", " + cache.getLocation());
          }
        }
      }
    }
);
    gcCache.getChild(nsGC,"encoded_hints").setEndTextElementListener(new EndTextElementListener(){
      @Override public void end(      final String encoded){
        cache.setHint(validate(encoded));
      }
    }
);
    gcCache.getChild(nsGC,"short_description").setEndTextElementListener(new EndTextElementListener(){
      @Override public void end(      final String shortDesc){
        cache.setShortDescription(validate(shortDesc));
      }
    }
);
    gcCache.getChild(nsGC,"long_description").setEndTextElementListener(new EndTextElementListener(){
      @Override public void end(      final String desc){
        cache.setDescription(validate(desc));
      }
    }
);
    final Element gcTBs=gcCache.getChild(nsGC,"travelbugs");
    final Element gcTB=gcTBs.getChild(nsGC,"travelbug");
    gcTB.setStartElementListener(new StartElementListener(){
      @Override public void start(      final Attributes attrs){
        trackable=new Trackable();
        try {
          if (attrs.getIndex("ref") > -1) {
            trackable.setGeocode(attrs.getValue("ref"));
          }
        }
 catch (        final RuntimeException ignored) {
        }
      }
    }
);
    gcTB.setEndElementListener(new EndElementListener(){
      @Override public void end(){
        if (StringUtils.isNotBlank(trackable.getGeocode()) && StringUtils.isNotBlank(trackable.getName())) {
          cache.addInventoryItem(trackable);
        }
      }
    }
);
    gcTB.getChild(nsGC,"name").setEndTextElementListener(new EndTextElementListener(){
      @Override public void end(      final String tbName){
        trackable.setName(validate(tbName));
      }
    }
);
    final Element gcLogs=gcCache.getChild(nsGC,"logs");
    final Element gcLog=gcLogs.getChild(nsGC,"log");
    gcLog.setStartElementListener(new StartElementListener(){
      @Override public void start(      final Attributes attrs){
        logBuilder=new LogEntry.Builder();
        try {
          if (attrs.getIndex("id") > -1) {
            logBuilder.setId(Integer.parseInt(attrs.getValue("id")));
          }
        }
 catch (        final NumberFormatException ignored) {
        }
      }
    }
);
    gcLog.setEndElementListener(new EndElementListener(){
      @Override public void end(){
        final LogEntry log=logBuilder.build();
        if (log.getType() != LogType.UNKNOWN) {
          if (log.getType().isFoundLog() && StringUtils.isNotBlank(log.author)) {
            final IConnector connector=ConnectorFactory.getConnector(cache);
            if (connector instanceof ILogin && StringUtils.equals(log.author,((ILogin)connector).getUserName())) {
              cache.setFound(true);
              cache.setVisitedDate(log.date);
            }
          }
          logs.add(log);
        }
      }
    }
);
    gcLog.getChild(nsGC,"date").setEndTextElementListener(new EndTextElementListener(){
      @Override public void end(      final String body){
        try {
          logBuilder.setDate(parseDate(body).getTime());
        }
 catch (        final Exception e) {
          Log.w("Failed to parse log date",e);
        }
      }
    }
);
    gcLog.getChild(nsGC,"type").setEndTextElementListener(new EndTextElementListener(){
      @Override public void end(      final String body){
        final String logType=validate(body);
        logBuilder.setLogType(LogType.getByType(logType));
      }
    }
);
    gcLog.getChild(nsGC,"finder").setEndTextElementListener(new EndTextElementListener(){
      @Override public void end(      final String finderName){
        logBuilder.setAuthor(validate(finderName));
      }
    }
);
    gcLog.getChild(nsGC,"text").setEndTextElementListener(new EndTextElementListener(){
      @Override public void end(      final String logText){
        logBuilder.setLog(validate(logText));
      }
    }
);
  }
  try {
    progressStream=new ProgressInputStream(stream);
    final BufferedReader reader=new BufferedReader(new InputStreamReader(progressStream,CharEncoding.UTF_8));
    Xml.parse(new InvalidXMLCharacterFilterReader(reader),root.getContentHandler());
    return DataStore.loadCaches(result,EnumSet.of(LoadFlag.DB_MINIMAL));
  }
 catch (  final SAXException e) {
    throw new ParserException("Cannot parse .gpx file as GPX " + version + ": could not parse XML",e);
  }
}
