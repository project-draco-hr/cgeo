{
  final String terraNamespace="http://www.TerraCaching.com/GPX/1/0";
  final Element terraCache=cacheParent.getChild(terraNamespace,"terracache");
  terraCache.getChild(terraNamespace,"name").setEndTextElementListener(new EndTextElementListener(){
    @Override public void end(    final String name){
      cache.setName(StringUtils.trim(name));
    }
  }
);
  terraCache.getChild(terraNamespace,"owner").setEndTextElementListener(new EndTextElementListener(){
    @Override public void end(    final String ownerName){
      cache.setOwnerDisplayName(validate(ownerName));
    }
  }
);
  terraCache.getChild(terraNamespace,"style").setEndTextElementListener(new EndTextElementListener(){
    @Override public void end(    final String style){
      cache.setType(TerraCachingType.getCacheType(style));
    }
  }
);
  terraCache.getChild(terraNamespace,"size").setEndTextElementListener(new EndTextElementListener(){
    @Override public void end(    final String size){
      cache.setSize(CacheSize.getById(size));
    }
  }
);
  terraCache.getChild(terraNamespace,"country").setEndTextElementListener(new EndTextElementListener(){
    @Override public void end(    final String country){
      if (StringUtils.isNotBlank(country)) {
        cache.setLocation(StringUtils.trim(country));
      }
    }
  }
);
  terraCache.getChild(terraNamespace,"state").setEndTextElementListener(new EndTextElementListener(){
    @Override public void end(    final String state){
      final String trimmedState=state.trim();
      if (StringUtils.isNotEmpty(trimmedState)) {
        if (StringUtils.isBlank(cache.getLocation())) {
          cache.setLocation(validate(state));
        }
 else {
          cache.setLocation(trimmedState + ", " + cache.getLocation());
        }
      }
    }
  }
);
  terraCache.getChild(terraNamespace,"description").setEndTextElementListener(new EndTextElementListener(){
    @Override public void end(    final String description){
      cache.setDescription(trimHtml(description));
    }
  }
);
  terraCache.getChild(terraNamespace,"hint").setEndTextElementListener(new EndTextElementListener(){
    @Override public void end(    final String hint){
      cache.setHint(HtmlUtils.extractText(hint));
    }
  }
);
  final Element terraLogs=terraCache.getChild(terraNamespace,"logs");
  final Element terraLog=terraLogs.getChild(terraNamespace,"log");
  terraLog.setStartElementListener(new StartElementListener(){
    @Override public void start(    final Attributes attrs){
      logBuilder=new LogEntry.Builder();
      try {
        if (attrs.getIndex("id") > -1) {
          logBuilder.setId(Integer.parseInt(attrs.getValue("id")));
        }
      }
 catch (      final NumberFormatException ignored) {
      }
    }
  }
);
  terraLog.setEndElementListener(new EndElementListener(){
    @Override public void end(){
      final LogEntry log=logBuilder.build();
      if (log.getType() != LogType.UNKNOWN) {
        if (log.getType().isFoundLog() && StringUtils.isNotBlank(log.author)) {
          final IConnector connector=ConnectorFactory.getConnector(cache);
          if (connector instanceof ILogin && StringUtils.equals(log.author,((ILogin)connector).getUserName())) {
            cache.setFound(true);
            cache.setVisitedDate(log.date);
          }
        }
        logs.add(log);
      }
    }
  }
);
  terraLog.getChild(terraNamespace,"date").setEndTextElementListener(new EndTextElementListener(){
    @Override public void end(    final String body){
      try {
        logBuilder.setDate(parseDate(body).getTime());
      }
 catch (      final Exception e) {
        Log.w("Failed to parse log date",e);
      }
    }
  }
);
  terraLog.getChild(terraNamespace,"type").setEndTextElementListener(new EndTextElementListener(){
    @Override public void end(    final String body){
      final String logType=validate(body);
      logBuilder.setLogType(TerraCachingLogType.getLogType(logType));
    }
  }
);
  terraLog.getChild(terraNamespace,"user").setEndTextElementListener(new EndTextElementListener(){
    @Override public void end(    final String finderName){
      logBuilder.setAuthor(validate(finderName));
    }
  }
);
  terraLog.getChild(terraNamespace,"entry").setEndTextElementListener(new EndTextElementListener(){
    @Override public void end(    final String entry){
      logBuilder.setLog(trimHtml(validate(entry)));
    }
  }
);
}
