{
  final int id=item.getItemId();
  ContextMenu.ContextMenuInfo info=item.getMenuInfo();
  if (info == null) {
    info=lastMenuInfo;
    lastMenuInfo=null;
  }
  AdapterContextMenuInfo adapterInfo=null;
  try {
    adapterInfo=(AdapterContextMenuInfo)info;
  }
 catch (  Exception e) {
    Log.w(cgSettings.tag,"cgeocaches.onContextItemSelected: " + e.toString());
  }
  final int touchedPos;
  final cgCache cache;
  if (adapterInfo != null) {
    touchedPos=adapterInfo.position;
    cache=adapter.getItem(touchedPos);
  }
 else {
    touchedPos=-1;
    cache=null;
  }
  if (id == MENU_COMPASS) {
    Intent navigateIntent=new Intent(this,cgeonavigate.class);
    navigateIntent.putExtra("latitude",cache.latitude);
    navigateIntent.putExtra("longitude",cache.longitude);
    navigateIntent.putExtra("geocode",cache.geocode.toUpperCase());
    navigateIntent.putExtra("name",cache.name);
    startActivity(navigateIntent);
    return true;
  }
 else   if (id == MENU_LOG_VISIT) {
    if (cache.cacheid == null || cache.cacheid.length() == 0) {
      showToast(res.getString(R.string.err_cannot_log_visit));
      return true;
    }
    Intent logVisitIntent=new Intent(this,cgeovisit.class);
    logVisitIntent.putExtra("id",cache.cacheid);
    logVisitIntent.putExtra("geocode",cache.geocode.toUpperCase());
    logVisitIntent.putExtra("type",cache.type.toLowerCase());
    startActivity(logVisitIntent);
    return true;
  }
 else   if (id == MENU_CACHE_DETAILS) {
    Intent cachesIntent=new Intent(this,cgeodetail.class);
    cachesIntent.putExtra("geocode",cache.geocode.toUpperCase());
    cachesIntent.putExtra("name",cache.name);
    startActivity(cachesIntent);
    return true;
  }
 else   if (id == MENU_FILTER_SIZE_MICRO) {
    return setFilter(new cgFilterBySize(res.getString(R.string.caches_filter_size_micro)));
  }
 else   if (id == MENU_FILTER_SIZE_SMALL) {
    return setFilter(new cgFilterBySize(res.getString(R.string.caches_filter_size_small)));
  }
 else   if (id == MENU_FILTER_SIZE_REGULAR) {
    return setFilter(new cgFilterBySize(res.getString(R.string.caches_filter_size_regular)));
  }
 else   if (id == MENU_FILTER_SIZE_LARGE) {
    return setFilter(new cgFilterBySize(res.getString(R.string.caches_filter_size_large)));
  }
 else   if (id == MENU_FILTER_SIZE_OTHER) {
    return setFilter(new cgFilterBySize(res.getString(R.string.caches_filter_size_other)));
  }
 else   if (id == MENU_FILTER_SIZE_VIRTUAL) {
    return setFilter(new cgFilterBySize(res.getString(R.string.caches_filter_size_virtual)));
  }
 else   if (id == MENU_FILTER_SIZE_NOT_CHOSEN) {
    return setFilter(new cgFilterBySize(res.getString(R.string.caches_filter_size_notchosen)));
  }
 else   if (id == MENU_FILTER_TYPE_TRADITIONAL) {
    return setFilter(new cgFilterByType("traditional"));
  }
 else   if (id == MENU_FILTER_TYPE_MULTI) {
    return setFilter(new cgFilterByType("multi"));
  }
 else   if (id == MENU_FILTER_TYPE_MYSTERY) {
    return setFilter(new cgFilterByType("mystery"));
  }
 else   if (id == MENU_FILTER_TYPE_LETTERBOX) {
    return setFilter(new cgFilterByType("letterbox"));
  }
 else   if (id == MENU_FILTER_TYPE_EVENT) {
    return setFilter(new cgFilterByType("event"));
  }
 else   if (id == MENU_FILTER_TYPE_MEGA) {
    return setFilter(new cgFilterByType("mega"));
  }
 else   if (id == MENU_FILTER_TYPE_EARTH) {
    return setFilter(new cgFilterByType("earth"));
  }
 else   if (id == MENU_FILTER_TYPE_CITO) {
    return setFilter(new cgFilterByType("cito"));
  }
 else   if (id == MENU_FILTER_TYPE_WEBCAM) {
    return setFilter(new cgFilterByType("webcam"));
  }
 else   if (id == MENU_FILTER_TYPE_VIRTUAL) {
    return setFilter(new cgFilterByType("virtual"));
  }
 else   if (id == MENU_FILTER_TYPE_WHERIGO) {
    return setFilter(new cgFilterByType("wherigo"));
  }
 else   if (id == MENU_FILTER_TYPE_LOSTFOUND) {
    return setFilter(new cgFilterByType("lostfound"));
  }
 else   if (id == MENU_FILTER_TYPE_APE) {
    return setFilter(new cgFilterByType("ape"));
  }
 else   if (id == MENU_FILTER_TYPE_GCHQ) {
    return setFilter(new cgFilterByType("gchq"));
  }
 else   if (id == MENU_FILTER_TYPE_GPS) {
    return setFilter(new cgFilterByType("gps"));
  }
 else   if (id == MENU_DROP_CACHE) {
    cgBase.dropCache(app,this,cache,new Handler(){
      @Override public void handleMessage(      Message msg){
        switchList(listId,-1);
      }
    }
);
    return true;
  }
 else   if (id >= SUBMENU_MOVE_TO_LIST && id < SUBMENU_MOVE_TO_LIST + 100) {
    int newListId=id - SUBMENU_MOVE_TO_LIST;
    app.moveToList(cache.geocode,newListId);
    switchListById(listId);
    return true;
  }
  lastMenuInfo=info;
  HashMap<String,String> params=new HashMap<String,String>();
  params.put("geocode",cache.geocode);
  Long singleSearchId=base.searchByGeocode(params,0,false);
  return NavigationAppFactory.onMenuItemSelected(item,geo,this,res,cache,singleSearchId,null,null);
}
