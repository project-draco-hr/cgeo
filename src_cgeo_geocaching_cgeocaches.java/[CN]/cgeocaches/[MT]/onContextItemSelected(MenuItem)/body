{
  final int id=item.getItemId();
  ContextMenu.ContextMenuInfo info=item.getMenuInfo();
  if (info == null) {
    info=lastMenuInfo;
    lastMenuInfo=null;
  }
  AdapterContextMenuInfo adapterInfo=null;
  try {
    adapterInfo=(AdapterContextMenuInfo)info;
  }
 catch (  Exception e) {
    Log.w(cgSettings.tag,"cgeocaches.onContextItemSelected: " + e.toString());
  }
  final int touchedPos;
  final cgCache cache;
  if (adapterInfo != null) {
    touchedPos=adapterInfo.position;
    cache=adapter.getItem(touchedPos);
  }
 else {
    touchedPos=-1;
    cache=null;
  }
  if (id == 1) {
    Intent navigateIntent=new Intent(activity,cgeonavigate.class);
    navigateIntent.putExtra("latitude",cache.latitude);
    navigateIntent.putExtra("longitude",cache.longitude);
    navigateIntent.putExtra("geocode",cache.geocode.toUpperCase());
    navigateIntent.putExtra("name",cache.name);
    activity.startActivity(navigateIntent);
    return true;
  }
 else   if (id == 6) {
    if (cache.cacheid == null || cache.cacheid.length() == 0) {
      warning.showToast(res.getString(R.string.err_cannot_log_visit));
      return true;
    }
    Intent logVisitIntent=new Intent(activity,cgeovisit.class);
    logVisitIntent.putExtra("id",cache.cacheid);
    logVisitIntent.putExtra("geocode",cache.geocode.toUpperCase());
    logVisitIntent.putExtra("type",cache.type.toLowerCase());
    activity.startActivity(logVisitIntent);
    return true;
  }
 else   if (id == 7) {
    Intent cachesIntent=new Intent(activity,cgeodetail.class);
    cachesIntent.putExtra("geocode",cache.geocode.toUpperCase());
    cachesIntent.putExtra("name",cache.name);
    activity.startActivity(cachesIntent);
    return true;
  }
 else   if (id == 8) {
    return setFilter(new cgFilterBySize(res.getString(R.string.caches_filter_size_micro)));
  }
 else   if (id == 9) {
    return setFilter(new cgFilterBySize(res.getString(R.string.caches_filter_size_small)));
  }
 else   if (id == 10) {
    return setFilter(new cgFilterBySize(res.getString(R.string.caches_filter_size_regular)));
  }
 else   if (id == 11) {
    return setFilter(new cgFilterBySize(res.getString(R.string.caches_filter_size_large)));
  }
 else   if (id == 12) {
    return setFilter(new cgFilterBySize(res.getString(R.string.caches_filter_size_other)));
  }
 else   if (id == 13) {
    return setFilter(new cgFilterBySize(res.getString(R.string.caches_filter_size_virtual)));
  }
 else   if (id == 14) {
    return setFilter(new cgFilterBySize(res.getString(R.string.caches_filter_size_notchosen)));
  }
 else   if (id == 15) {
    return setFilter(new cgFilterByType("traditional"));
  }
 else   if (id == 16) {
    return setFilter(new cgFilterByType("multi"));
  }
 else   if (id == 17) {
    return setFilter(new cgFilterByType("mystery"));
  }
 else   if (id == 18) {
    return setFilter(new cgFilterByType("letterbox"));
  }
 else   if (id == 19) {
    return setFilter(new cgFilterByType("event"));
  }
 else   if (id == 20) {
    return setFilter(new cgFilterByType("mega"));
  }
 else   if (id == 21) {
    return setFilter(new cgFilterByType("earth"));
  }
 else   if (id == 22) {
    return setFilter(new cgFilterByType("cito"));
  }
 else   if (id == 23) {
    return setFilter(new cgFilterByType("webcam"));
  }
 else   if (id == 24) {
    return setFilter(new cgFilterByType("virtual"));
  }
 else   if (id == 25) {
    return setFilter(new cgFilterByType("wherigo"));
  }
 else   if (id == 26) {
    return setFilter(new cgFilterByType("lostfound"));
  }
 else   if (id == 27) {
    return setFilter(new cgFilterByType("ape"));
  }
 else   if (id == 28) {
    return setFilter(new cgFilterByType("gchq"));
  }
 else   if (id == 29) {
    return setFilter(new cgFilterByType("gps"));
  }
 else   if (id == MENU_DROP_CACHE) {
    base.dropCache(app,activity,cache,new Handler(){
      @Override public void handleMessage(      Message msg){
        switchList(listId,-1);
      }
    }
);
    return true;
  }
 else   if (id >= SUBMENU_MOVE_TO_LIST && id < SUBMENU_MOVE_TO_LIST + 100) {
    int newListId=id - SUBMENU_MOVE_TO_LIST;
    app.moveToList(cache.geocode,newListId);
    switchListById(listId);
    return true;
  }
  lastMenuInfo=info;
  return NavigationAppFactory.onMenuItemSelected(item,geo,activity,res,warning,tracker,cache,null,null,null);
}
