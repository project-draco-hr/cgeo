{
switch (item.getItemId()) {
case MENU_SWITCH_SELECT_MODE:
    if (adapter != null) {
      adapter.switchSelectMode();
    }
  return true;
case MENU_REFRESH_STORED:
refreshStored();
return true;
case MENU_MAP:
showOnMap();
return false;
case MENU_LOCUS:
showOnLocus();
return false;
case MENU_DROP_CACHES:
dropStored();
return false;
case MENU_IMPORT_GPX:
importGpx();
return false;
case MENU_CREATE_LIST:
createList();
return false;
case MENU_DROP_LIST:
removeList();
return false;
case MENU_INVERT_SELECTION:
if (adapter != null) {
adapter.invertSelection();
}
return false;
case MENU_SORT_DISTANCE:
setComparator(item,null);
return false;
case MENU_SORT_DIFFICULTY:
setComparator(item,new DifficultyComparator());
return false;
case MENU_SORT_TERRAIN:
setComparator(item,new TerrainComparator());
return false;
case MENU_SORT_SIZE:
setComparator(item,new SizeComparator());
return false;
case MENU_SORT_FAVORITES:
setComparator(item,new PopularityComparator());
return false;
case MENU_SORT_NAME:
setComparator(item,new NameComparator());
return false;
case MENU_SORT_GEOCODE:
setComparator(item,new GeocodeComparator());
return false;
case MENU_SWITCH_LIST:
selectList(null);
return false;
case MENU_SORT_RATING:
setComparator(item,new RatingComparator());
return false;
case MENU_SORT_VOTE:
setComparator(item,new VoteComparator());
return false;
case MENU_SORT_INVENTORY:
setComparator(item,new InventoryComparator());
return false;
case 21:
selectedFilter=res.getString(R.string.caches_filter_type);
openContextMenu(getListView());
return false;
case 22:
selectedFilter=res.getString(R.string.caches_filter_size);
openContextMenu(getListView());
return false;
case 23:
adapter.setFilter(new cgFilterByTrackables());
return false;
case 24:
if (adapter != null) {
adapter.setFilter(null);
}
return false;
case MENU_IMPORT_WEB:
importWeb();
return false;
case MENU_EXPORT_NOTES:
exportFieldNotes();
return false;
case MENU_REMOVE_FROM_HISTORY:
removeFromHistoryCheck();
return false;
}
return false;
}
