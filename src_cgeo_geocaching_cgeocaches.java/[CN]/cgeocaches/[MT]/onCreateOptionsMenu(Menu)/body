{
  SubMenu subMenuFilter=menu.addSubMenu(0,105,0,res.getString(R.string.caches_filter)).setIcon(android.R.drawable.ic_menu_search);
  subMenuFilter.setHeaderTitle(res.getString(R.string.caches_filter_title));
  subMenuFilter.add(0,21,0,res.getString(R.string.caches_filter_type));
  subMenuFilter.add(0,22,0,res.getString(R.string.caches_filter_size));
  subMenuFilter.add(0,23,0,res.getString(R.string.caches_filter_track));
  subMenuFilter.add(0,24,0,res.getString(R.string.caches_filter_clear));
  SubMenu subMenuSort=menu.addSubMenu(0,104,0,res.getString(R.string.caches_sort)).setIcon(android.R.drawable.ic_menu_sort_alphabetically);
  subMenuSort.setHeaderTitle(res.getString(R.string.caches_sort_title));
  HashMap<String,Integer> comparators=new HashMap<String,Integer>();
  comparators.put(res.getString(R.string.caches_sort_distance),10);
  comparators.put(res.getString(R.string.caches_sort_difficulty),11);
  comparators.put(res.getString(R.string.caches_sort_terrain),12);
  comparators.put(res.getString(R.string.caches_sort_size),13);
  comparators.put(res.getString(R.string.caches_sort_favorites),14);
  comparators.put(res.getString(R.string.caches_sort_name),15);
  comparators.put(res.getString(R.string.caches_sort_gccode),16);
  comparators.put(res.getString(R.string.caches_sort_rating),18);
  comparators.put(res.getString(R.string.caches_sort_vote),19);
  comparators.put(res.getString(R.string.caches_sort_inventory),20);
  ArrayList<String> sortedLabels=new ArrayList<String>(comparators.keySet());
  Collections.sort(sortedLabels);
  for (  String label : sortedLabels) {
    Integer id=comparators.get(label);
    subMenuSort.add(1,id,0,label).setCheckable(true).setChecked(id == 10);
  }
  subMenuSort.setGroupCheckable(1,true,true);
  menu.add(0,0,0,res.getString(R.string.caches_select_mode)).setIcon(android.R.drawable.ic_menu_agenda);
  menu.add(0,9,0,res.getString(R.string.caches_select_invert)).setIcon(android.R.drawable.ic_menu_agenda);
  if (type.equals("offline") == true) {
    SubMenu subMenu=menu.addSubMenu(0,103,0,res.getString(R.string.caches_manage)).setIcon(android.R.drawable.ic_menu_save);
    subMenu.add(0,5,0,res.getString(R.string.caches_drop_all));
    subMenu.add(0,1,0,res.getString(R.string.cache_offline_refresh));
    if (settings.webDeviceCode == null) {
      menu.add(0,6,0,res.getString(R.string.gpx_import_title)).setIcon(android.R.drawable.ic_menu_upload);
    }
 else {
      SubMenu subMenuImport=menu.addSubMenu(0,105,0,res.getString(R.string.import_title)).setIcon(android.R.drawable.ic_menu_upload);
      subMenuImport.add(1,6,0,res.getString(R.string.gpx_import_title)).setCheckable(false).setChecked(false);
      subMenuImport.add(1,25,0,res.getString(R.string.web_import_title)).setCheckable(false).setChecked(false);
    }
  }
 else {
    menu.add(0,1,0,res.getString(R.string.caches_store_offline)).setIcon(android.R.drawable.ic_menu_set_as);
  }
  final Intent intentTest=new Intent(Intent.ACTION_VIEW);
  intentTest.setData(Uri.parse("menion.points:x"));
  if (cgBase.isIntentAvailable(activity,intentTest) == true) {
    SubMenu subMenu=menu.addSubMenu(0,101,0,res.getString(R.string.caches_on_map)).setIcon(android.R.drawable.ic_menu_mapmode);
    subMenu.add(0,2,0,res.getString(R.string.caches_map_cgeo));
    subMenu.add(0,3,0,res.getString(R.string.caches_map_locus));
  }
 else {
    menu.add(0,2,0,res.getString(R.string.caches_on_map)).setIcon(android.R.drawable.ic_menu_mapmode);
  }
  if (type.equals("offline") == true) {
    SubMenu subMenu=menu.addSubMenu(0,102,0,res.getString(R.string.list_menu)).setIcon(android.R.drawable.ic_menu_more);
    subMenu.add(0,7,0,res.getString(R.string.list_menu_create));
    subMenu.add(0,8,0,res.getString(R.string.list_menu_drop));
    subMenu.add(0,17,0,res.getString(R.string.list_menu_change));
  }
  return true;
}
