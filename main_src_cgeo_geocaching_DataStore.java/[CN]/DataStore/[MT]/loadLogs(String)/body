{
  List<LogEntry> logs=new ArrayList<LogEntry>();
  if (StringUtils.isBlank(geocode)) {
    return logs;
  }
  init();
  final Cursor cursor=database.rawQuery("SELECT cg_logs._id as cg_logs_id, type, author, log, date, found, friend, " + dbTableLogImages + "._id as cg_logImages_id, log_id, title, url"+ " FROM "+ dbTableLogs+ " LEFT OUTER JOIN "+ dbTableLogImages+ " ON ( cg_logs._id = log_id ) WHERE geocode = ?  ORDER BY date desc, cg_logs._id asc",new String[]{geocode});
  LogEntry log=null;
  while (cursor.moveToNext() && logs.size() < 100) {
    if (log == null || log.id != cursor.getInt(0)) {
      log=new LogEntry(cursor.getString(2),cursor.getLong(4),LogType.getById(cursor.getInt(1)),cursor.getString(3));
      log.id=cursor.getInt(0);
      log.found=cursor.getInt(5);
      log.friend=cursor.getInt(6) == 1;
      logs.add(log);
    }
    if (!cursor.isNull(7)) {
      log.addLogImage(new Image(cursor.getString(10),cursor.getString(9)));
    }
  }
  cursor.close();
  return Collections.unmodifiableList(logs);
}
