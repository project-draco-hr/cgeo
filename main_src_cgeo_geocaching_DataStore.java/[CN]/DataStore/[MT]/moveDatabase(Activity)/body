{
  final ProgressDialog dialog=ProgressDialog.show(fromActivity,fromActivity.getString(R.string.init_dbmove_dbmove),fromActivity.getString(R.string.init_dbmove_running),true,false);
  AppObservable.bindActivity(fromActivity,Observable.defer(new Func0<Observable<Boolean>>(){
    @Override public Observable<Boolean> call(){
      if (!LocalStorage.isExternalStorageAvailable()) {
        Log.w("Database was not moved: external memory not available");
        return Observable.just(false);
      }
      closeDb();
      final File source=databasePath();
      final File target=databaseAlternatePath();
      if (!LocalStorage.copy(source,target)) {
        Log.e("Database could not be moved to " + target);
        init();
        return Observable.just(false);
      }
      if (!FileUtils.delete(source)) {
        Log.e("Original database could not be deleted during move");
      }
      Settings.setDbOnSDCard(!Settings.isDbOnSDCard());
      Log.i("Database was moved to " + target);
      init();
      return Observable.just(true);
    }
  }
)).subscribeOn(Schedulers.io()).subscribe(new Action1<Boolean>(){
    @Override public void call(    final Boolean success){
      dialog.dismiss();
      final String message=success ? fromActivity.getString(R.string.init_dbmove_success) : fromActivity.getString(R.string.init_dbmove_failed);
      Dialogs.message(fromActivity,R.string.init_dbmove_dbmove,message);
    }
  }
);
}
