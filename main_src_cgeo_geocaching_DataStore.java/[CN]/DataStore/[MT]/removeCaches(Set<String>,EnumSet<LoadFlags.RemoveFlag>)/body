{
  if (CollectionUtils.isEmpty(geocodes)) {
    return;
  }
  init();
  if (removeFlags.contains(RemoveFlag.CACHE)) {
    for (    final String geocode : geocodes) {
      cacheCache.removeCacheFromCache(geocode);
    }
  }
  if (removeFlags.contains(RemoveFlag.DB)) {
    final ArrayList<String> quotedGeocodes=new ArrayList<>(geocodes.size());
    for (    final String geocode : geocodes) {
      quotedGeocodes.add(DatabaseUtils.sqlEscapeString(geocode));
    }
    final String geocodeList=StringUtils.join(quotedGeocodes.toArray(),',');
    final String baseWhereClause="geocode in (" + geocodeList + ")";
    database.beginTransaction();
    try {
      database.delete(dbTableCaches,baseWhereClause,null);
      database.delete(dbTableAttributes,baseWhereClause,null);
      database.delete(dbTableSpoilers,baseWhereClause,null);
      database.delete(dbTableLogImages,"log_id IN (SELECT _id FROM " + dbTableLogs + " WHERE "+ baseWhereClause+ ")",null);
      database.delete(dbTableLogs,baseWhereClause,null);
      database.delete(dbTableLogCount,baseWhereClause,null);
      database.delete(dbTableLogsOffline,baseWhereClause,null);
      String wayPointClause=baseWhereClause;
      if (!removeFlags.contains(RemoveFlag.OWN_WAYPOINTS_ONLY_FOR_TESTING)) {
        wayPointClause+=" and type <> 'own'";
      }
      database.delete(dbTableWaypoints,wayPointClause,null);
      database.delete(dbTableTrackables,baseWhereClause,null);
      database.setTransactionSuccessful();
    }
  finally {
      database.endTransaction();
    }
    for (    final String geocode : geocodes) {
      FileUtils.deleteDirectory(LocalStorage.getStorageDir(geocode));
    }
  }
}
