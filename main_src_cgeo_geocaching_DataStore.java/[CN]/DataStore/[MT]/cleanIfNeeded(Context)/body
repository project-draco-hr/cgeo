{
  if (databaseCleaned) {
    return;
  }
  databaseCleaned=true;
  Schedulers.io().createWorker().schedule(new Action0(){
    @Override public void call(){
      Log.d("Database clean: started");
      try {
        final int version=Version.getVersionCode(context);
        final Set<String> geocodes=new HashSet<>();
        if (version != Settings.getVersion()) {
          queryToColl(dbTableCaches,new String[]{"geocode"},"reason = 0",null,null,null,geocodes,GET_STRING_0);
        }
 else {
          final long timestamp=System.currentTimeMillis() - DAYS_AFTER_CACHE_IS_DELETED;
          final String timestampString=Long.toString(timestamp);
          queryToColl(dbTableCaches,new String[]{"geocode"},"reason = 0 and detailed < ? and detailedupdate < ? and visiteddate < ?",new String[]{timestampString,timestampString,timestampString},null,null,geocodes,GET_STRING_0);
        }
        final Set<String> withoutOfflineLogs=exceptCachesWithOfflineLog(geocodes);
        Log.d("Database clean: removing " + withoutOfflineLogs.size() + " geocaches from listId=0");
        removeCaches(withoutOfflineLogs,LoadFlags.REMOVE_ALL);
        Log.d("Database clean: removing obsolete log images records");
        database.delete(dbTableLogImages,"log_id NOT IN (SELECT _id FROM " + dbTableLogs + ")",null);
        FileUtils.deleteDirectory(LocalStorage.getStorageDir("_others"));
        if (version > -1) {
          Settings.setVersion(version);
        }
      }
 catch (      final Exception e) {
        Log.w("DataStore.clean",e);
      }
      Log.d("Database clean: finished");
    }
  }
);
}
