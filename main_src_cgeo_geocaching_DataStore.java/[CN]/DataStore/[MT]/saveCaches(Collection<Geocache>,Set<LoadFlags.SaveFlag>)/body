{
  if (CollectionUtils.isEmpty(caches)) {
    return;
  }
  final ArrayList<String> cachesFromDatabase=new ArrayList<>();
  final HashMap<String,Geocache> existingCaches=new HashMap<>();
  for (  final Geocache cache : caches) {
    final String geocode=cache.getGeocode();
    final Geocache cacheFromCache=cacheCache.getCacheFromCache(geocode);
    if (cacheFromCache == null) {
      cachesFromDatabase.add(geocode);
    }
 else {
      existingCaches.put(geocode,cacheFromCache);
    }
  }
  for (  final Geocache cacheFromDatabase : loadCaches(cachesFromDatabase,LoadFlags.LOAD_ALL_DB_ONLY)) {
    existingCaches.put(cacheFromDatabase.getGeocode(),cacheFromDatabase);
  }
  final ArrayList<Geocache> toBeStored=new ArrayList<>();
  for (  final Geocache cache : caches) {
    final String geocode=cache.getGeocode();
    final Geocache existingCache=existingCaches.get(geocode);
    boolean dbUpdateRequired=!cache.gatherMissingFrom(existingCache) || cacheCache.getCacheFromCache(geocode) != null;
    dbUpdateRequired|=cache.parseWaypointsFromNote();
    cache.addStorageLocation(StorageLocation.CACHE);
    cacheCache.putCacheInCache(cache);
    if (saveFlags.contains(SaveFlag.DB) && cache.isDetailed() && dbUpdateRequired) {
      toBeStored.add(cache);
    }
  }
  for (  final Geocache geocache : toBeStored) {
    storeIntoDatabase(geocache);
  }
}
