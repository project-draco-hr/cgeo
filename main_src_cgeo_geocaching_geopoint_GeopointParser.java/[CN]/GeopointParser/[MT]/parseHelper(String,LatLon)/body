{
  final Pattern pattern=LatLon.LAT == latlon ? patternLat : patternLon;
  final Matcher matcher=pattern.matcher(text);
  if (matcher.find()) {
    final double sign=matcher.group(1).equalsIgnoreCase("S") || matcher.group(1).equalsIgnoreCase("W") ? -1.0 : 1.0;
    final double degree=Integer.valueOf(matcher.group(2)).doubleValue();
    double minutes=0.0;
    double seconds=0.0;
    if (null != matcher.group(3)) {
      minutes=Integer.valueOf(matcher.group(3)).doubleValue();
      if (null != matcher.group(4)) {
        seconds=Double.parseDouble("0." + matcher.group(4)) * 60.0;
      }
 else       if (null != matcher.group(5)) {
        seconds=Double.parseDouble(matcher.group(5).replace(",","."));
      }
    }
    return new ResultWrapper(sign * (degree + minutes / 60.0 + seconds / 3600.0),matcher.start(),matcher.group().length());
  }
  try {
    final String[] items=StringUtils.split(text.trim());
    if (items.length > 0) {
      final int index=(latlon == LatLon.LON ? items.length - 1 : 0);
      final int pos=(latlon == LatLon.LON ? text.lastIndexOf(items[index]) : text.indexOf(items[index]));
      return new ResultWrapper(Double.parseDouble(items[index]),pos,items[index].length());
    }
  }
 catch (  NumberFormatException e) {
  }
  throw new Geopoint.ParseException("Could not parse coordinates as " + latlon + ": \""+ text+ "\"",latlon);
}
