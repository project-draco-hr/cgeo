{
  View rowView=convertView;
  if (null == rowView) {
    rowView=getLayoutInflater().inflate(R.layout.logs_item,null);
  }
  LogViewHolder holder=(LogViewHolder)rowView.getTag();
  if (null == holder) {
    holder=new LogViewHolder(rowView);
  }
  holder.setPosition(position);
  final LogEntry log=getItem(position);
  if (log.date > 0) {
    holder.date.setText(Formatter.formatShortDateVerbally(log.date));
    holder.date.setVisibility(View.VISIBLE);
  }
 else {
    holder.date.setVisibility(View.GONE);
  }
  holder.type.setText(log.type.getL10n());
  holder.author.setText(StringEscapeUtils.unescapeHtml4(log.author));
  holder.countOrLocation.setVisibility(View.VISIBLE);
  if (log.found == -1) {
    holder.countOrLocation.setVisibility(View.GONE);
  }
 else {
    holder.countOrLocation.setText(res.getQuantityString(R.plurals.cache_counts,log.found,log.found));
  }
  String logText=log.log;
  if (TextUtils.containsHtml(logText)) {
    logText=log.getDisplayText();
    HtmlImageCounter imageCounter=new HtmlImageCounter();
    final UnknownTagsHandler unknownTagsHandler=new UnknownTagsHandler();
    holder.text.setText(Html.fromHtml(logText,imageCounter,unknownTagsHandler),TextView.BufferType.SPANNABLE);
    if (imageCounter.getImageCount() > 0) {
      LogImageLoader loader=new LogImageLoader(holder);
      loader.execute(logText);
    }
  }
 else {
    holder.text.setText(logText,TextView.BufferType.SPANNABLE);
  }
  if (log.hasLogImages()) {
    holder.images.setText(log.getImageTitles());
    holder.images.setVisibility(View.VISIBLE);
    holder.images.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View v){
        ImagesActivity.startActivityLogImages(CacheDetailActivity.this,cache.getGeocode(),new ArrayList<Image>(log.getLogImages()));
      }
    }
);
  }
 else {
    holder.images.setVisibility(View.GONE);
  }
  int marker=log.type.markerId;
  if (marker != 0) {
    holder.marker.setVisibility(View.VISIBLE);
    holder.marker.setImageResource(marker);
  }
 else {
    holder.marker.setVisibility(View.GONE);
  }
  if (null == convertView) {
    holder.author.setOnClickListener(userActionsClickListener);
    holder.text.setMovementMethod(AnchorAwareLinkMovementMethod.getInstance());
    holder.text.setOnClickListener(decryptTextClickListener);
    registerForContextMenu(holder.text);
  }
  return rowView;
}
