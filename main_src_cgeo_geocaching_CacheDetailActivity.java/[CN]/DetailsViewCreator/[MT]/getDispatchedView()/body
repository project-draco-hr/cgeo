{
  if (cache == null) {
    return null;
  }
  view=(ScrollView)getLayoutInflater().inflate(R.layout.cachedetail_details_page,null);
  if (Settings.isStoreOfflineMaps()) {
    new PreviewMapTask().execute((Void)null);
  }
  detailsList=(LinearLayout)view.findViewById(R.id.details_list);
  final CacheDetailsCreator details=new CacheDetailsCreator(CacheDetailActivity.this,detailsList);
  final Spannable span=(new Spannable.Factory()).newSpannable(Html.fromHtml(cache.getName()).toString());
  if (cache.isDisabled() || cache.isArchived()) {
    span.setSpan(new StrikethroughSpan(),0,span.toString().length(),Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
  }
  if (cache.isArchived()) {
    span.setSpan(new ForegroundColorSpan(res.getColor(R.color.archived_cache_color)),0,span.toString().length(),Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
  }
  registerForContextMenu(details.add(R.string.cache_name,span));
  details.add(R.string.cache_type,cache.getType().getL10n());
  details.addSize(cache);
  registerForContextMenu(details.add(R.string.cache_geocode,cache.getGeocode()));
  details.addCacheState(cache);
  details.addDistance(cache,cacheDistanceView);
  cacheDistanceView=details.getValueView();
  details.addDifficulty(cache);
  details.addTerrain(cache);
  details.addRating(cache);
  if (cache.getFavoritePoints() > 0) {
    details.add(R.string.cache_favorite,cache.getFavoritePoints() + "??");
  }
  if (cache.getMyVote() > 0) {
    details.addStars(R.string.cache_own_rating,cache.getMyVote());
  }
  if (StringUtils.isNotBlank(cache.getOwnerDisplayName()) || StringUtils.isNotBlank(cache.getOwnerUserId())) {
    final TextView ownerView=details.add(R.string.cache_owner,"");
    if (StringUtils.isNotBlank(cache.getOwnerDisplayName())) {
      ownerView.setText(cache.getOwnerDisplayName(),TextView.BufferType.SPANNABLE);
    }
 else {
      ownerView.setText(cache.getOwnerUserId(),TextView.BufferType.SPANNABLE);
    }
    ownerView.setOnClickListener(new OwnerActionsClickListener(cache));
  }
  final Date hiddenDate=cache.getHiddenDate();
  if (hiddenDate != null) {
    final long time=hiddenDate.getTime();
    if (time > 0) {
      String dateString=Formatter.formatFullDate(time);
      if (cache.isEventCache()) {
        dateString=DateUtils.formatDateTime(CgeoApplication.getInstance().getBaseContext(),time,DateUtils.FORMAT_SHOW_WEEKDAY) + ", " + dateString;
      }
      details.add(cache.isEventCache() ? R.string.cache_event : R.string.cache_hidden,dateString);
    }
  }
  if (StringUtils.isNotBlank(cache.getLocation())) {
    details.add(R.string.cache_location,cache.getLocation());
  }
  if (cache.getCoords() != null) {
    final TextView valueView=details.add(R.string.cache_coordinates,cache.getCoords().toString());
    valueView.setOnClickListener(new CoordinatesFormatSwitcher(cache.getCoords()));
    registerForContextMenu(valueView);
  }
  if (!cache.getAttributes().isEmpty()) {
    new AttributeViewBuilder().fillView((LinearLayout)view.findViewById(R.id.attributes_innerbox));
    view.findViewById(R.id.attributes_box).setVisibility(View.VISIBLE);
  }
  updateOfflineBox(view,cache,res,new RefreshCacheClickListener(),new DropCacheClickListener(),new StoreCacheClickListener());
  final Button buttonWatchlistAdd=(Button)view.findViewById(R.id.add_to_watchlist);
  final Button buttonWatchlistRemove=(Button)view.findViewById(R.id.remove_from_watchlist);
  buttonWatchlistAdd.setOnClickListener(new AddToWatchlistClickListener());
  buttonWatchlistRemove.setOnClickListener(new RemoveFromWatchlistClickListener());
  updateWatchlistBox();
  final Button buttonFavPointAdd=(Button)view.findViewById(R.id.add_to_favpoint);
  final Button buttonFavPointRemove=(Button)view.findViewById(R.id.remove_from_favpoint);
  buttonFavPointAdd.setOnClickListener(new FavoriteAddClickListener());
  buttonFavPointRemove.setOnClickListener(new FavoriteRemoveClickListener());
  updateFavPointBox();
  final Button buttonChangeList=(Button)view.findViewById(R.id.change_list);
  buttonChangeList.setOnClickListener(new ChangeListClickListener());
  updateListBox();
  final IConnector connector=ConnectorFactory.getConnector(cache);
  final String license=connector.getLicenseText(cache);
  if (StringUtils.isNotBlank(license)) {
    view.findViewById(R.id.license_box).setVisibility(View.VISIBLE);
    final TextView licenseView=((TextView)view.findViewById(R.id.license));
    licenseView.setText(Html.fromHtml(license),BufferType.SPANNABLE);
    licenseView.setClickable(true);
    licenseView.setMovementMethod(AnchorAwareLinkMovementMethod.getInstance());
  }
 else {
    view.findViewById(R.id.license_box).setVisibility(View.GONE);
  }
  return view;
}
