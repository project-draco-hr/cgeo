{
  super.onCreate(savedInstanceState,R.layout.cachedetail_activity);
  createSubscriptions=new CompositeSubscription();
  final Bundle extras=getIntent().getExtras();
  Uri uri=getIntent().getData();
  String name=null;
  String geocode=null;
  String guid=null;
  if (NfcAdapter.ACTION_NDEF_DISCOVERED.equals(getIntent().getAction())) {
    final NdefMessage msg=(NdefMessage)extras.getParcelableArray(NfcAdapter.EXTRA_NDEF_MESSAGES)[0];
    uri=Uri.parse("http://" + new String(msg.getRecords()[0].getPayload(),Charsets.UTF_8));
  }
 else   if (extras != null) {
    geocode=extras.getString(Intents.EXTRA_GEOCODE);
    name=extras.getString(Intents.EXTRA_NAME);
    guid=extras.getString(Intents.EXTRA_GUID);
  }
  if (StringUtils.isEmpty(geocode)) {
    geocode=MapsWithMeCacheListApp.getCacheFromMapsWithMe(this,getIntent());
  }
  if (geocode == null && guid == null && uri != null) {
    final String uriHost=uri.getHost().toLowerCase(Locale.US);
    final String uriPath=uri.getPath().toLowerCase(Locale.US);
    final String uriQuery=uri.getQuery();
    if (uriQuery != null) {
      Log.i("Opening URI: " + uriHost + uriPath+ "?"+ uriQuery);
    }
 else {
      Log.i("Opening URI: " + uriHost + uriPath);
    }
    if (uriHost.contains("geocaching.com")) {
      if (StringUtils.startsWith(uriPath,"/geocache/gc")) {
        geocode=StringUtils.substringBefore(uriPath.substring(10),"_").toUpperCase(Locale.US);
      }
 else {
        geocode=uri.getQueryParameter("wp");
        guid=uri.getQueryParameter("guid");
        if (StringUtils.isNotBlank(geocode)) {
          geocode=geocode.toUpperCase(Locale.US);
          guid=null;
        }
 else         if (StringUtils.isNotBlank(guid)) {
          geocode=null;
          guid=guid.toLowerCase(Locale.US);
        }
 else {
          showToast(res.getString(R.string.err_detail_open));
          finish();
          return;
        }
      }
    }
 else     if (uriHost.contains("coord.info")) {
      if (StringUtils.startsWith(uriPath,"/gc")) {
        geocode=uriPath.substring(1).toUpperCase(Locale.US);
      }
 else {
        showToast(res.getString(R.string.err_detail_open));
        finish();
        return;
      }
    }
 else     if (uriHost.contains("opencaching.de") || uriHost.contains("opencaching.fr")) {
      if (StringUtils.startsWith(uriPath,"/oc")) {
        geocode=uriPath.substring(1).toUpperCase(Locale.US);
      }
 else {
        geocode=uri.getQueryParameter("wp");
        if (StringUtils.isNotBlank(geocode)) {
          geocode=geocode.toUpperCase(Locale.US);
        }
 else {
          showToast(res.getString(R.string.err_detail_open));
          finish();
          return;
        }
      }
    }
 else {
      showToast(res.getString(R.string.err_detail_open));
      finish();
      return;
    }
  }
  if (geocode == null && guid == null) {
    showToast(res.getString(R.string.err_detail_cache));
    finish();
    return;
  }
  setCacheTitleBar(geocode,name,null);
  final LoadCacheHandler loadCacheHandler=new LoadCacheHandler(this,progress);
  try {
    String title=res.getString(R.string.cache);
    if (StringUtils.isNotBlank(name)) {
      title=name;
    }
 else     if (null != geocode && StringUtils.isNotBlank(geocode)) {
      title=geocode;
    }
    progress.show(this,title,res.getString(R.string.cache_dialog_loading_details),true,loadCacheHandler.cancelMessage());
  }
 catch (  final RuntimeException ignored) {
  }
  final int pageToOpen=savedInstanceState != null ? savedInstanceState.getInt(STATE_PAGE_INDEX,0) : Settings.isOpenLastDetailsPage() ? Settings.getLastDetailsPage() : 1;
  createViewPager(pageToOpen,new OnPageSelectedListener(){
    @Override public void onPageSelected(    final int position){
      if (Settings.isOpenLastDetailsPage()) {
        Settings.setLastDetailsPage(position);
      }
      if (getPage(position) == Page.IMAGES) {
        loadCacheImages();
      }
      requireGeodata=getPage(position) == Page.DETAILS;
      startOrStopGeoDataListener();
      if (currentActionMode != null) {
        currentActionMode.finish();
      }
    }
  }
);
  requireGeodata=pageToOpen == 1;
  final String realGeocode=geocode;
  final String realGuid=guid;
  RxUtils.networkScheduler.createWorker().schedule(new Action0(){
    @Override public void call(){
      search=Geocache.searchByGeocode(realGeocode,StringUtils.isBlank(realGeocode) ? realGuid : null,0,false,loadCacheHandler);
      loadCacheHandler.sendMessage(Message.obtain());
    }
  }
);
  locationUpdater=new CacheDetailsGeoDirHandler(this);
  initializeAndroidBeam(this);
}
