{
switch (item.getItemId()) {
case R.id.menu_waypoint_edit:
    if (selectedWaypoint != null) {
      ensureSaved();
      EditWaypointActivity.startActivityEditWaypoint(this,cache,selectedWaypoint.getId());
      refreshOnResume=true;
    }
  return true;
case R.id.menu_waypoint_duplicate:
ensureSaved();
new AsyncTask<Void,Void,Boolean>(){
@Override protected Boolean doInBackground(final Void... params){
  if (cache.duplicateWaypoint(selectedWaypoint)) {
    DataStore.saveCache(cache,EnumSet.of(SaveFlag.DB));
    return true;
  }
  return false;
}
@Override protected void onPostExecute(final Boolean result){
  if (result) {
    notifyDataSetChanged();
  }
}
}
.execute();
return true;
case R.id.menu_waypoint_delete:
ensureSaved();
new AsyncTask<Void,Void,Boolean>(){
@Override protected Boolean doInBackground(final Void... params){
if (cache.deleteWaypoint(selectedWaypoint)) {
DataStore.saveCache(cache,EnumSet.of(SaveFlag.DB));
return true;
}
return false;
}
@Override protected void onPostExecute(final Boolean result){
if (result) {
notifyDataSetChanged();
}
}
}
.execute();
return true;
case R.id.menu_waypoint_navigate_default:
if (selectedWaypoint != null) {
NavigationAppFactory.startDefaultNavigationApplication(1,this,selectedWaypoint);
}
return true;
case R.id.menu_waypoint_navigate:
if (selectedWaypoint != null) {
NavigationAppFactory.showNavigationMenu(this,null,selectedWaypoint,null);
}
return true;
case R.id.menu_waypoint_caches_around:
if (selectedWaypoint != null) {
CacheListActivity.startActivityCoordinates(this,selectedWaypoint.getCoords());
}
return true;
case R.id.menu_waypoint_reset_cache_coords:
ensureSaved();
if (ConnectorFactory.getConnector(cache).supportsOwnCoordinates()) {
createResetCacheCoordinatesDialog(selectedWaypoint).show();
}
 else {
final ProgressDialog progressDialog=ProgressDialog.show(this,getString(R.string.cache),getString(R.string.waypoint_reset),true);
final HandlerResetCoordinates handler=new HandlerResetCoordinates(this,progressDialog,false);
resetCoords(cache,handler,selectedWaypoint,true,false,progressDialog);
}
return true;
case R.id.menu_calendar:
CalendarAddon.addToCalendarWithIntent(this,cache);
return true;
default :
break;
}
if (imagesList != null && imagesList.onContextItemSelected(item)) {
return true;
}
return onOptionsItemSelected(item);
}
