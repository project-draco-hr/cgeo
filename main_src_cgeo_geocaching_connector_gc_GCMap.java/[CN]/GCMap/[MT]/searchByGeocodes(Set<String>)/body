{
  final SearchResult result=new SearchResult();
  final String geocodeList=StringUtils.join(geocodes.toArray(),"|");
  try {
    final Parameters params=new Parameters("i",geocodeList,"_",String.valueOf(System.currentTimeMillis()));
    params.add("app","cgeo");
    final String referer=GCConstants.URL_LIVE_MAP_DETAILS;
    final String data=StringUtils.defaultString(Tile.requestMapInfo(referer,params,referer).toBlocking().first());
    final ObjectNode json=(ObjectNode)JsonUtils.reader.readTree(data);
    final String status=json.path("status").asText();
    if (StringUtils.isBlank(status)) {
      throw new ParserException("No status inside JSON");
    }
    if ("success".compareTo(status) != 0) {
      throw new ParserException("Wrong status inside JSON");
    }
    final ArrayNode dataArray=(ArrayNode)json.get("data");
    if (dataArray == null) {
      throw new ParserException("No data inside JSON");
    }
    final List<Geocache> caches=new ArrayList<>();
    for (    final JsonNode dataObject : dataArray) {
      final Geocache cache=new Geocache();
      cache.setName(dataObject.path("name").asText());
      cache.setGeocode(dataObject.path("gc").asText());
      cache.setGuid(dataObject.path("g").asText());
      cache.setDisabled(!dataObject.path("available").asBoolean());
      cache.setArchived(dataObject.path("archived").asBoolean());
      cache.setPremiumMembersOnly(dataObject.path("subrOnly").asBoolean());
      cache.setFavoritePoints(Integer.parseInt(dataObject.path("fp").asText()));
      cache.setDifficulty(Float.parseFloat(dataObject.path("difficulty").path("text").asText()));
      cache.setTerrain(Float.parseFloat(dataObject.path("terrain").path("text").asText()));
      cache.setHidden(GCLogin.parseGcCustomDate(dataObject.path("hidden").asText(),"MM/dd/yyyy"));
      cache.setSize(CacheSize.getById(dataObject.path("container").path("text").asText()));
      cache.setType(CacheType.getByPattern(dataObject.path("type").path("text").asText()));
      cache.setOwnerDisplayName(dataObject.path("owner").path("text").asText());
      caches.add(cache);
    }
    result.addAndPutInCache(caches);
  }
 catch (  ParserException|ParseException|IOException|NumberFormatException ignored) {
    result.setError(StatusCode.UNKNOWN_ERROR);
  }
  return result;
}
