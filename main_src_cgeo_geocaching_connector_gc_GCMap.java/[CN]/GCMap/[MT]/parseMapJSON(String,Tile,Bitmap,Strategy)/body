{
  final SearchResult searchResult=new SearchResult();
  try {
    final LeastRecentlyUsedMap<String,String> nameCache=new LeastRecentlyUsedMap.LruCache<>(2000);
    if (StringUtils.isEmpty(data)) {
      throw new JSONException("No page given");
    }
    final JSONObject json=new JSONObject(data);
    final JSONArray grid=json.getJSONArray("grid");
    if (grid == null || grid.length() != (UTFGrid.GRID_MAXY + 1)) {
      throw new JSONException("No grid inside JSON");
    }
    final JSONArray keys=json.getJSONArray("keys");
    if (keys == null) {
      throw new JSONException("No keys inside JSON");
    }
    final JSONObject dataObject=json.getJSONObject("data");
    if (dataObject == null) {
      throw new JSONException("No data inside JSON");
    }
    Map<String,List<UTFGridPosition>> positions=new HashMap<>();
    Map<String,List<UTFGridPosition>> singlePositions=new HashMap<>();
    for (int i=1; i < keys.length(); i++) {
      String key=keys.getString(i);
      if (StringUtils.isNotBlank(key)) {
        UTFGridPosition pos=UTFGridPosition.fromString(key);
        JSONArray dataForKey=dataObject.getJSONArray(key);
        for (int j=0; j < dataForKey.length(); j++) {
          JSONObject cacheInfo=dataForKey.getJSONObject(j);
          String id=cacheInfo.getString("i");
          nameCache.put(id,cacheInfo.getString("n"));
          List<UTFGridPosition> listOfPositions=positions.get(id);
          List<UTFGridPosition> singleListOfPositions=singlePositions.get(id);
          if (listOfPositions == null) {
            listOfPositions=new ArrayList<>();
            positions.put(id,listOfPositions);
            singleListOfPositions=new ArrayList<>();
            singlePositions.put(id,singleListOfPositions);
          }
          listOfPositions.add(pos);
          if (dataForKey.length() == 1) {
            singleListOfPositions.add(pos);
          }
        }
      }
    }
    final ArrayList<Geocache> caches=new ArrayList<>();
    for (    Entry<String,List<UTFGridPosition>> entry : positions.entrySet()) {
      String id=entry.getKey();
      List<UTFGridPosition> pos=entry.getValue();
      UTFGridPosition xy=UTFGrid.getPositionInGrid(pos);
      Geocache cache=new Geocache();
      cache.setDetailed(false);
      cache.setReliableLatLon(false);
      cache.setGeocode(id);
      cache.setName(nameCache.get(id));
      cache.setCoords(tile.getCoord(xy),tile.getZoomLevel());
      if (strategy.flags.contains(StrategyFlag.PARSE_TILES) && bitmap != null) {
        for (        UTFGridPosition singlePos : singlePositions.get(id)) {
          if (IconDecoder.parseMapPNG(cache,bitmap,singlePos,tile.getZoomLevel())) {
            break;
          }
        }
      }
 else {
        cache.setType(CacheType.UNKNOWN,tile.getZoomLevel());
      }
      boolean exclude=false;
      if (Settings.isExcludeMyCaches() && (cache.isFound() || cache.isOwner())) {
        exclude=true;
      }
      if (Settings.isExcludeDisabledCaches() && cache.isDisabled()) {
        exclude=true;
      }
      if (!Settings.getCacheType().contains(cache) && cache.getType() != CacheType.UNKNOWN) {
        exclude=true;
      }
      if (!exclude) {
        caches.add(cache);
      }
    }
    searchResult.addAndPutInCache(caches);
    Log.d("Retrieved " + searchResult.getCount() + " caches for tile "+ tile.toString());
  }
 catch (  RuntimeException e) {
    Log.e("GCMap.parseMapJSON",e);
  }
catch (  JSONException e) {
    Log.e("GCMap.parseMapJSON",e);
  }
  return searchResult;
}
