{
  Log.d("GCMap.searchByViewport" + viewport.toString());
  final SearchResult searchResult=new SearchResult();
  if (Settings.isDebug()) {
    searchResult.setUrl(viewport.getCenter().format(Format.LAT_LON_DECMINUTE));
  }
  if (strategy.flags.contains(LivemapStrategy.Flag.LOAD_TILES)) {
    final Set<Tile> tiles=Tile.getTilesForViewport(viewport);
    if (Settings.isDebug()) {
      searchResult.setUrl(new StringBuilder().append(tiles.iterator().next().getZoomLevel()).append(Formatter.SEPARATOR).append(searchResult.getUrl()).toString());
    }
    for (    final Tile tile : tiles) {
      if (!Tile.cache.contains(tile)) {
        final Parameters params=new Parameters("x",String.valueOf(tile.getX()),"y",String.valueOf(tile.getY()),"z",String.valueOf(tile.getZoomLevel()),"ep","1","app","cgeo");
        if (tokens != null) {
          params.put("k",tokens.getUserSession(),"st",tokens.getSessionToken());
        }
        if (Settings.isExcludeMyCaches()) {
          params.put("hf","1","hh","1");
        }
        if (Settings.getCacheType() != CacheType.ALL) {
          params.put("ect",getCacheTypeFilter(Settings.getCacheType()));
        }
        if (tile.getZoomLevel() != 14) {
          params.put("_",String.valueOf(System.currentTimeMillis()));
        }
        final Single<Bitmap> bitmapObs=Tile.requestMapTile(params).onErrorResumeNext(ONE_ONE_BITMAP_SINGLE);
        final Single<String> dataObs=Tile.requestMapInfo(GCConstants.URL_MAP_INFO,params,GCConstants.URL_LIVE_MAP).onErrorResumeNext(Single.just(""));
        try {
          Single.zip(bitmapObs,dataObs,new Func2<Bitmap,String,Void>(){
            @Override public Void call(            final Bitmap bitmap,            final String data){
              final boolean validBitmap=bitmap != null && bitmap.getWidth() == Tile.TILE_SIZE && bitmap.getHeight() == Tile.TILE_SIZE;
              if (StringUtils.isEmpty(data)) {
                Log.w("GCMap.searchByViewport: No data from server for tile (" + tile.getX() + "/"+ tile.getY()+ ")");
              }
 else {
                final SearchResult search=parseMapJSON(data,tile,validBitmap ? bitmap : null,strategy);
                if (CollectionUtils.isEmpty(search.getGeocodes())) {
                  Log.w("GCMap.searchByViewport: No cache parsed for viewport " + viewport);
                }
 else {
synchronized (searchResult) {
                    searchResult.addSearchResult(search);
                  }
                }
synchronized (Tile.cache) {
                  Tile.cache.add(tile);
                }
              }
              if (bitmap != null) {
                bitmap.recycle();
              }
              return null;
            }
          }
).toBlocking().value();
        }
 catch (        final Exception e) {
          Log.e("GCMap.searchByViewPort: connection error");
        }
      }
    }
    if (tiles.iterator().next().getZoomLevel() >= Tile.ZOOMLEVEL_MIN_PERSONALIZED) {
      searchResult.addFilteredGeocodes(DataStore.getCachedMissingFromSearch(searchResult,tiles,GCConnector.getInstance(),Tile.ZOOMLEVEL_MIN_PERSONALIZED - 1));
    }
  }
  if (strategy.flags.contains(Flag.SEARCH_NEARBY) && Settings.isGCPremiumMember()) {
    final Geopoint center=viewport.getCenter();
    if (lastSearchViewport == null || !lastSearchViewport.contains(center)) {
      final SearchResult search=GCParser.searchByCoords(center,Settings.getCacheType());
      if (search != null && !search.isEmpty()) {
        final Set<String> geocodes=search.getGeocodes();
        lastSearchViewport=DataStore.getBounds(geocodes);
        searchResult.addGeocodes(geocodes);
      }
    }
  }
  return searchResult;
}
