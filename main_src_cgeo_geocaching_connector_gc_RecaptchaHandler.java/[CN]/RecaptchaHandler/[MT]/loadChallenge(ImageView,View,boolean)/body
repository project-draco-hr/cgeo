{
  final Observable<Bitmap> captcha=Observable.defer(new Func0<Observable<Bitmap>>(){
    @Override public Observable<Bitmap> call(){
      if (needsFetch) {
        recaptchaReceiver.fetchChallenge();
      }
      final String url="http://www.google.com/recaptcha/api/image?c=" + recaptchaReceiver.getChallenge();
      final InputStream is=Network.getResponseStream(Network.getRequest(url));
      if (is != null) {
        try {
          final Bitmap img=BitmapFactory.decodeStream(is);
          return Observable.just(img);
        }
 catch (        final Exception e) {
          Log.e("RecaptchaHandler.getCaptcha",e);
          return Observable.error(e);
        }
 finally {
          IOUtils.closeQuietly(is);
        }
      }
      return Observable.empty();
    }
  }
);
  AppObservable.bindActivity(activity,captcha).subscribeOn(RxUtils.networkScheduler).subscribe(new Action1<Bitmap>(){
    @Override public void call(    final Bitmap bitmap){
      imageView.setImageBitmap(bitmap);
    }
  }
,new Action1<Throwable>(){
    @Override public void call(    final Throwable throwable){
    }
  }
);
  reloadButton.setEnabled(true);
}
