{
  if (super.onOptionsItemSelected(item)) {
    return true;
  }
switch (item.getItemId()) {
case R.id.menu_show_on_map:
    goMap();
  return true;
case R.id.menu_switch_select_mode:
adapter.switchSelectMode();
invalidateOptionsMenuCompatible();
return true;
case R.id.menu_refresh_stored_top:
case R.id.menu_refresh_stored:
refreshStored(adapter.getCheckedOrAllCaches());
invalidateOptionsMenuCompatible();
return true;
case R.id.menu_drop_caches:
dropStored(false);
invalidateOptionsMenuCompatible();
return false;
case R.id.menu_drop_caches_and_list:
dropStored(true);
invalidateOptionsMenuCompatible();
return true;
case R.id.menu_import_gpx:
importGpx();
invalidateOptionsMenuCompatible();
return true;
case R.id.menu_import_android:
importGpxFromAndroid();
invalidateOptionsMenuCompatible();
return false;
case R.id.menu_create_list:
new StoredList.UserInterface(this).promptForListCreation(getListSwitchingRunnable(),newListName);
refreshSpinnerAdapter();
invalidateOptionsMenuCompatible();
return false;
case R.id.menu_drop_list:
removeList(true);
invalidateOptionsMenuCompatible();
return false;
case R.id.menu_rename_list:
renameList();
return false;
case R.id.menu_invert_selection:
adapter.invertSelection();
invalidateOptionsMenuCompatible();
return false;
case R.id.menu_filter:
showFilterMenu(null);
return true;
case R.id.menu_sort:
final CacheComparator oldComparator=adapter.getCacheComparator();
new ComparatorUserInterface(this).selectComparator(oldComparator,new Action1<CacheComparator>(){
@Override public void call(CacheComparator selectedComparator){
if (selectedComparator != null && oldComparator != null && selectedComparator.getClass().equals(oldComparator.getClass())) {
adapter.toggleInverseSort();
}
 else {
adapter.resetInverseSort();
}
setComparator(selectedComparator);
}
}
);
return true;
case R.id.menu_import_web:
importWeb();
return false;
case R.id.menu_export:
ExportFactory.showExportMenu(adapter.getCheckedOrAllCaches(),this);
return false;
case R.id.menu_remove_from_history:
removeFromHistoryCheck();
invalidateOptionsMenuCompatible();
return false;
case R.id.menu_move_to_list:
moveCachesToOtherList();
invalidateOptionsMenuCompatible();
return true;
case R.id.menu_delete_events:
deletePastEvents();
invalidateOptionsMenuCompatible();
return true;
case R.id.menu_clear_offline_logs:
clearOfflineLogs();
invalidateOptionsMenuCompatible();
return true;
case R.id.menu_cache_list_app:
if (!cacheToShow()) {
return false;
}
return CacheListAppFactory.onMenuItemSelected(item,cacheList,this,getFilteredSearch());
default :
return CacheListAppFactory.onMenuItemSelected(item,cacheList,this,search);
}
}
