{
  ContextMenu.ContextMenuInfo info=item.getMenuInfo();
  if (info == null) {
    info=lastMenuInfo;
    lastMenuInfo=null;
  }
  AdapterContextMenuInfo adapterInfo=null;
  try {
    adapterInfo=(AdapterContextMenuInfo)info;
  }
 catch (  final Exception e) {
    Log.w("CacheListActivity.onContextItemSelected",e);
  }
  final Geocache cache=adapterInfo != null ? getCacheFromAdapter(adapterInfo) : null;
  if (cache == null) {
    return true;
  }
switch (item.getItemId()) {
case R.id.menu_default_navigation:
    NavigationAppFactory.startDefaultNavigationApplication(1,this,cache);
  break;
case R.id.menu_navigate:
NavigationAppFactory.showNavigationMenu(this,cache,null,null);
break;
case R.id.menu_cache_details:
CacheDetailActivity.startActivity(this,cache.getGeocode(),cache.getName());
break;
case R.id.menu_drop_cache:
cache.drop(new Handler(){
@Override public void handleMessage(final Message msg){
adapter.notifyDataSetChanged();
refreshCurrentList();
}
}
,Schedulers.io());
break;
case R.id.menu_move_to_list:
new StoredList.UserInterface(this).promptForListSelection(R.string.cache_menu_move_list,new Action1<Integer>(){
@Override public void call(final Integer newListId){
DataStore.moveToList(Collections.singletonList(cache),newListId);
adapter.setSelectMode(false);
refreshCurrentList();
}
}
,true,listId,newListName);
break;
case R.id.menu_store_cache:
case R.id.menu_refresh:
refreshStored(Collections.singletonList(cache));
break;
case R.id.menu_export:
ExportFactory.showExportMenu(Collections.singletonList(cache),this);
return false;
default :
lastMenuInfo=info;
LoggingUI.onMenuItemSelected(item,this,cache);
}
return true;
}
