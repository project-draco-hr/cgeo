{
  super.onPrepareOptionsMenu(menu);
  final boolean isHistory=type == CacheListType.HISTORY;
  final boolean isOffline=type == CacheListType.OFFLINE;
  final boolean isEmpty=cacheList.isEmpty();
  final boolean isConcrete=isConcreteList();
  try {
    if (adapter.isSelectMode()) {
      menu.findItem(R.id.menu_switch_select_mode).setTitle(res.getString(R.string.caches_select_mode_exit)).setIcon(R.drawable.ic_menu_clear_playlist);
    }
 else {
      menu.findItem(R.id.menu_switch_select_mode).setTitle(res.getString(R.string.caches_select_mode)).setIcon(R.drawable.ic_menu_agenda);
    }
    menu.findItem(R.id.menu_invert_selection).setVisible(adapter.isSelectMode());
    setVisible(menu,R.id.menu_switch_select_mode,!isEmpty);
    setVisible(menu,R.id.submenu_manage,isOffline || isHistory);
    setVisible(menu,R.id.submenu_manage_lists,isOffline);
    setVisible(menu,R.id.menu_sort,!isEmpty && !isHistory);
    setVisible(menu,R.id.menu_refresh_stored,!isEmpty && (isConcrete || type != CacheListType.OFFLINE));
    setVisible(menu,R.id.menu_drop_caches,!isEmpty && isOffline);
    setVisible(menu,R.id.menu_drop_caches_and_list,isConcrete && !isEmpty && isOffline);
    setVisible(menu,R.id.menu_delete_events,isConcrete && !isEmpty && containsEvents());
    setVisible(menu,R.id.menu_move_to_list,isOffline && !isEmpty);
    setVisible(menu,R.id.menu_export,!isEmpty && (isHistory || isOffline));
    setVisible(menu,R.id.menu_remove_from_history,!isEmpty && isHistory);
    setVisible(menu,R.id.menu_clear_offline_logs,!isEmpty && containsOfflineLogs() && (isHistory || isOffline));
    setVisible(menu,R.id.menu_import_web,isOffline && Settings.getWebDeviceCode() != null);
    setVisible(menu,R.id.menu_import_gpx,isOffline);
    setVisible(menu,R.id.menu_refresh_stored_top,!isOffline);
    if (!isOffline && !isHistory) {
      menu.findItem(R.id.menu_refresh_stored_top).setTitle(R.string.caches_store_offline);
    }
    final boolean hasSelection=adapter != null && adapter.getCheckedCount() > 0;
    final boolean isNonDefaultList=isConcrete && listId != StoredList.STANDARD_LIST_ID;
    if (isOffline || type == CacheListType.HISTORY) {
      setMenuItemLabel(menu,R.id.menu_drop_caches,R.string.caches_drop_selected,R.string.caches_drop_all);
      setMenuItemLabel(menu,R.id.menu_refresh_stored,R.string.caches_refresh_selected,R.string.caches_refresh_all);
      setMenuItemLabel(menu,R.id.menu_move_to_list,R.string.caches_move_selected,R.string.caches_move_all);
    }
 else {
      setMenuItemLabel(menu,R.id.menu_refresh_stored,R.string.caches_store_selected,R.string.caches_store_offline);
    }
    menu.findItem(R.id.menu_drop_caches_and_list).setVisible(isOffline && !hasSelection && isNonDefaultList&& !adapter.isFiltered()&& Settings.getCacheType() == CacheType.ALL);
    menu.findItem(R.id.menu_drop_list).setVisible(isNonDefaultList);
    menu.findItem(R.id.menu_rename_list).setVisible(isNonDefaultList);
    final boolean multipleLists=DataStore.getLists().size() >= 2;
    menu.findItem(R.id.menu_switch_list).setVisible(multipleLists);
    menu.findItem(R.id.menu_move_to_list).setVisible(!isEmpty);
    setMenuItemLabel(menu,R.id.menu_remove_from_history,R.string.cache_remove_from_history,R.string.cache_clear_history);
    setMenuItemLabel(menu,R.id.menu_export,R.string.export,R.string.export);
  }
 catch (  final RuntimeException e) {
    Log.e("CacheListActivity.onPrepareOptionsMenu",e);
  }
  return true;
}
