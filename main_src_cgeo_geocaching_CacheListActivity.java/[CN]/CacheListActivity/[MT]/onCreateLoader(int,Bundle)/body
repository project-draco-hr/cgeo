{
  if (type >= CacheListLoaderType.values().length) {
    throw new IllegalArgumentException("invalid loader type " + type);
  }
  final CacheListLoaderType enumType=CacheListLoaderType.values()[type];
  AbstractSearchLoader loader=null;
switch (enumType) {
case OFFLINE:
    if (extras.containsKey(Intents.EXTRA_LIST_ID)) {
      listId=extras.getInt(Intents.EXTRA_LIST_ID);
    }
 else {
      listId=Settings.getLastList();
    }
  if (listId == PseudoList.ALL_LIST.id) {
    title=res.getString(R.string.list_all_lists);
  }
 else   if (listId <= StoredList.TEMPORARY_LIST.id) {
    listId=StoredList.STANDARD_LIST_ID;
    title=res.getString(R.string.stored_caches_button);
  }
 else {
    final StoredList list=DataStore.getList(listId);
    if (list.id != listId) {
      showToast(getString(R.string.list_not_available));
    }
    listId=list.id;
    title=list.title;
  }
loader=new OfflineGeocacheListLoader(getBaseContext(),coords,listId);
break;
case HISTORY:
title=res.getString(R.string.caches_history);
listId=PseudoList.HISTORY_LIST.id;
loader=new HistoryGeocacheListLoader(app,coords);
break;
case NEAREST:
title=res.getString(R.string.caches_nearby);
loader=new CoordsGeocacheListLoader(app,coords);
break;
case COORDINATE:
title=coords.toString();
loader=new CoordsGeocacheListLoader(app,coords);
break;
case KEYWORD:
final String keyword=extras.getString(Intents.EXTRA_KEYWORD);
title=listNameMemento.rememberTerm(keyword);
loader=new KeywordGeocacheListLoader(app,keyword);
break;
case ADDRESS:
final String address=extras.getString(Intents.EXTRA_ADDRESS);
if (StringUtils.isNotBlank(address)) {
title=listNameMemento.rememberTerm(address);
}
 else {
title=coords.toString();
}
loader=new CoordsGeocacheListLoader(app,coords);
break;
case FINDER:
final String username=extras.getString(Intents.EXTRA_USERNAME);
title=listNameMemento.rememberTerm(username);
loader=new FinderGeocacheListLoader(app,username);
break;
case OWNER:
final String ownerName=extras.getString(Intents.EXTRA_USERNAME);
title=listNameMemento.rememberTerm(ownerName);
loader=new OwnerGeocacheListLoader(app,ownerName);
break;
case MAP:
title=res.getString(R.string.map_map);
search=(SearchResult)extras.get(Intents.EXTRA_SEARCH);
replaceCacheListFromSearch();
loadCachesHandler.sendMessage(Message.obtain());
break;
case NEXT_PAGE:
loader=new NextPageGeocacheListLoader(app,search);
break;
case POCKET:
final String guid=extras.getString(Intents.EXTRA_POCKET_GUID);
title=extras.getString(Intents.EXTRA_NAME);
loader=new PocketGeocacheListLoader(app,guid);
break;
}
if (StringUtils.isNotBlank(extras.getString(Intents.EXTRA_TITLE))) {
title=extras.getString(Intents.EXTRA_TITLE);
}
updateTitle();
showProgress(true);
showFooterLoadingCaches();
if (loader != null) {
loader.setRecaptchaHandler(new RecaptchaHandler(this,loader));
}
return loader;
}
