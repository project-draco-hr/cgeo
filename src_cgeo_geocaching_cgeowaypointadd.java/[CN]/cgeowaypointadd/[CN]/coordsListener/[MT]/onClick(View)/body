{
  ArrayList<Double> coords=new ArrayList<Double>();
  Double latitude=null;
  Double longitude=null;
  final String bearingText=((EditText)findViewById(R.id.bearing)).getText().toString();
  final String distanceText=((EditText)findViewById(R.id.distance)).getText().toString();
  final String latText=getLatStr();
  final String lonText=getLonStr();
  if ((bearingText == null || bearingText.length() == 0) && (distanceText == null || distanceText.length() == 0) && (latText == null || latText.length() == 0)&& (lonText == null || lonText.length() == 0)) {
    warning.helpDialog(res.getString(R.string.err_point_no_position_given_title),res.getString(R.string.err_point_no_position_given));
    return;
  }
  if (latText != null && latText.length() > 0 && lonText != null && lonText.length() > 0) {
    HashMap<String,Object> latParsed=base.parseCoordinate(latText,"lat");
    HashMap<String,Object> lonParsed=base.parseCoordinate(lonText,"lat");
    if (latParsed == null || latParsed.get("coordinate") == null || latParsed.get("string") == null) {
      warning.showToast(res.getString(R.string.err_parse_lat));
      return;
    }
    if (lonParsed == null || lonParsed.get("coordinate") == null || lonParsed.get("string") == null) {
      warning.showToast(res.getString(R.string.err_parse_lon));
      return;
    }
    latitude=(Double)latParsed.get("coordinate");
    longitude=(Double)lonParsed.get("coordinate");
  }
 else {
    if (geo == null || geo.latitudeNow == null || geo.longitudeNow == null) {
      warning.showToast(res.getString(R.string.err_point_curr_position_unavailable));
      return;
    }
    latitude=geo.latitudeNow;
    longitude=geo.longitudeNow;
  }
  if (bearingText != null && bearingText.length() > 0 && distanceText != null && distanceText.length() > 0) {
    Double bearing=null;
    try {
      bearing=new Double(bearingText);
    }
 catch (    Exception e) {
    }
    if (bearing == null) {
      warning.helpDialog(res.getString(R.string.err_point_bear_and_dist_title),res.getString(R.string.err_point_bear_and_dist));
      return;
    }
    Double distance=null;
    final Pattern patternA=Pattern.compile("^([0-9\\.\\,]+)[ ]*m$",Pattern.CASE_INSENSITIVE);
    final Pattern patternB=Pattern.compile("^([0-9\\.\\,]+)[ ]*km$",Pattern.CASE_INSENSITIVE);
    final Pattern patternC=Pattern.compile("^([0-9\\.\\,]+)[ ]*ft$",Pattern.CASE_INSENSITIVE);
    final Pattern patternD=Pattern.compile("^([0-9\\.\\,]+)[ ]*yd$",Pattern.CASE_INSENSITIVE);
    final Pattern patternE=Pattern.compile("^([0-9\\.\\,]+)[ ]*mi$",Pattern.CASE_INSENSITIVE);
    Matcher matcherA=patternA.matcher(distanceText);
    Matcher matcherB=patternB.matcher(distanceText);
    Matcher matcherC=patternC.matcher(distanceText);
    Matcher matcherD=patternD.matcher(distanceText);
    Matcher matcherE=patternE.matcher(distanceText);
    if (matcherA.find() == true && matcherA.groupCount() > 0) {
      distance=(new Double(matcherA.group(1))) * 0.001;
    }
 else     if (matcherB.find() == true && matcherB.groupCount() > 0) {
      distance=new Double(matcherB.group(1));
    }
 else     if (matcherC.find() == true && matcherC.groupCount() > 0) {
      distance=(new Double(matcherC.group(1))) * 0.0003048;
    }
 else     if (matcherD.find() == true && matcherD.groupCount() > 0) {
      distance=(new Double(matcherD.group(1))) * 0.0009144;
    }
 else     if (matcherE.find() == true && matcherE.groupCount() > 0) {
      distance=(new Double(matcherE.group(1))) * 1.609344;
    }
 else {
      try {
        if (settings.units == cgSettings.unitsImperial) {
          distance=(new Double(distanceText)) * 1.609344;
        }
 else {
          distance=(new Double(distanceText)) * 0.001;
        }
      }
 catch (      Exception e) {
      }
    }
    if (distance == null) {
      warning.showToast(res.getString(R.string.err_parse_dist));
      return;
    }
    Double latParsed=null;
    Double lonParsed=null;
    HashMap<String,Double> coordsDst=base.getRadialDistance(latitude,longitude,bearing,distance);
    latParsed=coordsDst.get("latitude");
    lonParsed=coordsDst.get("longitude");
    if (latParsed == null || lonParsed == null) {
      warning.showToast(res.getString(R.string.err_point_location_error));
      return;
    }
    coords.add(0,(Double)latParsed);
    coords.add(1,(Double)lonParsed);
  }
 else   if (latitude != null && longitude != null) {
    coords.add(0,latitude);
    coords.add(1,longitude);
  }
 else {
    warning.showToast(res.getString(R.string.err_point_location_error));
    return;
  }
  String name=((EditText)findViewById(R.id.name)).getText().toString().trim();
  if (name.length() == 0) {
    name=res.getString(R.string.waypoint) + " " + String.valueOf(wpCount + 1);
  }
  final String note=((EditText)findViewById(R.id.note)).getText().toString().trim();
  final cgWaypoint waypoint=new cgWaypoint();
  waypoint.type=type;
  waypoint.geocode=geocode;
  waypoint.prefix=prefix;
  waypoint.lookup=lookup;
  waypoint.name=name;
  waypoint.latitude=coords.get(0);
  waypoint.longitude=coords.get(1);
  waypoint.latitudeString=base.formatCoordinate(coords.get(0),"lat",true);
  waypoint.longitudeString=base.formatCoordinate(coords.get(1),"lon",true);
  waypoint.note=note;
  if (app.saveOwnWaypoint(id,geocode,waypoint) == true) {
    app.removeCacheFromCache(geocode);
    finish();
    return;
  }
 else {
    warning.showToast(res.getString(R.string.err_waypoint_add_failed));
  }
}
