{
  final Parameters params=new Parameters();
  final String page=GCLogin.getInstance().getRequestLogged("http://www.geocaching.com/pocket/default.aspx",params);
  if (StringUtils.isBlank(page)) {
    Log.e("GCParser.searchPocketQueryList: No data from server");
    return null;
  }
  String subPage=StringUtils.substringAfter(page,"class=\"PocketQueryListTable");
  if (StringUtils.isEmpty(subPage)) {
    Log.e("GCParser.searchPocketQueryList: class \"PocketQueryListTable\" not found on page");
    return Collections.emptyList();
  }
  List<PocketQueryList> list=new ArrayList<>();
  final MatcherWrapper matcherPocket=new MatcherWrapper(GCConstants.PATTERN_LIST_PQ,subPage);
  while (matcherPocket.find()) {
    int maxCaches;
    try {
      maxCaches=Integer.parseInt(matcherPocket.group(1));
    }
 catch (    NumberFormatException e) {
      maxCaches=0;
      Log.e("GCParser.searchPocketQueryList: Unable to parse max caches",e);
    }
    final String guid=Html.fromHtml(matcherPocket.group(2)).toString();
    final String name=Html.fromHtml(matcherPocket.group(3)).toString();
    final PocketQueryList pqList=new PocketQueryList(guid,name,maxCaches);
    list.add(pqList);
  }
  Collections.sort(list,new Comparator<PocketQueryList>(){
    @Override public int compare(    PocketQueryList left,    PocketQueryList right){
      return String.CASE_INSENSITIVE_ORDER.compare(left.getName(),right.getName());
    }
  }
);
  return list;
}
