{
  final Map<String,PocketQuery> downloadablePocketQueries=new HashMap<>();
  final Elements rows=document.select("#uxOfflinePQTable tr:has(td)");
  for (  final Element row : rows) {
    if (row == rows.last()) {
      break;
    }
    final Elements cells=row.select("td");
    if (cells.size() < 6) {
      Log.d("GCParser.getDownloadablePocketQueries: less then 6 table cells, looks like an empty table");
      continue;
    }
    final Element link=cells.get(2).select("a").first();
    if (link == null) {
      Log.w("GCParser.getDownloadablePocketQueries: Downloadlink not found");
      continue;
    }
    final String name=link.text();
    final String href=link.attr("href");
    final Uri uri=Uri.parse(href);
    final String guid=uri.getQueryParameter("g");
    final int count=Integer.parseInt(cells.get(4).text());
    final MatcherWrapper matcherLastGeneration=new MatcherWrapper(GCConstants.PATTERN_PQ_LAST_GEN,cells.get(5).text());
    long lastGeneration=0;
    int daysRemaining=0;
    if (matcherLastGeneration.find()) {
      final Date lastGenerationDate=GCLogin.parseGcCustomDate(matcherLastGeneration.group(1));
      if (lastGenerationDate != null) {
        lastGeneration=lastGenerationDate.getTime();
      }
      final String daysRemainingString=matcherLastGeneration.group(3);
      if (daysRemainingString != null) {
        daysRemaining=Integer.parseInt(daysRemainingString);
      }
    }
    final PocketQuery pocketQuery=new PocketQuery(guid,name,count,true,lastGeneration,daysRemaining);
    downloadablePocketQueries.put(guid,pocketQuery);
  }
  return downloadablePocketQueries;
}
