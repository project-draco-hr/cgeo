{
  if (StringUtils.isBlank(pageContent)) {
    Log.e("GCParser.parseSearch: No page given");
    return null;
  }
  final List<String> cids=new ArrayList<String>();
  String page=pageContent;
  final SearchResult searchResult=new SearchResult();
  searchResult.setUrl(url);
  searchResult.viewstates=Login.getViewstates(page);
  String recaptchaChallenge=null;
  if (showCaptcha) {
    String recaptchaJsParam=BaseUtils.getMatch(page,GCConstants.PATTERN_SEARCH_RECAPTCHA,false,null);
    if (recaptchaJsParam != null) {
      final Parameters params=new Parameters("k",recaptchaJsParam.trim());
      final String recaptchaJs=Network.getResponseData(Network.getRequest("http://www.google.com/recaptcha/api/challenge",params));
      if (StringUtils.isNotBlank(recaptchaJs)) {
        recaptchaChallenge=BaseUtils.getMatch(recaptchaJs,GCConstants.PATTERN_SEARCH_RECAPTCHACHALLENGE,true,1,null,true);
      }
    }
    if (thread != null && StringUtils.isNotBlank(recaptchaChallenge)) {
      thread.setChallenge(recaptchaChallenge);
      thread.notifyNeed();
    }
  }
  if (!page.contains("SearchResultsTable")) {
    return searchResult;
  }
  int startPos=page.indexOf("<div id=\"ctl00_ContentBody_ResultsPanel\"");
  if (startPos == -1) {
    Log.e("GCParser.parseSearch: ID \"ctl00_ContentBody_dlResults\" not found on page");
    return null;
  }
  page=page.substring(startPos);
  startPos=page.indexOf('>');
  int endPos=page.indexOf("ctl00_ContentBody_UnitTxt");
  if (startPos == -1 || endPos == -1) {
    Log.e("GCParser.parseSearch: ID \"ctl00_ContentBody_UnitTxt\" not found on page");
    return null;
  }
  page=page.substring(startPos + 1,endPos - startPos + 1);
  final String[] rows=page.split("<tr class=");
  final int rows_count=rows.length;
  for (int z=1; z < rows_count; z++) {
    final Geocache cache=new Geocache();
    String row=rows[z];
    if (!row.contains("images/wpttypes")) {
      continue;
    }
    try {
      final MatcherWrapper matcherGuidAndDisabled=new MatcherWrapper(GCConstants.PATTERN_SEARCH_GUIDANDDISABLED,row);
      while (matcherGuidAndDisabled.find()) {
        if (matcherGuidAndDisabled.groupCount() > 0) {
          cache.setGuid(matcherGuidAndDisabled.group(1));
          if (matcherGuidAndDisabled.group(4) != null) {
            cache.setName(Html.fromHtml(matcherGuidAndDisabled.group(4).trim()).toString());
          }
          if (matcherGuidAndDisabled.group(6) != null) {
            cache.setLocation(Html.fromHtml(matcherGuidAndDisabled.group(6).trim()).toString());
          }
          final String attr=matcherGuidAndDisabled.group(2);
          if (attr != null) {
            cache.setDisabled(attr.contains("Strike"));
            cache.setArchived(attr.contains("OldWarning"));
          }
        }
      }
    }
 catch (    Exception e) {
      Log.w("GCParser.parseSearch: Failed to parse GUID and/or Disabled data");
    }
    if (Settings.isExcludeDisabledCaches() && (cache.isDisabled() || cache.isArchived())) {
      continue;
    }
    cache.setGeocode(BaseUtils.getMatch(row,GCConstants.PATTERN_SEARCH_GEOCODE,true,1,cache.getGeocode(),true));
    cache.setType(CacheType.getByPattern(BaseUtils.getMatch(row,GCConstants.PATTERN_SEARCH_TYPE,true,1,null,true)));
    if (Settings.getLoadDirImg()) {
      final String direction=BaseUtils.getMatch(row,GCConstants.PATTERN_SEARCH_DIRECTION_DISTANCE,false,1,null,false);
      if (direction != null) {
        cache.setDirectionImg(direction);
      }
    }
    final String distance=BaseUtils.getMatch(row,GCConstants.PATTERN_SEARCH_DIRECTION_DISTANCE,false,2,null,false);
    if (distance != null) {
      cache.setDistance(DistanceParser.parseDistance(distance,Settings.isUseMetricUnits()));
    }
    final MatcherWrapper matcherDT=new MatcherWrapper(GCConstants.PATTERN_SEARCH_DIFFICULTY_TERRAIN,row);
    if (matcherDT.find()) {
      final Float difficulty=parseStars(matcherDT.group(1));
      if (difficulty != null) {
        cache.setDifficulty(difficulty);
      }
      final Float terrain=parseStars(matcherDT.group(3));
      if (terrain != null) {
        cache.setTerrain(terrain);
      }
    }
    final String container=BaseUtils.getMatch(row,GCConstants.PATTERN_SEARCH_CONTAINER,false,1,null,false);
    cache.setSize(CacheSize.getById(container));
    final MatcherWrapper matcherTbs=new MatcherWrapper(GCConstants.PATTERN_SEARCH_TRACKABLES,row);
    String inventoryPre=null;
    while (matcherTbs.find()) {
      if (matcherTbs.groupCount() > 0) {
        try {
          cache.setInventoryItems(Integer.parseInt(matcherTbs.group(1)));
        }
 catch (        NumberFormatException e) {
          Log.e("Error parsing trackables count",e);
        }
        inventoryPre=matcherTbs.group(2);
      }
    }
    if (StringUtils.isNotBlank(inventoryPre)) {
      final MatcherWrapper matcherTbsInside=new MatcherWrapper(GCConstants.PATTERN_SEARCH_TRACKABLESINSIDE,inventoryPre);
      while (matcherTbsInside.find()) {
        if (matcherTbsInside.groupCount() == 2 && matcherTbsInside.group(2) != null && !matcherTbsInside.group(2).equalsIgnoreCase("premium member only cache") && cache.getInventoryItems() <= 0) {
          cache.setInventoryItems(1);
        }
      }
    }
    cache.setPremiumMembersOnly(row.contains("/images/icons/16/premium_only.png"));
    cache.setFound(row.contains("/images/icons/16/found.png"));
    String result=BaseUtils.getMatch(row,GCConstants.PATTERN_SEARCH_ID,null);
    if (null != result) {
      cache.setCacheId(result);
      cids.add(cache.getCacheId());
    }
    try {
      result=BaseUtils.getMatch(row,GCConstants.PATTERN_SEARCH_FAVORITE,false,1,null,true);
      if (null != result) {
        cache.setFavoritePoints(Integer.parseInt(result));
      }
    }
 catch (    NumberFormatException e) {
      Log.w("GCParser.parseSearch: Failed to parse favorite count");
    }
    searchResult.addCache(cache);
  }
  try {
    String result=BaseUtils.getMatch(page,GCConstants.PATTERN_SEARCH_TOTALCOUNT,false,1,null,true);
    if (null != result) {
      searchResult.setTotal(Integer.parseInt(result));
    }
  }
 catch (  NumberFormatException e) {
    Log.w("GCParser.parseSearch: Failed to parse cache count");
  }
  String recaptchaText=null;
  if (thread != null && recaptchaChallenge != null) {
    if (thread.getText() == null) {
      thread.waitForUser();
    }
    recaptchaText=thread.getText();
  }
  if (!cids.isEmpty() && (Settings.isPremiumMember() || showCaptcha) && (recaptchaChallenge == null || StringUtils.isNotBlank(recaptchaText))) {
    Log.i("Trying to get .loc for " + cids.size() + " caches");
    try {
      final Parameters params=new Parameters("__EVENTTARGET","","__EVENTARGUMENT","");
      if (ArrayUtils.isNotEmpty(searchResult.viewstates)) {
        params.put("__VIEWSTATE",searchResult.viewstates[0]);
        if (searchResult.viewstates.length > 1) {
          for (int i=1; i < searchResult.viewstates.length; i++) {
            params.put("__VIEWSTATE" + i,searchResult.viewstates[i]);
          }
          params.put("__VIEWSTATEFIELDCOUNT",String.valueOf(searchResult.viewstates.length));
        }
      }
      for (      String cid : cids) {
        params.put("CID",cid);
      }
      if (recaptchaChallenge != null && StringUtils.isNotBlank(recaptchaText)) {
        params.put("recaptcha_challenge_field",recaptchaChallenge);
        params.put("recaptcha_response_field",recaptchaText);
      }
      params.put("ctl00$ContentBody$uxDownloadLoc","Download Waypoints");
      final String coordinates=Network.getResponseData(Network.postRequest("http://www.geocaching.com/seek/nearest.aspx",params),false);
      if (StringUtils.isNotBlank(coordinates)) {
        if (coordinates.contains("You have not agreed to the license agreement. The license agreement is required before you can start downloading GPX or LOC files from Geocaching.com")) {
          Log.i("User has not agreed to the license agreement. Can\'t download .loc file.");
          searchResult.setError(StatusCode.UNAPPROVED_LICENSE);
          return searchResult;
        }
      }
      LocParser.parseLoc(searchResult,coordinates);
    }
 catch (    Exception e) {
      Log.e("GCParser.parseSearch.CIDs",e);
    }
  }
  if (Settings.getLoadDirImg()) {
    final Set<Geocache> caches=searchResult.getCachesFromSearchResult(LoadFlags.LOAD_CACHE_OR_DB);
    for (    Geocache cache : caches) {
      if (cache.getCoords() == null && StringUtils.isNotEmpty(cache.getDirectionImg())) {
        DirectionImage.getDrawable(cache.getDirectionImg());
      }
    }
  }
  return searchResult;
}
