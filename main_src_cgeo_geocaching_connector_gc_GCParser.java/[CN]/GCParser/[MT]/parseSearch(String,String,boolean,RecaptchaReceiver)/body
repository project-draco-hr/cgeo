{
  if (StringUtils.isBlank(pageContent)) {
    Log.e("GCParser.parseSearch: No page given");
    return null;
  }
  final List<String> cids=new ArrayList<>();
  String page=pageContent;
  final SearchResult searchResult=new SearchResult();
  searchResult.setUrl(url);
  searchResult.viewstates=GCLogin.getViewstates(page);
  if (showCaptcha) {
    final String recaptchaJsParam=TextUtils.getMatch(page,GCConstants.PATTERN_SEARCH_RECAPTCHA,false,null);
    if (recaptchaJsParam != null) {
      recaptchaReceiver.setKey(recaptchaJsParam.trim());
      recaptchaReceiver.fetchChallenge();
    }
    if (recaptchaReceiver != null && StringUtils.isNotBlank(recaptchaReceiver.getChallenge())) {
      recaptchaReceiver.notifyNeed();
    }
  }
  if (!page.contains("SearchResultsTable")) {
    return searchResult;
  }
  int startPos=page.indexOf("<div id=\"ctl00_ContentBody_ResultsPanel\"");
  if (startPos == -1) {
    Log.e("GCParser.parseSearch: ID \"ctl00_ContentBody_dlResults\" not found on page");
    return null;
  }
  page=page.substring(startPos);
  startPos=page.indexOf('>');
  final int endPos=page.indexOf("ctl00_ContentBody_UnitTxt");
  if (startPos == -1 || endPos == -1) {
    Log.e("GCParser.parseSearch: ID \"ctl00_ContentBody_UnitTxt\" not found on page");
    return null;
  }
  page=page.substring(startPos + 1,endPos - startPos + 1);
  final String[] rows=StringUtils.splitByWholeSeparator(page,"<tr class=");
  final int rowsCount=rows.length;
  int excludedCaches=0;
  final ArrayList<Geocache> caches=new ArrayList<>();
  for (int z=1; z < rowsCount; z++) {
    final Geocache cache=new Geocache();
    final String row=rows[z];
    if (!row.contains("images/wpttypes")) {
      continue;
    }
    try {
      final MatcherWrapper matcherGuidAndDisabled=new MatcherWrapper(GCConstants.PATTERN_SEARCH_GUIDANDDISABLED,row);
      while (matcherGuidAndDisabled.find()) {
        if (matcherGuidAndDisabled.groupCount() > 0) {
          if (matcherGuidAndDisabled.group(2) != null) {
            cache.setName(Html.fromHtml(matcherGuidAndDisabled.group(2).trim()).toString());
          }
          if (matcherGuidAndDisabled.group(3) != null) {
            cache.setLocation(Html.fromHtml(matcherGuidAndDisabled.group(3).trim()).toString());
          }
          final String attr=matcherGuidAndDisabled.group(1);
          if (attr != null) {
            cache.setDisabled(attr.contains("Strike"));
            cache.setArchived(attr.contains("OldWarning"));
          }
        }
      }
    }
 catch (    final RuntimeException e) {
      Log.w("GCParser.parseSearch: Failed to parse GUID and/or Disabled data",e);
    }
    if (Settings.isExcludeDisabledCaches() && (cache.isDisabled() || cache.isArchived())) {
      excludedCaches++;
      continue;
    }
    cache.setGeocode(TextUtils.getMatch(row,GCConstants.PATTERN_SEARCH_GEOCODE,true,1,cache.getGeocode(),true));
    cache.setType(CacheType.getByPattern(TextUtils.getMatch(row,GCConstants.PATTERN_SEARCH_TYPE,null)));
    if (Settings.getLoadDirImg()) {
      final String direction=TextUtils.getMatch(row,GCConstants.PATTERN_SEARCH_DIRECTION_DISTANCE,false,null);
      if (direction != null) {
        cache.setDirectionImg(direction);
      }
    }
    final String distance=TextUtils.getMatch(row,GCConstants.PATTERN_SEARCH_DIRECTION_DISTANCE,false,2,null,false);
    if (distance != null) {
      cache.setDistance(DistanceParser.parseDistance(distance,!Settings.useImperialUnits()));
    }
    final MatcherWrapper matcherDT=new MatcherWrapper(GCConstants.PATTERN_SEARCH_DIFFICULTY_TERRAIN,row);
    if (matcherDT.find()) {
      final Float difficulty=parseStars(matcherDT.group(1));
      if (difficulty != null) {
        cache.setDifficulty(difficulty);
      }
      final Float terrain=parseStars(matcherDT.group(3));
      if (terrain != null) {
        cache.setTerrain(terrain);
      }
    }
    final String container=TextUtils.getMatch(row,GCConstants.PATTERN_SEARCH_CONTAINER,false,null);
    cache.setSize(CacheSize.getById(container));
    final String dateHidden=TextUtils.getMatch(row,GCConstants.PATTERN_SEARCH_HIDDEN_DATE,false,null);
    if (StringUtils.isNotBlank(dateHidden)) {
      try {
        final Date date=GCLogin.parseGcCustomDate(dateHidden);
        if (date != null) {
          cache.setHidden(date);
        }
      }
 catch (      final ParseException e) {
        Log.e("Error parsing event date from search",e);
      }
    }
    final MatcherWrapper matcherTbs=new MatcherWrapper(GCConstants.PATTERN_SEARCH_TRACKABLES,row);
    String inventoryPre=null;
    while (matcherTbs.find()) {
      if (matcherTbs.groupCount() > 0) {
        try {
          cache.setInventoryItems(Integer.parseInt(matcherTbs.group(1)));
        }
 catch (        final NumberFormatException e) {
          Log.e("Error parsing trackables count",e);
        }
        inventoryPre=matcherTbs.group(2);
      }
    }
    if (StringUtils.isNotBlank(inventoryPre)) {
      final MatcherWrapper matcherTbsInside=new MatcherWrapper(GCConstants.PATTERN_SEARCH_TRACKABLESINSIDE,inventoryPre);
      while (matcherTbsInside.find()) {
        if (matcherTbsInside.groupCount() == 2 && matcherTbsInside.group(2) != null && !matcherTbsInside.group(2).equalsIgnoreCase("premium member only cache") && cache.getInventoryItems() <= 0) {
          cache.setInventoryItems(1);
        }
      }
    }
    cache.setPremiumMembersOnly(row.contains("/images/icons/16/premium_only.png"));
    cache.setFound(row.contains("/images/icons/16/found.png") || row.contains("uxUserLogDate\" class=\"Success\""));
    String result=TextUtils.getMatch(row,GCConstants.PATTERN_SEARCH_ID,null);
    if (null != result) {
      cache.setCacheId(result);
      cids.add(cache.getCacheId());
    }
    try {
      result=getNumberString(TextUtils.getMatch(row,GCConstants.PATTERN_SEARCH_FAVORITE,false,1,null,true));
      if (null != result) {
        cache.setFavoritePoints(Integer.parseInt(result));
      }
    }
 catch (    final NumberFormatException e) {
      Log.w("GCParser.parseSearch: Failed to parse favorite count",e);
    }
    caches.add(cache);
  }
  searchResult.addAndPutInCache(caches);
  try {
    final String result=TextUtils.getMatch(page,GCConstants.PATTERN_SEARCH_TOTALCOUNT,false,1,null,true);
    if (null != result) {
      searchResult.setTotalCountGC(Integer.parseInt(result) - excludedCaches);
    }
  }
 catch (  final NumberFormatException e) {
    Log.w("GCParser.parseSearch: Failed to parse cache count",e);
  }
  String recaptchaText=null;
  if (recaptchaReceiver != null && StringUtils.isNotBlank(recaptchaReceiver.getChallenge())) {
    recaptchaReceiver.waitForUser();
    recaptchaText=recaptchaReceiver.getText();
  }
  if (!cids.isEmpty() && (Settings.isGCPremiumMember() || showCaptcha) && ((recaptchaReceiver == null || StringUtils.isBlank(recaptchaReceiver.getChallenge())) || StringUtils.isNotBlank(recaptchaText))) {
    Log.i("Trying to get .loc for " + cids.size() + " caches");
    try {
      final Parameters params=new Parameters("__EVENTTARGET","","__EVENTARGUMENT","");
      GCLogin.putViewstates(params,searchResult.viewstates);
      for (      final String cid : cids) {
        params.put("CID",cid);
      }
      if (StringUtils.isNotBlank(recaptchaText) && recaptchaReceiver != null) {
        params.put("recaptcha_challenge_field",recaptchaReceiver.getChallenge());
        params.put("recaptcha_response_field",recaptchaText);
      }
      params.put("ctl00$ContentBody$uxDownloadLoc","Download Waypoints");
      final String coordinates=Network.getResponseData(Network.postRequest("http://www.geocaching.com/seek/nearest.aspx",params),false);
      if (StringUtils.contains(coordinates,"You have not agreed to the license agreement. The license agreement is required before you can start downloading GPX or LOC files from Geocaching.com")) {
        Log.i("User has not agreed to the license agreement. Can\'t download .loc file.");
        searchResult.setError(StatusCode.UNAPPROVED_LICENSE);
        return searchResult;
      }
      LocParser.parseLoc(searchResult,coordinates);
    }
 catch (    final RuntimeException e) {
      Log.e("GCParser.parseSearch.CIDs",e);
    }
  }
  if (Settings.getLoadDirImg()) {
    final Set<Geocache> cachesReloaded=searchResult.getCachesFromSearchResult(LoadFlags.LOAD_CACHE_OR_DB);
    for (    final Geocache cache : cachesReloaded) {
      if (cache.getCoords() == null && StringUtils.isNotEmpty(cache.getDirectionImg())) {
        DirectionImage.getDrawable(cache.getDirectionImg());
      }
    }
  }
  return searchResult;
}
