{
  if (StringUtils.isBlank(page)) {
    Log.e("GCParser.parseTrackable: No page given");
    return null;
  }
  if (page.contains(GCConstants.ERROR_TB_DOES_NOT_EXIST) || page.contains(GCConstants.ERROR_TB_ARITHMETIC_OVERFLOW) || page.contains(GCConstants.ERROR_TB_ELEMENT_EXCEPTION)) {
    return null;
  }
  final Trackable trackable=new Trackable();
  trackable.forceSetBrand(TrackableBrand.TRAVELBUG);
  trackable.setGeocode(TextUtils.getMatch(page,GCConstants.PATTERN_TRACKABLE_GEOCODE,true,StringUtils.upperCase(possibleTrackingcode)));
  if (trackable.getGeocode() == null) {
    Log.e("GCParser.parseTrackable: could not figure out trackable geocode");
    return null;
  }
  trackable.setGuid(TextUtils.getMatch(page,GCConstants.PATTERN_TRACKABLE_GUID,true,trackable.getGuid()));
  final String iconUrl=TextUtils.getMatch(page,GCConstants.PATTERN_TRACKABLE_ICON,true,trackable.getIconUrl());
  trackable.setIconUrl(iconUrl.startsWith("/") ? "https://www.geocaching.com" + iconUrl : iconUrl);
  trackable.setName(Html.fromHtml(TextUtils.getMatch(page,GCConstants.PATTERN_TRACKABLE_NAME,true,"")).toString());
  if (StringUtils.isNotBlank(trackable.getName())) {
    trackable.setType(TextUtils.getMatch(page,GCConstants.PATTERN_TRACKABLE_TYPE,true,trackable.getType()));
  }
  try {
    final MatcherWrapper matcherOwner=new MatcherWrapper(GCConstants.PATTERN_TRACKABLE_OWNER,page);
    if (matcherOwner.find() && matcherOwner.groupCount() > 0) {
      trackable.setOwnerGuid(matcherOwner.group(1));
      trackable.setOwner(matcherOwner.group(2).trim());
    }
  }
 catch (  final RuntimeException e) {
    Log.w("GCParser.parseTrackable: Failed to parse trackable owner name",e);
  }
  trackable.setOrigin(TextUtils.getMatch(page,GCConstants.PATTERN_TRACKABLE_ORIGIN,true,trackable.getOrigin()));
  try {
    final MatcherWrapper matcherSpottedCache=new MatcherWrapper(GCConstants.PATTERN_TRACKABLE_SPOTTEDCACHE,page);
    if (matcherSpottedCache.find() && matcherSpottedCache.groupCount() > 0) {
      trackable.setSpottedGuid(matcherSpottedCache.group(1));
      trackable.setSpottedName(matcherSpottedCache.group(2).trim());
      trackable.setSpottedType(Trackable.SPOTTED_CACHE);
    }
    final MatcherWrapper matcherSpottedUser=new MatcherWrapper(GCConstants.PATTERN_TRACKABLE_SPOTTEDUSER,page);
    if (matcherSpottedUser.find() && matcherSpottedUser.groupCount() > 0) {
      trackable.setSpottedGuid(matcherSpottedUser.group(1));
      trackable.setSpottedName(matcherSpottedUser.group(2).trim());
      trackable.setSpottedType(Trackable.SPOTTED_USER);
    }
    if (TextUtils.matches(page,GCConstants.PATTERN_TRACKABLE_SPOTTEDUNKNOWN)) {
      trackable.setSpottedType(Trackable.SPOTTED_UNKNOWN);
    }
    if (TextUtils.matches(page,GCConstants.PATTERN_TRACKABLE_SPOTTEDOWNER)) {
      trackable.setSpottedType(Trackable.SPOTTED_OWNER);
    }
  }
 catch (  final RuntimeException e) {
    Log.w("GCParser.parseTrackable: Failed to parse trackable last known place",e);
  }
  final String releaseString=TextUtils.getMatch(page,GCConstants.PATTERN_TRACKABLE_RELEASES,false,null);
  if (releaseString != null) {
    try {
      trackable.setReleased(DATE_TB_IN_1.parse(releaseString));
    }
 catch (    final ParseException ignored) {
      if (trackable.getReleased() == null) {
        try {
          trackable.setReleased(DATE_TB_IN_2.parse(releaseString));
        }
 catch (        final ParseException e) {
          Log.e("Could not parse trackable release " + releaseString,e);
        }
      }
    }
  }
  final String distance=TextUtils.getMatch(page,GCConstants.PATTERN_TRACKABLE_DISTANCE,false,null);
  if (null != distance) {
    try {
      trackable.setDistance(DistanceParser.parseDistance(distance,!Settings.useImperialUnits()));
    }
 catch (    final NumberFormatException e) {
      Log.e("GCParser.parseTrackable: Failed to parse distance",e);
    }
  }
  trackable.setGoal(convertLinks(TextUtils.getMatch(page,GCConstants.PATTERN_TRACKABLE_GOAL,true,trackable.getGoal())));
  try {
    final MatcherWrapper matcherDetailsImage=new MatcherWrapper(GCConstants.PATTERN_TRACKABLE_DETAILSIMAGE,page);
    if (matcherDetailsImage.find() && matcherDetailsImage.groupCount() > 0) {
      final String image=StringUtils.trim(matcherDetailsImage.group(3));
      final String details=StringUtils.trim(matcherDetailsImage.group(4));
      if (StringUtils.isNotEmpty(image)) {
        trackable.setImage(StringUtils.replace(image,"/display/","/large/"));
      }
      if (StringUtils.isNotEmpty(details) && !StringUtils.equals(details,"No additional details available.")) {
        trackable.setDetails(convertLinks(details));
      }
    }
  }
 catch (  final RuntimeException e) {
    Log.w("GCParser.parseTrackable: Failed to parse trackable details & image",e);
  }
  if (StringUtils.isEmpty(trackable.getDetails()) && page.contains(GCConstants.ERROR_TB_NOT_ACTIVATED)) {
    trackable.setDetails(CgeoApplication.getInstance().getString(R.string.trackable_not_activated));
  }
  try {
    final MatcherWrapper matcherLogs=new MatcherWrapper(GCConstants.PATTERN_TRACKABLE_LOG,page);
    while (matcherLogs.find()) {
      long date=0;
      try {
        date=GCLogin.parseGcCustomDate(matcherLogs.group(2)).getTime();
      }
 catch (      final ParseException ignored) {
      }
      final LogEntry.Builder logDoneBuilder=new LogEntry.Builder().setAuthor(Html.fromHtml(matcherLogs.group(3)).toString().trim()).setDate(date).setLogType(LogType.getByIconName(matcherLogs.group(1))).setLog(matcherLogs.group(7).trim());
      if (matcherLogs.group(4) != null && matcherLogs.group(6) != null) {
        logDoneBuilder.setCacheGuid(matcherLogs.group(4));
        logDoneBuilder.setCacheName(matcherLogs.group(6));
      }
      final String logEntry=matcherLogs.group(0);
      final MatcherWrapper matcherLogImages=new MatcherWrapper(GCConstants.PATTERN_TRACKABLE_LOG_IMAGES,logEntry);
      while (matcherLogImages.find()) {
        final Image logImage=new Image.Builder().setUrl(matcherLogImages.group(1)).setTitle(matcherLogImages.group(2)).build();
        logDoneBuilder.addLogImage(logImage);
      }
      trackable.getLogs().add(logDoneBuilder.build());
    }
  }
 catch (  final Exception e) {
    Log.w("GCParser.parseCache: Failed to parse cache logs",e);
  }
  if (!StringUtils.equalsIgnoreCase(trackable.getGeocode(),possibleTrackingcode)) {
    trackable.setTrackingcode(possibleTrackingcode);
  }
  if (CgeoApplication.getInstance() != null) {
    DataStore.saveTrackable(trackable);
  }
  return trackable;
}
