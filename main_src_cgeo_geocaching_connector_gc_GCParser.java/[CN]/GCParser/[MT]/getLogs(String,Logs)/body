{
  if (userToken.isEmpty()) {
    Log.e("GCParser.loadLogsFromDetails: unable to extract userToken");
    return Observable.empty();
  }
  return Observable.defer(new Func0<Observable<LogEntry>>(){
    @Override public Observable<LogEntry> call(){
      final Parameters params=new Parameters("tkn",userToken,"idx","1","num",String.valueOf(GCConstants.NUMBER_OF_LOGS),"decrypt","false");
      if (logType != Logs.ALL) {
        params.add(logType.getParamName(),Boolean.toString(Boolean.TRUE));
      }
      final HttpResponse response=Network.getRequest("https://www.geocaching.com/seek/geocache.logbook",params);
      if (response == null) {
        Log.e("GCParser.loadLogsFromDetails: cannot log logs, response is null");
        return Observable.empty();
      }
      final int statusCode=response.getStatusLine().getStatusCode();
      if (statusCode != 200) {
        Log.e("GCParser.loadLogsFromDetails: error " + statusCode + " when requesting log information");
        return Observable.empty();
      }
      final InputStream responseStream=Network.getResponseStream(response);
      if (responseStream == null) {
        Log.e("GCParser.loadLogsFromDetails: unable to read whole response");
        return Observable.empty();
      }
      return parseLogs(logType != Logs.ALL,responseStream);
    }
  }
).subscribeOn(AndroidRxUtils.networkScheduler);
}
