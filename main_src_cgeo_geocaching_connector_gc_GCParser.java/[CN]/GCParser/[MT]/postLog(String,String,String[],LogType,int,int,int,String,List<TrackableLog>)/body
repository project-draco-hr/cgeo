{
  if (GCLogin.isEmpty(viewstates)) {
    Log.e("GCParser.postLog: No viewstate given");
    return new ImmutablePair<>(StatusCode.LOG_POST_ERROR,"");
  }
  if (StringUtils.isBlank(log)) {
    Log.e("GCParser.postLog: No log text given");
    return new ImmutablePair<>(StatusCode.NO_LOG_TEXT,"");
  }
  final String logInfo=log.replace("\n","\r\n").trim();
  Log.i("Trying to post log for cache #" + cacheid + " - action: "+ logType+ "; date: "+ year+ "."+ month+ "."+ day+ ", log: "+ logInfo+ "; trackables: "+ (trackables != null ? trackables.size() : "0"));
  final Parameters params=new Parameters("__EVENTTARGET","","__EVENTARGUMENT","","__LASTFOCUS","","ctl00$ContentBody$LogBookPanel1$ddLogType",Integer.toString(logType.id),"ctl00$ContentBody$LogBookPanel1$uxDateVisited",GCLogin.formatGcCustomDate(year,month,day),"ctl00$ContentBody$LogBookPanel1$uxDateVisited$Month",Integer.toString(month),"ctl00$ContentBody$LogBookPanel1$uxDateVisited$Day",Integer.toString(day),"ctl00$ContentBody$LogBookPanel1$uxDateVisited$Year",Integer.toString(year),"ctl00$ContentBody$LogBookPanel1$DateTimeLogged",String.format("%02d",month) + "/" + String.format("%02d",day)+ "/"+ String.format("%04d",year),"ctl00$ContentBody$LogBookPanel1$DateTimeLogged$Month",Integer.toString(month),"ctl00$ContentBody$LogBookPanel1$DateTimeLogged$Day",Integer.toString(day),"ctl00$ContentBody$LogBookPanel1$DateTimeLogged$Year",Integer.toString(year),"ctl00$ContentBody$LogBookPanel1$LogButton","Submit Log Entry","ctl00$ContentBody$LogBookPanel1$uxLogInfo",logInfo,"ctl00$ContentBody$LogBookPanel1$btnSubmitLog","Submit Log Entry","ctl00$ContentBody$LogBookPanel1$uxLogCreationSource","Old","ctl00$ContentBody$uxVistOtherListingGC","");
  GCLogin.putViewstates(params,viewstates);
  if (trackables != null && !trackables.isEmpty()) {
    final StringBuilder hdnSelected=new StringBuilder();
    for (    final TrackableLog tb : trackables) {
      if (tb.action != LogTypeTrackable.DO_NOTHING) {
        hdnSelected.append(Integer.toString(tb.id));
        hdnSelected.append(tb.action.action);
        hdnSelected.append(',');
      }
    }
    params.put("ctl00$ContentBody$LogBookPanel1$uxTrackables$hdnSelectedActions",hdnSelected.toString(),"ctl00$ContentBody$LogBookPanel1$uxTrackables$hdnCurrentFilter","");
  }
  final String uri=new Uri.Builder().scheme("http").authority("www.geocaching.com").path("/seek/log.aspx").encodedQuery("ID=" + cacheid).build().toString();
  final GCLogin gcLogin=GCLogin.getInstance();
  String page=gcLogin.postRequestLogged(uri,params);
  if (!gcLogin.getLoginStatus(page)) {
    Log.e("GCParser.postLog: Cannot log in geocaching");
    return new ImmutablePair<>(StatusCode.NOT_LOGGED_IN,"");
  }
  final MatcherWrapper matcher=new MatcherWrapper(GCConstants.PATTERN_MAINTENANCE,page);
  try {
    if (matcher.find() && matcher.groupCount() > 0) {
      final String[] viewstatesConfirm=GCLogin.getViewstates(page);
      if (GCLogin.isEmpty(viewstatesConfirm)) {
        Log.e("GCParser.postLog: No viewstate for confirm log");
        return new ImmutablePair<>(StatusCode.LOG_POST_ERROR,"");
      }
      params.clear();
      GCLogin.putViewstates(params,viewstatesConfirm);
      params.put("__EVENTTARGET","");
      params.put("__EVENTARGUMENT","");
      params.put("__LASTFOCUS","");
      params.put("ctl00$ContentBody$LogBookPanel1$btnConfirm","Yes");
      params.put("ctl00$ContentBody$LogBookPanel1$uxLogInfo",logInfo);
      params.put("ctl00$ContentBody$uxVistOtherListingGC","");
      if (trackables != null && !trackables.isEmpty()) {
        final StringBuilder hdnSelected=new StringBuilder();
        for (        final TrackableLog tb : trackables) {
          final String action=Integer.toString(tb.id) + tb.action.action;
          final StringBuilder paramText=new StringBuilder("ctl00$ContentBody$LogBookPanel1$uxTrackables$repTravelBugs$ctl");
          if (tb.ctl < 10) {
            paramText.append('0');
          }
          paramText.append(tb.ctl).append("$ddlAction");
          params.put(paramText.toString(),action);
          if (tb.action != LogTypeTrackable.DO_NOTHING) {
            hdnSelected.append(action);
            hdnSelected.append(',');
          }
        }
        params.put("ctl00$ContentBody$LogBookPanel1$uxTrackables$hdnSelectedActions",hdnSelected.toString());
        params.put("ctl00$ContentBody$LogBookPanel1$uxTrackables$hdnCurrentFilter","");
      }
      page=Network.getResponseData(Network.postRequest(uri,params));
    }
  }
 catch (  final RuntimeException e) {
    Log.e("GCParser.postLog.confim",e);
  }
  if (page == null) {
    Log.e("GCParser.postLog: didn't get response");
    return new ImmutablePair<>(StatusCode.LOG_POST_ERROR,"");
  }
  try {
    final MatcherWrapper matcherOk=new MatcherWrapper(GCConstants.PATTERN_OK1,page);
    if (matcherOk.find()) {
      Log.i("Log successfully posted to cache #" + cacheid);
      if (geocode != null) {
        DataStore.saveVisitDate(geocode);
      }
      gcLogin.getLoginStatus(page);
      if (gcLogin.getActualCachesFound() >= 0) {
        gcLogin.setActualCachesFound(gcLogin.getActualCachesFound() + (logType.isFoundLog() ? 1 : 0));
      }
      final String logID=TextUtils.getMatch(page,GCConstants.PATTERN_LOG_IMAGE_UPLOAD,"");
      return new ImmutablePair<>(StatusCode.NO_ERROR,logID);
    }
  }
 catch (  final Exception e) {
    Log.e("GCParser.postLog.check",e);
  }
  Log.e("GCParser.postLog: Failed to post log because of unknown error");
  return new ImmutablePair<>(StatusCode.LOG_POST_ERROR,"");
}
