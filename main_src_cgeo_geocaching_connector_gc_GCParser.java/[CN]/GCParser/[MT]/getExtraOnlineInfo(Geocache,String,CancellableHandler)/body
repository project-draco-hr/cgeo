{
  if (CancellableHandler.isCancelled(handler)) {
    return;
  }
  CancellableHandler.sendLoadProgressDetail(handler,R.string.cache_dialog_loading_details_status_logs);
  final String userToken=parseUserToken(page);
  final Observable<LogEntry> logs=getLogs(userToken,Logs.ALL);
  final Observable<LogEntry> ownLogs=getLogs(userToken,Logs.OWN).cache();
  final Observable<LogEntry> specialLogs=Settings.isFriendLogsWanted() ? Observable.merge(getLogs(userToken,Logs.FRIENDS),ownLogs) : Observable.<LogEntry>empty();
  final Observable<List<LogEntry>> mergedLogs=Observable.zip(logs.toList(),specialLogs.toList(),new Func2<List<LogEntry>,List<LogEntry>,List<LogEntry>>(){
    @Override public List<LogEntry> call(    final List<LogEntry> logEntries,    final List<LogEntry> specialLogEntries){
      mergeFriendsLogs(logEntries,specialLogEntries);
      return logEntries;
    }
  }
).cache();
  mergedLogs.subscribe(new Action1<List<LogEntry>>(){
    @Override public void call(    final List<LogEntry> logEntries){
      DataStore.saveLogs(cache.getGeocode(),logEntries);
    }
  }
);
  if (cache.isFound() && cache.getVisitedDate() == 0) {
    ownLogs.subscribe(new Action1<LogEntry>(){
      @Override public void call(      final LogEntry logEntry){
        if (logEntry.getType().isFoundLog()) {
          cache.setVisitedDate(logEntry.date);
        }
      }
    }
);
  }
  if (Settings.isRatingWanted() && !CancellableHandler.isCancelled(handler)) {
    CancellableHandler.sendLoadProgressDetail(handler,R.string.cache_dialog_loading_details_status_gcvote);
    final GCVoteRating rating=GCVote.getRating(cache.getGuid(),cache.getGeocode());
    if (rating != null) {
      cache.setRating(rating.getRating());
      cache.setVotes(rating.getVotes());
      cache.setMyVote(rating.getMyVote());
    }
  }
  mergedLogs.toCompletable().await();
}
