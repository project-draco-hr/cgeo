{
  if (resultCode == RESULT_CANCELED) {
    showToast(getResources().getString(R.string.info_select_logimage_cancelled));
    return;
  }
  if (resultCode != RESULT_OK) {
    showFailure();
    return;
  }
  if (data != null) {
    final Uri selectedImage=data.getData();
    if (Build.VERSION.SDK_INT < VERSION_CODES.KITKAT) {
      final String[] filePathColumn={MediaColumns.DATA};
      Cursor cursor=null;
      try {
        cursor=getContentResolver().query(selectedImage,filePathColumn,null,null,null);
        if (cursor == null) {
          showFailure();
          return;
        }
        cursor.moveToFirst();
        final int columnIndex=cursor.getColumnIndex(filePathColumn[0]);
        final String filePath=cursor.getString(columnIndex);
        if (StringUtils.isBlank(filePath)) {
          showFailure();
          return;
        }
        image=new Image.Builder().setUrl(filePath).build();
      }
 catch (      final Exception e) {
        Log.e("ImageSelectActivity.onActivityResult",e);
        showFailure();
      }
 finally {
        if (cursor != null) {
          cursor.close();
        }
      }
      Log.d("SELECT IMAGE data = " + data.toString());
    }
 else {
      InputStream input=null;
      OutputStream output=null;
      try {
        input=getContentResolver().openInputStream(selectedImage);
        final File outputFile=ImageUtils.getOutputImageFile();
        output=new FileOutputStream(outputFile);
        LocalStorage.copy(input,output);
        image=new Image.Builder().setUrl(outputFile).build();
      }
 catch (      final FileNotFoundException e) {
        Log.e("ImageSelectActivity.onStartResult",e);
      }
 finally {
        IOUtils.closeQuietly(input);
        IOUtils.closeQuietly(output);
      }
    }
  }
  if (requestCode == SELECT_NEW_IMAGE) {
    showToast(getResources().getString(R.string.info_stored_image) + '\n' + image.getUrl());
  }
  loadImagePreview();
}
