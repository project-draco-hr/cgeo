{
  Log.d(Settings.tag,"GCBase.searchByViewport" + viewport.toString());
  String referer=GCConstants.URL_LIVE_MAP;
  final SearchResult searchResult=new SearchResult();
  searchResult.setUrl(referer + "?ll=" + viewport.getCenter().getLatitude()+ ","+ viewport.getCenter().getLongitude());
  if (strategy.flags.contains(StrategyFlag.LOAD_TILES)) {
    final Set<Tile> tiles=getTilesForViewport(viewport);
    for (    Tile tile : tiles) {
      if (!tileCache.containsKey(tile.hashCode())) {
        StringBuilder url=new StringBuilder();
        url.append("?x=").append(tile.getX()).append("&y=").append(tile.getY()).append("&z=").append(tile.getZoomlevel());
        if (tokens != null) {
          url.append("&k=").append(tokens[0]);
          url.append("&st=").append(tokens[1]);
        }
        url.append("&ep=1");
        if (Settings.isExcludeMyCaches()) {
          url.append("&hf=1").append("&hh=1");
        }
        if (Settings.getCacheType() == CacheType.TRADITIONAL) {
          url.append("&ect=9,5,3,6,453,13,1304,137,11,4,8,1858");
        }
        if (Settings.getCacheType() == CacheType.MULTI) {
          url.append("&ect=9,5,2,6,453,13,1304,137,11,4,8,1858");
        }
        if (Settings.getCacheType() == CacheType.MYSTERY) {
          url.append("&ect=9,5,3,6,453,13,1304,137,11,4,2,1858");
        }
        if (tile.getZoomlevel() != 14) {
          url.append("&_=").append(String.valueOf(System.currentTimeMillis()));
        }
        final String urlString=url.toString();
        Bitmap bitmap=Tile.requestMapTile(GCConstants.URL_MAP_TILE + urlString,referer);
        if (bitmap.getWidth() != Tile.TILE_SIZE || bitmap.getHeight() != Tile.TILE_SIZE) {
          bitmap.recycle();
          bitmap=null;
        }
        String data=Tile.requestMapInfo(GCConstants.URL_MAP_INFO + urlString,referer);
        if (StringUtils.isEmpty(data)) {
          Log.e(Settings.tag,"GCBase.searchByViewport: No data from server for tile (" + tile.getX() + "/"+ tile.getY()+ ")");
        }
 else {
          final SearchResult search=parseMapJSON(data,tile,bitmap,strategy);
          if (search == null || CollectionUtils.isEmpty(search.getGeocodes())) {
            Log.e(Settings.tag,"GCBase.searchByViewport: No cache parsed for viewport " + viewport);
          }
 else {
            searchResult.addGeocodes(search.getGeocodes());
          }
          tileCache.put(tile.hashCode(),tile);
        }
        if (bitmap != null) {
          bitmap.recycle();
        }
      }
    }
  }
  if (strategy.flags.contains(StrategyFlag.SEARCH_NEARBY)) {
    Geopoint center=viewport.getCenter();
    if ((lastSearchViewport == null) || !lastSearchViewport.isInViewport(center)) {
      SearchResult search=cgBase.searchByCoords(null,center,Settings.getCacheType(),false);
      if (search != null) {
        List<Number> bounds=cgeoapplication.getInstance().getBounds(search.getGeocodes());
        int minLat=(int)((Double)bounds.get(1) * 1e6);
        int maxLat=(int)((Double)bounds.get(2) * 1e6);
        int maxLon=(int)((Double)bounds.get(3) * 1e6);
        int minLon=(int)((Double)bounds.get(4) * 1e6);
        lastSearchViewport=new Viewport(minLat,maxLat,minLon,maxLon);
        searchResult.addGeocodes(search.getGeocodes());
      }
    }
  }
  return searchResult;
}
