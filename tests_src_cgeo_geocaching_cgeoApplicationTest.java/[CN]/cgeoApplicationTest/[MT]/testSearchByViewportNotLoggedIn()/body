{
  ImmutablePair<String,String> login=Settings.getLogin();
  String memberStatus=Settings.getMemberStatus();
  Strategy strategy=Settings.getLiveMapStrategy();
  Strategy testStrategy=Strategy.FAST;
  Settings.setLiveMapStrategy(testStrategy);
  try {
    final String[] tokens=null;
    MockedCache cache=new GC2CJPF();
    deleteCacheFromDBAndLogout(cache.getGeocode());
    GCBase.removeFromTileCache(cache);
    Viewport viewport=new Viewport(cache,0.003,0.003);
    SearchResult search=ConnectorFactory.searchByViewport(viewport,tokens);
    assertNotNull(search);
    assertTrue(search.getGeocodes().contains(cache.getGeocode()));
    cgCache cacheFromViewport=cgeoapplication.getInstance().loadCache(cache.getGeocode(),LoadFlags.LOAD_CACHE_OR_DB);
    Log.d("cgeoApplicationTest.testSearchByViewportNotLoggedIn: Coords expected = " + cache.getCoords());
    Log.d("cgeoApplicationTest.testSearchByViewportNotLoggedIn: Coords actual = " + cacheFromViewport.getCoords());
    assertFalse(cache.getCoords().isEqualTo(cacheFromViewport.getCoords(),1e-3));
    assertEquals(testStrategy == Strategy.DETAILED,cacheFromViewport.isReliableLatLon());
    cache=new GC2JVEH();
    deleteCacheFromDBAndLogout(cache.getGeocode());
    viewport=new Viewport(cache,0.003,0.003);
    search=ConnectorFactory.searchByViewport(viewport,tokens);
    assertNotNull(search);
    assertEquals(testStrategy == Strategy.DETAILED,search.getGeocodes().contains(cache.getGeocode()));
  }
  finally {
    Settings.setLogin(login.left,login.right);
    Settings.setMemberStatus(memberStatus);
    Login.login();
    Settings.setLiveMapStrategy(strategy);
  }
}
