{
  final int scale=width <= GOOGLE_MAPS_MAX_SIZE ? 1 : 2;
  final float aspectRatio=width / (float)height;
  final int requestWidth=Math.min(width / scale,GOOGLE_MAPS_MAX_SIZE);
  final int requestHeight=(aspectRatio > 1) ? Math.round(requestWidth / aspectRatio) : requestWidth;
  final int requestZoom=Math.min((scale == 2) ? zoom + 1 : zoom,GOOGLE_MAX_ZOOM);
  return checkDownloadPermission(Completable.defer(new Func0<Completable>(){
    @Override public Completable call(){
      final Parameters params=new Parameters("center",latlonMap,"zoom",String.valueOf(requestZoom),"size",String.valueOf(requestWidth) + 'x' + String.valueOf(requestHeight),"scale",String.valueOf(scale),"maptype",mapType,"markers","icon:" + markerUrl + '|'+ shadow+ latlonMap,"sensor","false");
      if (waypoints != null) {
        params.addAll(waypoints);
      }
      try {
        final Response httpResponse=Network.getRequest(GOOGLE_STATICMAP_URL,params).toBlocking().value();
        final int statusCode=httpResponse.code();
        if (statusCode != 200) {
          Log.d("StaticMapsProvider.downloadMap: httpResponseCode = " + statusCode);
          if (statusCode == 403) {
            last403=System.currentTimeMillis();
          }
          return Completable.complete();
        }
        final File file=getMapFile(geocode,prefix,true);
        if (LocalStorage.saveEntityToFile(httpResponse,file)) {
          final long fileSize=file.length();
          if (fileSize < MIN_MAP_IMAGE_BYTES) {
            FileUtils.deleteIgnoringFailure(file);
          }
        }
      }
 catch (      final Exception ignored) {
        Log.e("StaticMapsProvider.downloadMap: error");
      }
      return Completable.complete();
    }
  }
).subscribeOn(AndroidRxUtils.networkScheduler));
}
