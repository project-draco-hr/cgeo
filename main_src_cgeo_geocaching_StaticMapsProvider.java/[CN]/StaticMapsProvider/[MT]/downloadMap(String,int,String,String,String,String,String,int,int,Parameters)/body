{
  final int scale=width <= GOOGLE_MAPS_MAX_SIZE ? 1 : 2;
  final float aspectRatio=width / (float)height;
  final int requestWidth=Math.min(width / scale,GOOGLE_MAPS_MAX_SIZE);
  final int requestHeight=(aspectRatio > 1) ? Math.round(requestWidth / aspectRatio) : requestWidth;
  final int requestZoom=Math.min((scale == 2) ? zoom + 1 : zoom,GOOGLE_MAX_ZOOM);
  return checkDownloadPermission(Observable.defer(new Func0<Observable<String>>(){
    @Override public Observable<String> call(){
      final Parameters params=new Parameters("center",latlonMap,"zoom",String.valueOf(requestZoom),"size",String.valueOf(requestWidth) + 'x' + String.valueOf(requestHeight),"scale",String.valueOf(scale),"maptype",mapType,"markers","icon:" + markerUrl + '|'+ shadow+ latlonMap,"sensor","false");
      if (waypoints != null) {
        params.addAll(waypoints);
      }
      final HttpResponse httpResponse=Network.getRequest(GOOGLE_STATICMAP_URL,params);
      if (httpResponse == null) {
        Log.e("StaticMapsProvider.downloadMap: httpResponse is null");
        return Observable.just(prefix);
      }
      final int statusCode=httpResponse.getStatusLine().getStatusCode();
      if (statusCode != 200) {
        Log.d("StaticMapsProvider.downloadMap: httpResponseCode = " + statusCode);
        if (statusCode == 403) {
          last403=System.currentTimeMillis();
        }
        return Observable.just(prefix);
      }
      final File file=getMapFile(geocode,prefix,true);
      if (LocalStorage.saveEntityToFile(httpResponse,file)) {
        final long fileSize=file.length();
        if (fileSize < MIN_MAP_IMAGE_BYTES) {
          FileUtils.deleteIgnoringFailure(file);
        }
      }
      return Observable.just(prefix);
    }
  }
).subscribeOn(AndroidRxUtils.networkScheduler));
}
