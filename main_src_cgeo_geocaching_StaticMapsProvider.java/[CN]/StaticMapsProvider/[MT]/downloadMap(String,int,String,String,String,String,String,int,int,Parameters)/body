{
  int scale=1;
  if (width > GOOGLE_MAPS_MAX_SIZE) {
    scale=2;
  }
  final float aspectRatio=width / height;
  final int requestWidth=Math.min(width / scale,GOOGLE_MAPS_MAX_SIZE);
  final int requestHeight=(aspectRatio > 1) ? Math.round(requestWidth / aspectRatio) : requestWidth;
  final int requestScale=scale;
  final int requestZoom=Math.min((scale == 2) ? zoom + 1 : zoom,GOOGLE_MAX_ZOOM);
  return Async.fromAction(new Action0(){
    @Override public void call(){
      final Parameters params=new Parameters("center",latlonMap,"zoom",String.valueOf(requestZoom),"size",String.valueOf(requestWidth) + 'x' + String.valueOf(requestHeight),"scale",String.valueOf(requestScale),"maptype",mapType,"markers","icon:" + markerUrl + '|'+ shadow+ latlonMap,"sensor","false");
      if (waypoints != null) {
        params.addAll(waypoints);
      }
      final HttpResponse httpResponse=Network.getRequest(GOOGLE_STATICMAP_URL,params);
      if (httpResponse == null) {
        Log.e("StaticMapsProvider.downloadMap: httpResponse is null");
        return;
      }
      if (httpResponse.getStatusLine().getStatusCode() != 200) {
        Log.d("StaticMapsProvider.downloadMap: httpResponseCode = " + httpResponse.getStatusLine().getStatusCode());
        return;
      }
      final File file=getMapFile(geocode,prefix,true);
      if (LocalStorage.saveEntityToFile(httpResponse,file)) {
        final long fileSize=file.length();
        if (fileSize < MIN_MAP_IMAGE_BYTES) {
          FileUtils.deleteIgnoringFailure(file);
        }
      }
    }
  }
,prefix,Schedulers.io());
}
