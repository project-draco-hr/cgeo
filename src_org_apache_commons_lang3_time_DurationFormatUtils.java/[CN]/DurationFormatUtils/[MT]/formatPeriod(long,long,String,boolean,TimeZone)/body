{
  Token[] tokens=lexx(format);
  Calendar start=Calendar.getInstance(timezone);
  start.setTime(new Date(startMillis));
  Calendar end=Calendar.getInstance(timezone);
  end.setTime(new Date(endMillis));
  int milliseconds=end.get(Calendar.MILLISECOND) - start.get(Calendar.MILLISECOND);
  int seconds=end.get(Calendar.SECOND) - start.get(Calendar.SECOND);
  int minutes=end.get(Calendar.MINUTE) - start.get(Calendar.MINUTE);
  int hours=end.get(Calendar.HOUR_OF_DAY) - start.get(Calendar.HOUR_OF_DAY);
  int days=end.get(Calendar.DAY_OF_MONTH) - start.get(Calendar.DAY_OF_MONTH);
  int months=end.get(Calendar.MONTH) - start.get(Calendar.MONTH);
  int years=end.get(Calendar.YEAR) - start.get(Calendar.YEAR);
  while (milliseconds < 0) {
    milliseconds+=1000;
    seconds-=1;
  }
  while (seconds < 0) {
    seconds+=60;
    minutes-=1;
  }
  while (minutes < 0) {
    minutes+=60;
    hours-=1;
  }
  while (hours < 0) {
    hours+=24;
    days-=1;
  }
  if (Token.containsTokenWithValue(tokens,M)) {
    while (days < 0) {
      days+=start.getActualMaximum(Calendar.DAY_OF_MONTH);
      months-=1;
      start.add(Calendar.MONTH,1);
    }
    while (months < 0) {
      months+=12;
      years-=1;
    }
    if (!Token.containsTokenWithValue(tokens,y) && years != 0) {
      while (years != 0) {
        months+=12 * years;
        years=0;
      }
    }
  }
 else {
    if (!Token.containsTokenWithValue(tokens,y)) {
      int target=end.get(Calendar.YEAR);
      if (months < 0) {
        target-=1;
      }
      while ((start.get(Calendar.YEAR) != target)) {
        days+=start.getActualMaximum(Calendar.DAY_OF_YEAR) - start.get(Calendar.DAY_OF_YEAR);
        if (start instanceof GregorianCalendar && start.get(Calendar.MONTH) == Calendar.FEBRUARY && start.get(Calendar.DAY_OF_MONTH) == 29) {
          days+=1;
        }
        start.add(Calendar.YEAR,1);
        days+=start.get(Calendar.DAY_OF_YEAR);
      }
      years=0;
    }
    while (start.get(Calendar.MONTH) != end.get(Calendar.MONTH)) {
      days+=start.getActualMaximum(Calendar.DAY_OF_MONTH);
      start.add(Calendar.MONTH,1);
    }
    months=0;
    while (days < 0) {
      days+=start.getActualMaximum(Calendar.DAY_OF_MONTH);
      months-=1;
      start.add(Calendar.MONTH,1);
    }
  }
  if (!Token.containsTokenWithValue(tokens,d)) {
    hours+=24 * days;
    days=0;
  }
  if (!Token.containsTokenWithValue(tokens,H)) {
    minutes+=60 * hours;
    hours=0;
  }
  if (!Token.containsTokenWithValue(tokens,m)) {
    seconds+=60 * minutes;
    minutes=0;
  }
  if (!Token.containsTokenWithValue(tokens,s)) {
    milliseconds+=1000 * seconds;
    seconds=0;
  }
  return format(tokens,years,months,days,hours,minutes,seconds,milliseconds,padWithZeros);
}
