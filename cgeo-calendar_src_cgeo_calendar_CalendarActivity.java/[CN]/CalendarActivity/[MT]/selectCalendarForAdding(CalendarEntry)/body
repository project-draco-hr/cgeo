{
  final String[] projection=new String[]{"_id","displayName"};
  final Uri calendarProvider=Compatibility.getCalendarProviderURI();
  final Cursor cursor=managedQuery(calendarProvider,projection,"selected=1",null,null);
  if (cursor == null || cursor.getCount() <= 0) {
    showToast(R.string.event_fail);
    finish();
    return;
  }
  final SparseArray<String> calendars=new SparseArray<>();
  cursor.moveToFirst();
  final int indexId=cursor.getColumnIndex("_id");
  final int indexName=cursor.getColumnIndex("displayName");
  do {
    final String idString=cursor.getString(indexId);
    if (idString != null) {
      try {
        int id=Integer.parseInt(idString);
        final String calName=cursor.getString(indexName);
        if (id > 0 && calName != null) {
          calendars.put(id,calName);
        }
      }
 catch (      NumberFormatException e) {
        Log.e(LOG_TAG,"CalendarActivity.selectCalendarForAdding",e);
      }
    }
  }
 while (cursor.moveToNext());
  if (calendars.size() == 0) {
    showToast(R.string.event_fail);
    finish();
    return;
  }
  final String[] items=new String[calendars.size()];
  for (int i=0; i < calendars.size(); i++) {
    items[i]=calendars.valueAt(i);
  }
  final AlertDialog.Builder builder=new AlertDialog.Builder(this);
  builder.setTitle(R.string.calendars);
  builder.setItems(items,new DialogInterface.OnClickListener(){
    @Override public void onClick(    DialogInterface dialog,    int item){
      final int calendarId=calendars.keyAt(item);
      new AddEntry(entry,CalendarActivity.this,calendarId).addEntryToCalendar();
      finish();
    }
  }
);
  builder.setOnCancelListener(new DialogInterface.OnCancelListener(){
    @Override public void onCancel(    DialogInterface dialog){
      finish();
    }
  }
);
  builder.create().show();
}
