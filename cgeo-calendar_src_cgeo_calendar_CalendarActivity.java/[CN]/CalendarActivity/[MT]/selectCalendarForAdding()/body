{
  final String[] projection=new String[]{"_id","displayName"};
  final Uri calendarProvider=Compatibility.getCalendarProviderURI();
  final Cursor cursor=managedQuery(calendarProvider,projection,"selected=1",null,null);
  final Map<Integer,String> calendars=new HashMap<Integer,String>();
  if (cursor != null) {
    if (cursor.getCount() > 0) {
      cursor.moveToFirst();
      final int indexId=cursor.getColumnIndex("_id");
      final int indexName=cursor.getColumnIndex("displayName");
      do {
        final String idString=cursor.getString(indexId);
        if (idString != null) {
          try {
            int id=Integer.parseInt(idString);
            final String calName=cursor.getString(indexName);
            if (id > 0 && calName != null) {
              calendars.put(id,calName);
            }
          }
 catch (          NumberFormatException e) {
            e.printStackTrace();
          }
        }
      }
 while (cursor.moveToNext());
    }
    cursor.close();
  }
  if (calendars.isEmpty()) {
    return;
  }
  final CharSequence[] items=calendars.values().toArray(new CharSequence[calendars.size()]);
  final AlertDialog.Builder builder=new AlertDialog.Builder(this);
  builder.setTitle(R.string.calendars);
  builder.setItems(items,new DialogInterface.OnClickListener(){
    public void onClick(    DialogInterface dialog,    int item){
      final Integer[] keys=calendars.keySet().toArray(new Integer[calendars.size()]);
      final Integer calendarId=keys[item];
      addToCalendar(calendarId);
    }
  }
);
  builder.create().show();
}
