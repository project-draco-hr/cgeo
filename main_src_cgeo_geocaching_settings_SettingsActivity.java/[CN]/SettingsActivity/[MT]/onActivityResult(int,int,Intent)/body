{
  super.onActivityResult(requestCode,resultCode,data);
  if (resultCode != RESULT_OK) {
    return;
  }
switch (requestCode) {
case SELECT_MAPFILE_REQUEST:
    if (data.hasExtra(Intents.EXTRA_MAP_FILE)) {
      final String mapFile=data.getStringExtra(Intents.EXTRA_MAP_FILE);
      Settings.setMapFile(mapFile);
      if (!Settings.isValidMapFile(Settings.getMapFile())) {
        showToast(res.getString(R.string.warn_invalid_mapfile));
      }
    }
  updateMapSourceMenu();
initMapDirectoryEdittext(true);
break;
case SELECT_GPX_EXPORT_REQUEST:
checkDirectory(resultCode,data,R.id.gpx_exportdir,new RunnableWithArgument<String>(){
@Override public void run(String directory){
Settings.setGpxExportDir(directory);
}
}
);
break;
case SELECT_GPX_IMPORT_REQUEST:
checkDirectory(resultCode,data,R.id.gpx_importdir,new RunnableWithArgument<String>(){
@Override public void run(String directory){
Settings.setGpxImportDir(directory);
}
}
);
break;
case SELECT_THEMEFOLDER_REQUEST:
checkDirectory(resultCode,data,R.id.themefolder,new RunnableWithArgument<String>(){
@Override public void run(String directory){
Settings.setCustomRenderThemeBaseFolder(directory);
}
}
);
break;
default :
throw new IllegalArgumentException();
}
}
