{
  return Observable.defer(new Func0<Observable<Address>>(){
    @Override public Observable<Address> call(){
      if (!Settings.isGCConnectorActive()) {
        return Observable.error(new RuntimeException("geocaching.com connector is not active"));
      }
      final ObjectNode response=Network.requestJSON("https://www.geocaching.com/api/geocode",new Parameters("q",address));
      if (response == null || !StringUtils.equalsIgnoreCase(response.path("status").asText(),"success")) {
        return Observable.error(new RuntimeException("unable to use geocaching.com geocoder"));
      }
      final JsonNode data=response.path("data");
      final Address geocodedAddress=new Address(Locale.getDefault());
      try {
        geocodedAddress.setLatitude(data.get("lat").asDouble());
        geocodedAddress.setLongitude(data.get("lng").asDouble());
        geocodedAddress.setAddressLine(0,address);
        return Observable.just(geocodedAddress);
      }
 catch (      final Exception e) {
        Log.e("unable to decode answer from geocaching.com geocoder",e);
        return Observable.error(e);
      }
    }
  }
).subscribeOn(RxUtils.networkScheduler);
}
