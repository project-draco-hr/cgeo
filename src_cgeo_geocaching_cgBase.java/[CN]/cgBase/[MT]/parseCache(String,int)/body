{
  if (page == null || page.length() == 0) {
    Log.e(cgSettings.tag,"cgeoBase.parseCache: No page given");
    return null;
  }
  final Pattern patternGeocode=Pattern.compile("<meta name=\"og:url\" content=\"[^\"]+/(GC[0-9A-Z]+)\"[^>]*>",Pattern.CASE_INSENSITIVE | Pattern.MULTILINE);
  final Pattern patternCacheId=Pattern.compile("/seek/log\\.aspx\\?ID=(\\d+)",Pattern.CASE_INSENSITIVE | Pattern.MULTILINE);
  final Pattern patternCacheGuid=Pattern.compile(Pattern.quote("&wid=") + "([0-9a-z\\-]+)" + Pattern.quote("&"),Pattern.CASE_INSENSITIVE | Pattern.MULTILINE);
  final Pattern patternType=Pattern.compile("<img src=\"[^\"]*/WptTypes/\\d+\\.gif\" alt=\"([^\"]+)\" (title=\"[^\"]*\" )?width=\"32\" height=\"32\"[^>]*>",Pattern.CASE_INSENSITIVE | Pattern.MULTILINE);
  final Pattern patternName=Pattern.compile("<h2[^>]*>[^<]*<span id=\"ctl00_ContentBody_CacheName\">([^<]+)<\\/span>[^<]*<\\/h2>",Pattern.CASE_INSENSITIVE | Pattern.MULTILINE);
  final Pattern patternSize=Pattern.compile("<div class=\"CacheSize[^\"]*\">[^<]*<p[^>]*>[^S]*Size[^:]*:[^<]*<span[^>]*>[^<]*<img src=\"[^\"]*/icons/container/[a-z_]+\\.gif\" alt=\"Size: ([^\"]+)\"[^>]*>[^<]*<small>[^<]*</small>[^<]*</span>[^<]*</p>",Pattern.CASE_INSENSITIVE | Pattern.MULTILINE);
  final Pattern patternDifficulty=Pattern.compile("<span id=\"ctl00_ContentBody_uxLegendScale\"[^>]*>[^<]*<img src=\"[^\"]*/images/stars/stars([0-9_]+)\\.gif\" alt=\"[^\"]+\"[^>]*>[^<]*</span>",Pattern.CASE_INSENSITIVE | Pattern.MULTILINE);
  final Pattern patternTerrain=Pattern.compile("<span id=\"ctl00_ContentBody_Localize6\"[^>]*>[^<]*<img src=\"[^\"]*/images/stars/stars([0-9_]+)\\.gif\" alt=\"[^\"]+\"[^>]*>[^<]*</span>",Pattern.CASE_INSENSITIVE | Pattern.MULTILINE);
  final Pattern patternOwner=Pattern.compile("<span class=\"minorCacheDetails\">[^\\w]*An?([^\\w]*Event)?[^\\w]*cache[^\\w]*by[^<]*<a href=\"[^\"]+\">([^<]+)</a>[^<]*</span>",Pattern.CASE_INSENSITIVE | Pattern.MULTILINE);
  final Pattern patternOwnerReal=Pattern.compile("<a id=\"ctl00_ContentBody_uxFindLinksHiddenByThisUser\" href=\"[^\"]*/seek/nearest\\.aspx\\?u=*([^\"]+)\">[^<]+</a>",Pattern.CASE_INSENSITIVE);
  final Pattern patternHidden=Pattern.compile("<span[^>]*>[^\\w]*Hidden[^:]*:[^\\d]*((\\d+)\\/(\\d+)\\/(\\d+))[^<]*</span>",Pattern.CASE_INSENSITIVE | Pattern.MULTILINE);
  final Pattern patternHiddenEvent=Pattern.compile("<span[^>]*>[^\\w]*Event[^\\w]*Date[^:]*:([^<]*)</span>",Pattern.CASE_INSENSITIVE | Pattern.MULTILINE);
  final Pattern patternFavourite=Pattern.compile("<a id=\"uxFavContainerLink\"[^>]*>[^<]*<div[^<]*<span class=\"favorite-value\">[^\\d]*([0-9]+)[^\\d^<]*</span>",Pattern.CASE_INSENSITIVE | Pattern.MULTILINE);
  final Pattern patternFound=Pattern.compile("<p>[^<]*<a id=\"ctl00_ContentBody_hlFoundItLog\"[^<]*<img src=\".*/images/stockholm/16x16/check\\.gif\"[^>]*>[^<]*</a>[^<]*</p>",Pattern.CASE_INSENSITIVE);
  final Pattern patternLatLon=Pattern.compile("<span id=\"ctl00_ContentBody_LatLon\"[^>]*>(<b>)?([^<]*)(<\\/b>)?<\\/span>",Pattern.CASE_INSENSITIVE);
  final Pattern patternLocation=Pattern.compile("<span id=\"ctl00_ContentBody_Location\"[^>]*>In ([^<]*)",Pattern.CASE_INSENSITIVE);
  final Pattern patternHint=Pattern.compile("<p>([^<]*<strong>)?[^\\w]*Additional Hints([^<]*<\\/strong>)?[^\\(]*\\(<a[^>]+>Encrypt</a>\\)[^<]*<\\/p>[^<]*<div id=\"div_hint\"[^>]*>(.*)</div>[^<]*<div id=[\\'|\"]dk[\\'|\"]",Pattern.CASE_INSENSITIVE);
  final Pattern patternPersonalNote=Pattern.compile("<p id=\"cache_note\"[^>]*>([^<]*)</p>",Pattern.CASE_INSENSITIVE);
  final Pattern patternDescShort=Pattern.compile("<div class=\"UserSuppliedContent\">[^<]*<span id=\"ctl00_ContentBody_ShortDescription\"[^>]*>((?:(?!</span>[^\\w^<]*</div>).)*)</span>[^\\w^<]*</div>",Pattern.CASE_INSENSITIVE);
  final Pattern patternDesc=Pattern.compile("<span id=\"ctl00_ContentBody_LongDescription\"[^>]*>" + "(.*)</span>[^<]*</div>[^<]*<p>[^<]*</p>[^<]*<p>[^<]*<strong>[^\\w]*Additional Hints</strong>",Pattern.CASE_INSENSITIVE);
  final Pattern patternCountLogs=Pattern.compile("<span id=\"ctl00_ContentBody_lblFindCounts\"><p>(.*)<\\/p><\\/span>",Pattern.CASE_INSENSITIVE);
  final Pattern patternCountLog=Pattern.compile(" src=\"\\/images\\/icons\\/([^\\.]*).gif\" alt=\"[^\"]*\" title=\"[^\"]*\" />([0-9]*)[^0-9]+",Pattern.CASE_INSENSITIVE | Pattern.MULTILINE);
  final Pattern patternLogs=Pattern.compile("<table class=\"LogsTable[^\"]*\"[^>]*>[^<]*<tr>(.*)</tr>[^<]*</table>[^<]*<p",Pattern.CASE_INSENSITIVE | Pattern.MULTILINE);
  final Pattern patternLog=Pattern.compile("<td[^>]*>[^<]*<strong>[^<]*<img src=\"[^\"]*/images/icons/([^\\.]+)\\.[a-z]{2,5}\"[^>]*>&nbsp;([a-zA-Z]+) (\\d+)(, (\\d+))? by <a href=[^>]+>([^<]+)</a>[<^]*</strong>([^\\(]*\\((\\d+) found\\))?(<br[^>]*>)+((?:(?!<small>).)*)(<br[^>]*>)+<small>",Pattern.CASE_INSENSITIVE | Pattern.MULTILINE);
  final Pattern patternLogImgs=Pattern.compile("a href=\"http://img.geocaching.com/cache/log/([^\"]+)\".+?<span>([^<]*)",Pattern.CASE_INSENSITIVE);
  final Pattern patternAttributes=Pattern.compile("<h3 class=\"WidgetHeader\">[^<]*<img[^>]+>[^\\w]*Attributes[^<]*</h3>[^<]*<div class=\"WidgetBody\">(([^<]*<img src=\"[^\"]+\" alt=\"[^\"]+\"[^>]*>)+)[^<]*<p",Pattern.CASE_INSENSITIVE);
  final Pattern patternAttributesInside=Pattern.compile("[^<]*<img src=\"([^\"]+)\" alt=\"([^\"]+)\"[^>]*>",Pattern.CASE_INSENSITIVE);
  final Pattern patternSpoilers=Pattern.compile("<span id=\"ctl00_ContentBody_Images\">((<a href=\"[^\"]+\"[^>]*>[^<]*<img[^>]+>[^<]*<span>[^>]+</span>[^<]*</a>[^<]*<br[^>]*>([^<]*(<br[^>]*>)+)?)+)[^<]*</span>",Pattern.CASE_INSENSITIVE);
  final Pattern patternSpoilersInside=Pattern.compile("[^<]*<a href=\"([^\"]+)\"[^>]*>[^<]*<img[^>]+>[^<]*<span>([^>]+)</span>[^<]*</a>[^<]*<br[^>]*>(([^<]*)(<br[^<]*>)+)?",Pattern.CASE_INSENSITIVE);
  final Pattern patternInventory=Pattern.compile("<span id=\"ctl00_ContentBody_uxTravelBugList_uxInventoryLabel\">[^\\w]*Inventory[^<]*</span>[^<]*</h3>[^<]*<div class=\"WidgetBody\">([^<]*<ul>(([^<]*<li>[^<]*<a href=\"[^\"]+\"[^>]*>[^<]*<img src=\"[^\"]+\"[^>]*>[^<]*<span>[^<]+<\\/span>[^<]*<\\/a>[^<]*<\\/li>)+)[^<]*<\\/ul>)?",Pattern.CASE_INSENSITIVE);
  final Pattern patternInventoryInside=Pattern.compile("[^<]*<li>[^<]*<a href=\"[a-z0-9\\-\\_\\.\\?\\/\\:\\@]*\\/track\\/details\\.aspx\\?guid=([0-9a-z\\-]+)[^\"]*\"[^>]*>[^<]*<img src=\"[^\"]+\"[^>]*>[^<]*<span>([^<]+)<\\/span>[^<]*<\\/a>[^<]*<\\/li>",Pattern.CASE_INSENSITIVE);
  final Pattern patternOnWatchlist=Pattern.compile("<img\\s*src=\"\\/images\\/stockholm\\/16x16\\/icon_stop_watchlist.gif\"",Pattern.CASE_INSENSITIVE);
  final cgCacheWrap caches=new cgCacheWrap();
  final cgCache cache=new cgCache();
  if (page.indexOf("Cache is Unpublished") > -1) {
    caches.error="cache was unpublished";
    return caches;
  }
  if (page.indexOf("Sorry, the owner of this listing has made it viewable to Premium Members only.") != -1) {
    caches.error="requested cache is for premium members only";
    return caches;
  }
  if (page.indexOf("has chosen to make this cache listing visible to Premium Members only.") != -1) {
    caches.error="requested cache is for premium members only";
    return caches;
  }
  if (page.indexOf("<li>This cache is temporarily unavailable.") != -1) {
    cache.disabled=true;
  }
 else {
    cache.disabled=false;
  }
  if (page.indexOf("<li>This cache has been archived,") != -1) {
    cache.archived=true;
  }
 else {
    cache.archived=false;
  }
  if (page.indexOf("<p class=\"Warning\">This is a Premium Member Only cache.</p>") != -1) {
    cache.members=true;
  }
 else {
    cache.members=false;
  }
  cache.reason=reason;
  try {
    final Matcher matcherGeocode=patternGeocode.matcher(page);
    if (matcherGeocode.find()) {
      if (matcherGeocode.groupCount() > 0) {
        cache.geocode=getMatch(matcherGeocode.group(1));
      }
    }
  }
 catch (  Exception e) {
    Log.w(cgSettings.tag,"cgeoBase.parseCache: Failed to parse cache geocode");
  }
  try {
    final Matcher matcherCacheId=patternCacheId.matcher(page);
    if (matcherCacheId.find()) {
      if (matcherCacheId.groupCount() > 0) {
        cache.cacheid=getMatch(matcherCacheId.group(1));
      }
    }
  }
 catch (  Exception e) {
    Log.w(cgSettings.tag,"cgeoBase.parseCache: Failed to parse cache id");
  }
  try {
    final Matcher matcherCacheGuid=patternCacheGuid.matcher(page);
    if (matcherCacheGuid.find()) {
      if (matcherCacheGuid.groupCount() > 0) {
        cache.guid=getMatch(matcherCacheGuid.group(1));
      }
    }
  }
 catch (  Exception e) {
    Log.w(cgSettings.tag,"cgeoBase.parseCache: Failed to parse cache guid");
  }
  try {
    final Matcher matcherName=patternName.matcher(page);
    if (matcherName.find()) {
      if (matcherName.groupCount() > 0) {
        cache.name=Html.fromHtml(matcherName.group(1)).toString();
      }
    }
  }
 catch (  Exception e) {
    Log.w(cgSettings.tag,"cgeoBase.parseCache: Failed to parse cache name");
  }
  try {
    final Matcher matcherOwnerReal=patternOwnerReal.matcher(page);
    if (matcherOwnerReal.find()) {
      if (matcherOwnerReal.groupCount() > 0) {
        cache.ownerReal=URLDecoder.decode(matcherOwnerReal.group(1));
      }
    }
  }
 catch (  Exception e) {
    Log.w(cgSettings.tag,"cgeoBase.parseCache: Failed to parse cache owner real name");
  }
  final String username=settings.getUsername();
  if (cache.ownerReal != null && username != null && cache.ownerReal.equalsIgnoreCase(username)) {
    cache.own=true;
  }
  int pos=-1;
  String tableInside=page;
  pos=tableInside.indexOf("id=\"cacheDetails\"");
  if (pos == -1) {
    Log.e(cgSettings.tag,"cgeoBase.parseCache: ID \"cacheDetails\" not found on page");
    return null;
  }
  tableInside=tableInside.substring(pos);
  pos=tableInside.indexOf("<div class=\"CacheInformationTable\"");
  if (pos == -1) {
    Log.e(cgSettings.tag,"cgeoBase.parseCache: ID \"CacheInformationTable\" not found on page");
    return null;
  }
  tableInside=tableInside.substring(0,pos);
  if (tableInside != null && tableInside.length() > 0) {
    try {
      final Matcher matcherTerrain=patternTerrain.matcher(tableInside);
      if (matcherTerrain.find()) {
        if (matcherTerrain.groupCount() > 0) {
          cache.terrain=new Float(Pattern.compile("_").matcher(matcherTerrain.group(1)).replaceAll("."));
        }
      }
    }
 catch (    Exception e) {
      Log.w(cgSettings.tag,"cgeoBase.parseCache: Failed to parse cache terrain");
    }
    try {
      final Matcher matcherDifficulty=patternDifficulty.matcher(tableInside);
      if (matcherDifficulty.find()) {
        if (matcherDifficulty.groupCount() > 0) {
          cache.difficulty=new Float(Pattern.compile("_").matcher(matcherDifficulty.group(1)).replaceAll("."));
        }
      }
    }
 catch (    Exception e) {
      Log.w(cgSettings.tag,"cgeoBase.parseCache: Failed to parse cache difficulty");
    }
    try {
      final Matcher matcherOwner=patternOwner.matcher(tableInside);
      if (matcherOwner.find()) {
        if (matcherOwner.groupCount() > 0) {
          cache.owner=Html.fromHtml(matcherOwner.group(2)).toString();
        }
      }
    }
 catch (    Exception e) {
      Log.w(cgSettings.tag,"cgeoBase.parseCache: Failed to parse cache owner");
    }
    try {
      final Matcher matcherHidden=patternHidden.matcher(tableInside);
      if (matcherHidden.find()) {
        if (matcherHidden.groupCount() > 0) {
          cache.hidden=parseDate(matcherHidden.group(1));
        }
      }
    }
 catch (    Exception e) {
      Log.w(cgSettings.tag,"cgeoBase.parseCache: Failed to parse cache hidden date");
    }
    if (cache.hidden == null) {
      try {
        final Matcher matcherHiddenEvent=patternHiddenEvent.matcher(tableInside);
        if (matcherHiddenEvent.find()) {
          if (matcherHiddenEvent.groupCount() > 0) {
            cache.hidden=parseDate(matcherHiddenEvent.group(1));
          }
        }
      }
 catch (      Exception e) {
        Log.w(cgSettings.tag,"cgeoBase.parseCache: Failed to parse cache event date");
      }
    }
    try {
      final Matcher matcherFavourite=patternFavourite.matcher(tableInside);
      if (matcherFavourite.find()) {
        if (matcherFavourite.groupCount() > 0) {
          cache.favouriteCnt=Integer.parseInt(matcherFavourite.group(1));
        }
      }
    }
 catch (    Exception e) {
      Log.w(cgSettings.tag,"cgeoBase.parseCache: Failed to parse favourite count");
    }
    try {
      final Matcher matcherSize=patternSize.matcher(tableInside);
      if (matcherSize.find()) {
        if (matcherSize.groupCount() > 0) {
          cache.size=getMatch(matcherSize.group(1)).toLowerCase();
        }
      }
    }
 catch (    Exception e) {
      Log.w(cgSettings.tag,"cgeoBase.parseCache: Failed to parse cache size");
    }
  }
  try {
    final Matcher matcherFound=patternFound.matcher(page);
    if (matcherFound.find()) {
      if (matcherFound.group() != null && matcherFound.group().length() > 0) {
        cache.found=true;
      }
    }
  }
 catch (  Exception e) {
    Log.w(cgSettings.tag,"cgeoBase.parseCache: Failed to parse found");
  }
  try {
    final Matcher matcherType=patternType.matcher(page);
    if (matcherType.find()) {
      if (matcherType.groupCount() > 0) {
        cache.type=cacheTypes.get(matcherType.group(1).toLowerCase());
      }
    }
  }
 catch (  Exception e) {
    Log.w(cgSettings.tag,"cgeoBase.parseCache: Failed to parse cache type");
  }
  try {
    final Matcher matcher=patternOnWatchlist.matcher(page);
    cache.onWatchlist=matcher.find();
  }
 catch (  Exception e) {
    Log.w(cgSettings.tag,"cgeoBase.parseCache: Failed to parse watchlist state");
  }
  try {
    final Matcher matcherLatLon=patternLatLon.matcher(page);
    if (matcherLatLon.find()) {
      if (matcherLatLon.groupCount() > 0) {
        cache.latlon=getMatch(matcherLatLon.group(2));
        HashMap<String,Object> tmp=this.parseLatlon(cache.latlon);
        if (tmp.size() > 0) {
          cache.latitude=(Double)tmp.get("latitude");
          cache.longitude=(Double)tmp.get("longitude");
          cache.latitudeString=(String)tmp.get("latitudeString");
          cache.longitudeString=(String)tmp.get("longitudeString");
          cache.reliableLatLon=true;
        }
        tmp=null;
      }
    }
  }
 catch (  Exception e) {
    Log.w(cgSettings.tag,"cgeoBase.parseCache: Failed to parse cache coordinates");
  }
  try {
    final Matcher matcherLocation=patternLocation.matcher(page);
    if (matcherLocation.find()) {
      if (matcherLocation.groupCount() > 0) {
        cache.location=getMatch(matcherLocation.group(1));
      }
    }
  }
 catch (  Exception e) {
    Log.w(cgSettings.tag,"cgeoBase.parseCache: Failed to parse cache location");
  }
  try {
    final Matcher matcherHint=patternHint.matcher(page);
    if (matcherHint.find()) {
      if (matcherHint.groupCount() > 2 && matcherHint.group(3) != null) {
        String hint=Pattern.compile("<(br|p)[^>]*>").matcher(matcherHint.group(3)).replaceAll("\n");
        if (hint != null) {
          cache.hint=hint.replaceAll(Pattern.quote("</p>"),"").trim();
        }
      }
    }
  }
 catch (  Exception e) {
    Log.w(cgSettings.tag,"cgeoBase.parseCache: Failed to parse cache hint");
  }
  try {
    final Matcher matcherPersonalNote=patternPersonalNote.matcher(page);
    if (matcherPersonalNote.find()) {
      if (matcherPersonalNote.groupCount() > 0) {
        cache.personalNote=getMatch(matcherPersonalNote.group(1).trim());
      }
    }
  }
 catch (  Exception e) {
    Log.w(cgSettings.tag,"cgeoBase.parseCache: Failed to parse cache personal note");
  }
  try {
    final Matcher matcherDescShort=patternDescShort.matcher(page);
    if (matcherDescShort.find()) {
      if (matcherDescShort.groupCount() > 0) {
        cache.shortdesc=getMatch(matcherDescShort.group(1));
      }
    }
  }
 catch (  Exception e) {
    Log.w(cgSettings.tag,"cgeoBase.parseCache: Failed to parse cache short description");
  }
  try {
    final Matcher matcherDesc=patternDesc.matcher(page);
    if (matcherDesc.find()) {
      if (matcherDesc.groupCount() > 0) {
        cache.description=getMatch(matcherDesc.group(1));
      }
    }
  }
 catch (  Exception e) {
    Log.w(cgSettings.tag,"cgeoBase.parseCache: Failed to parse cache description");
  }
  try {
    final Matcher matcherAttributes=patternAttributes.matcher(page);
    while (matcherAttributes.find()) {
      if (matcherAttributes.groupCount() > 0) {
        final String attributesPre=matcherAttributes.group(1);
        final Matcher matcherAttributesInside=patternAttributesInside.matcher(attributesPre);
        while (matcherAttributesInside.find()) {
          if (matcherAttributesInside.groupCount() > 1 && matcherAttributesInside.group(2).equalsIgnoreCase("blank") != true) {
            if (cache.attributes == null) {
              cache.attributes=new ArrayList<String>();
            }
            String attribute=matcherAttributesInside.group(2).toLowerCase();
            String imageName=matcherAttributesInside.group(1).trim();
            if (imageName.length() > 0) {
              int start=imageName.lastIndexOf('/');
              int end=imageName.lastIndexOf('.');
              if (start >= 0 && end >= 0) {
                attribute=imageName.substring(start + 1,end).replace('-','_');
              }
            }
            cache.attributes.add(attribute);
          }
        }
      }
    }
  }
 catch (  Exception e) {
    Log.w(cgSettings.tag,"cgeoBase.parseCache: Failed to parse cache attributes");
  }
  try {
    final Matcher matcherSpoilers=patternSpoilers.matcher(page);
    while (matcherSpoilers.find()) {
      if (matcherSpoilers.groupCount() > 0) {
        final String spoilersPre=matcherSpoilers.group(1);
        final Matcher matcherSpoilersInside=patternSpoilersInside.matcher(spoilersPre);
        while (matcherSpoilersInside.find()) {
          if (matcherSpoilersInside.groupCount() > 0) {
            final cgImage spoiler=new cgImage();
            spoiler.url=matcherSpoilersInside.group(1);
            if (matcherSpoilersInside.group(2) != null) {
              spoiler.title=matcherSpoilersInside.group(2);
            }
            if (matcherSpoilersInside.group(4) != null) {
              spoiler.description=matcherSpoilersInside.group(4);
            }
            if (cache.spoilers == null) {
              cache.spoilers=new ArrayList<cgImage>();
            }
            cache.spoilers.add(spoiler);
          }
        }
      }
    }
  }
 catch (  Exception e) {
    Log.w(cgSettings.tag,"cgeoBase.parseCache: Failed to parse cache spoilers");
  }
  try {
    cache.inventoryItems=0;
    final Matcher matcherInventory=patternInventory.matcher(page);
    while (matcherInventory.find()) {
      if (cache.inventory == null) {
        cache.inventory=new ArrayList<cgTrackable>();
      }
      if (matcherInventory.groupCount() > 1) {
        final String inventoryPre=matcherInventory.group(2);
        if (inventoryPre != null && inventoryPre.length() > 0) {
          final Matcher matcherInventoryInside=patternInventoryInside.matcher(inventoryPre);
          while (matcherInventoryInside.find()) {
            if (matcherInventoryInside.groupCount() > 0) {
              final cgTrackable inventoryItem=new cgTrackable();
              inventoryItem.guid=matcherInventoryInside.group(1);
              inventoryItem.name=matcherInventoryInside.group(2);
              cache.inventory.add(inventoryItem);
              cache.inventoryItems++;
            }
          }
        }
      }
    }
  }
 catch (  Exception e) {
    Log.w(cgSettings.tag,"cgeoBase.parseCache: Failed to parse cache inventory (2)");
  }
  try {
    final Matcher matcherLogCounts=patternCountLogs.matcher(page);
    while (matcherLogCounts.find()) {
      if (matcherLogCounts.groupCount() > 0) {
        final String[] logs=matcherLogCounts.group(1).split("<img");
        final int logsCnt=logs.length;
        for (int k=1; k < logsCnt; k++) {
          Integer type=null;
          Integer count=null;
          final Matcher matcherLog=patternCountLog.matcher(logs[k]);
          if (matcherLog.find()) {
            String typeStr=matcherLog.group(1);
            String countStr=matcherLog.group(2);
            if (typeStr != null && typeStr.length() > 0) {
              if (logTypes.containsKey(typeStr.toLowerCase()) == true) {
                type=logTypes.get(typeStr.toLowerCase());
              }
            }
            if (countStr != null && countStr.length() > 0) {
              count=Integer.parseInt(countStr);
            }
            if (type != null && count != null) {
              cache.logCounts.put(type,count);
            }
          }
        }
      }
    }
  }
 catch (  Exception e) {
    Log.w(cgSettings.tag,"cgeoBase.parseCache: Failed to parse cache log count");
  }
  try {
    final Matcher matcherLogs=patternLogs.matcher(page);
    while (matcherLogs.find()) {
      if (matcherLogs.groupCount() > 0) {
        final String[] logs=matcherLogs.group(1).split("</tr><tr>");
        final int logsCnt=logs.length;
        for (int k=0; k < logsCnt; k++) {
          final Matcher matcherLog=patternLog.matcher(logs[k]);
          if (matcherLog.find()) {
            final cgLog logDone=new cgLog();
            String logTmp=matcherLog.group(10);
            int day=-1;
            try {
              day=Integer.parseInt(matcherLog.group(3));
            }
 catch (            Exception e) {
              Log.w(cgSettings.tag,"Failed to parse logs date (day): " + e.toString());
            }
            int month=-1;
            if (matcherLog.group(2).equalsIgnoreCase("January")) {
              month=0;
            }
 else             if (matcherLog.group(2).equalsIgnoreCase("February")) {
              month=1;
            }
 else             if (matcherLog.group(2).equalsIgnoreCase("March")) {
              month=2;
            }
 else             if (matcherLog.group(2).equalsIgnoreCase("April")) {
              month=3;
            }
 else             if (matcherLog.group(2).equalsIgnoreCase("May")) {
              month=4;
            }
 else             if (matcherLog.group(2).equalsIgnoreCase("June")) {
              month=5;
            }
 else             if (matcherLog.group(2).equalsIgnoreCase("July")) {
              month=6;
            }
 else             if (matcherLog.group(2).equalsIgnoreCase("August")) {
              month=7;
            }
 else             if (matcherLog.group(2).equalsIgnoreCase("September")) {
              month=8;
            }
 else             if (matcherLog.group(2).equalsIgnoreCase("October")) {
              month=9;
            }
 else             if (matcherLog.group(2).equalsIgnoreCase("November")) {
              month=10;
            }
 else             if (matcherLog.group(2).equalsIgnoreCase("December")) {
              month=11;
            }
 else {
              Log.w(cgSettings.tag,"Failed to parse logs date (month).");
            }
            int year=-1;
            final String yearPre=matcherLog.group(5);
            if (yearPre == null) {
              Calendar date=Calendar.getInstance();
              year=date.get(Calendar.YEAR);
            }
 else {
              try {
                year=Integer.parseInt(matcherLog.group(5));
              }
 catch (              Exception e) {
                Log.w(cgSettings.tag,"Failed to parse logs date (year): " + e.toString());
              }
            }
            long logDate;
            if (year > 0 && month >= 0 && day > 0) {
              Calendar date=Calendar.getInstance();
              date.set(year,month,day,12,0,0);
              logDate=date.getTimeInMillis();
              logDate=(logDate / 1000L) * 1000L;
            }
 else {
              logDate=0;
            }
            if (logTypes.containsKey(matcherLog.group(1).toLowerCase()) == true) {
              logDone.type=logTypes.get(matcherLog.group(1).toLowerCase());
            }
 else {
              logDone.type=logTypes.get("icon_note");
            }
            logDone.author=Html.fromHtml(matcherLog.group(6)).toString();
            logDone.date=logDate;
            if (matcherLog.group(8) != null) {
              logDone.found=new Integer(matcherLog.group(8));
            }
            final Matcher matcherImg=patternLogImgs.matcher(logs[k]);
            while (matcherImg.find()) {
              final cgImage logImage=new cgImage();
              logImage.url="http://img.geocaching.com/cache/log/" + matcherImg.group(1);
              logImage.title=matcherImg.group(2);
              if (logDone.logImages == null) {
                logDone.logImages=new ArrayList<cgImage>();
              }
              logDone.logImages.add(logImage);
            }
            logDone.log=logTmp;
            if (cache.logs == null) {
              cache.logs=new ArrayList<cgLog>();
            }
            cache.logs.add(logDone);
          }
        }
      }
    }
  }
 catch (  Exception e) {
    Log.w(cgSettings.tag,"cgeoBase.parseCache: Failed to parse cache logs");
  }
  int wpBegin=0;
  int wpEnd=0;
  wpBegin=page.indexOf("<table class=\"Table\" id=\"ctl00_ContentBody_Waypoints\">");
  if (wpBegin != -1) {
    final Pattern patternWpType=Pattern.compile("\\/wpttypes\\/sm\\/(.+)\\.jpg",Pattern.CASE_INSENSITIVE);
    final Pattern patternWpPrefixOrLookupOrLatlon=Pattern.compile(">([^<]*<[^>]+>)?([^<]+)(<[^>]+>[^<]*)?<\\/td>",Pattern.CASE_INSENSITIVE);
    final Pattern patternWpName=Pattern.compile(">[^<]*<a[^>]+>([^<]*)<\\/a>",Pattern.CASE_INSENSITIVE);
    final Pattern patternWpNote=Pattern.compile("colspan=\"6\">(.*)<\\/td>",Pattern.CASE_INSENSITIVE);
    String wpList=page.substring(wpBegin);
    wpEnd=wpList.indexOf("</p>");
    if (wpEnd > -1 && wpEnd <= wpList.length()) {
      wpList=wpList.substring(0,wpEnd);
    }
    if (wpList.indexOf("No additional waypoints to display.") == -1) {
      wpEnd=wpList.indexOf("</table>");
      wpList=wpList.substring(0,wpEnd);
      wpBegin=wpList.indexOf("<tbody>");
      wpEnd=wpList.indexOf("</tbody>");
      if (wpBegin >= 0 && wpEnd >= 0 && wpEnd <= wpList.length()) {
        wpList=wpList.substring(wpBegin + 7,wpEnd);
      }
      final String[] wpItems=wpList.split("<tr");
      String[] wp;
      for (int j=1; j < wpItems.length; j++) {
        final cgWaypoint waypoint=new cgWaypoint();
        wp=wpItems[j].split("<td");
        try {
          final Matcher matcherWpType=patternWpType.matcher(wp[3]);
          while (matcherWpType.find()) {
            if (matcherWpType.groupCount() > 0) {
              waypoint.type=matcherWpType.group(1);
              if (waypoint.type != null) {
                waypoint.type=waypoint.type.trim();
              }
            }
          }
        }
 catch (        Exception e) {
          Log.w(cgSettings.tag,"cgeoBase.parseCache: Failed to parse waypoint type");
        }
        try {
          final Matcher matcherWpPrefix=patternWpPrefixOrLookupOrLatlon.matcher(wp[4]);
          while (matcherWpPrefix.find()) {
            if (matcherWpPrefix.groupCount() > 1) {
              waypoint.prefix=matcherWpPrefix.group(2);
              if (waypoint.prefix != null) {
                waypoint.prefix=waypoint.prefix.trim();
              }
            }
          }
        }
 catch (        Exception e) {
          Log.w(cgSettings.tag,"cgeoBase.parseCache: Failed to parse waypoint prefix");
        }
        try {
          final Matcher matcherWpLookup=patternWpPrefixOrLookupOrLatlon.matcher(wp[5]);
          while (matcherWpLookup.find()) {
            if (matcherWpLookup.groupCount() > 1) {
              waypoint.lookup=matcherWpLookup.group(2);
              if (waypoint.lookup != null) {
                waypoint.lookup=waypoint.lookup.trim();
              }
            }
          }
        }
 catch (        Exception e) {
          Log.w(cgSettings.tag,"cgeoBase.parseCache: Failed to parse waypoint lookup");
        }
        try {
          final Matcher matcherWpName=patternWpName.matcher(wp[6]);
          while (matcherWpName.find()) {
            if (matcherWpName.groupCount() > 0) {
              waypoint.name=matcherWpName.group(1);
              if (waypoint.name != null) {
                waypoint.name=waypoint.name.trim();
              }
            }
          }
        }
 catch (        Exception e) {
          Log.w(cgSettings.tag,"cgeoBase.parseCache: Failed to parse waypoint name");
        }
        try {
          final Matcher matcherWpLatLon=patternWpPrefixOrLookupOrLatlon.matcher(wp[7]);
          while (matcherWpLatLon.find()) {
            if (matcherWpLatLon.groupCount() > 1) {
              waypoint.latlon=Html.fromHtml(matcherWpLatLon.group(2)).toString();
              final HashMap<String,Object> tmp=this.parseLatlon(waypoint.latlon);
              if (tmp.size() > 0) {
                waypoint.latitude=(Double)tmp.get("latitude");
                waypoint.longitude=(Double)tmp.get("longitude");
                waypoint.latitudeString=(String)tmp.get("latitudeString");
                waypoint.longitudeString=(String)tmp.get("longitudeString");
              }
            }
          }
        }
 catch (        Exception e) {
          Log.w(cgSettings.tag,"cgeoBase.parseCache: Failed to parse waypoint coordinates");
        }
        j++;
        if (wpItems.length > j) {
          wp=wpItems[j].split("<td");
        }
        try {
          final Matcher matcherWpNote=patternWpNote.matcher(wp[3]);
          while (matcherWpNote.find()) {
            if (matcherWpNote.groupCount() > 0) {
              waypoint.note=matcherWpNote.group(1);
              if (waypoint.note != null) {
                waypoint.note=waypoint.note.trim();
              }
            }
          }
        }
 catch (        Exception e) {
          Log.w(cgSettings.tag,"cgeoBase.parseCache: Failed to parse waypoint note");
        }
        if (cache.waypoints == null)         cache.waypoints=new ArrayList<cgWaypoint>();
        cache.waypoints.add(waypoint);
      }
    }
  }
  if (cache.latitude != null && cache.longitude != null) {
    cache.elevation=getElevation(cache.latitude,cache.longitude);
  }
  final cgRating rating=getRating(cache.guid,cache.geocode);
  if (rating != null) {
    cache.rating=rating.rating;
    cache.votes=rating.votes;
    cache.myVote=rating.myVote;
  }
  cache.updated=System.currentTimeMillis();
  cache.detailedUpdate=System.currentTimeMillis();
  cache.detailed=true;
  caches.cacheList.add(cache);
  return caches;
}
