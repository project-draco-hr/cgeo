{
  final HashMap<String,Object> result=new HashMap<String,Object>();
  final Pattern patternLatlon=Pattern.compile("([NS])[^\\d]*(\\d+)[^??]*?? (\\d+)\\.(\\d+) ([WE])[^\\d]*(\\d+)[^??]*?? (\\d+)\\.(\\d+)",Pattern.CASE_INSENSITIVE);
  final Matcher matcherLatlon=patternLatlon.matcher(latlon);
  while (matcherLatlon.find()) {
    if (matcherLatlon.groupCount() > 0) {
      result.put("latitudeString",(String)(matcherLatlon.group(1) + " " + matcherLatlon.group(2)+ "?? "+ matcherLatlon.group(3)+ "."+ matcherLatlon.group(4)));
      result.put("longitudeString",(String)(matcherLatlon.group(5) + " " + matcherLatlon.group(6)+ "?? "+ matcherLatlon.group(7)+ "."+ matcherLatlon.group(8)));
      int latNegative=-1;
      int lonNegative=-1;
      if (matcherLatlon.group(1).equalsIgnoreCase("N")) {
        latNegative=1;
      }
      if (matcherLatlon.group(5).equalsIgnoreCase("E")) {
        lonNegative=1;
      }
      result.put("latitude",new Double(latNegative * (new Float(matcherLatlon.group(2)) + new Float(matcherLatlon.group(3) + "." + matcherLatlon.group(4)) / 60)));
      result.put("longitude",new Double(lonNegative * (new Float(matcherLatlon.group(6)) + new Float(matcherLatlon.group(7) + "." + matcherLatlon.group(8)) / 60)));
    }
 else {
      Log.w(cgSettings.tag,"cgBase.parseLatlon: Failed to parse coordinates.");
    }
  }
  return result;
}
