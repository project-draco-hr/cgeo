{
  int httpCode=-1;
  String httpLocation=null;
  String cookiesDone=null;
  if (cookies == null || cookies.isEmpty()) {
    if (cookies == null) {
      cookies=new HashMap<String,String>();
    }
    final Map<String,?> prefsAll=prefs.getAll();
    final Set<? extends Map.Entry<String,?>> entrySet=prefsAll.entrySet();
    for (    Map.Entry<String,?> entry : entrySet) {
      String key=entry.getKey();
      if (key.matches("cookie_.+")) {
        final String cookieKey=key.substring(7);
        final String cookieValue=(String)entry.getValue();
        cookies.put(cookieKey,cookieValue);
      }
    }
  }
  if (cookies != null) {
    final Set<Map.Entry<String,String>> entrySet=cookies.entrySet();
    final ArrayList<String> cookiesEncoded=new ArrayList<String>();
    for (    Map.Entry<String,String> entry : entrySet) {
      cookiesEncoded.add(entry.getKey() + "=" + entry.getValue());
    }
    if (cookiesEncoded.size() > 0) {
      cookiesDone=implode("; ",cookiesEncoded.toArray());
    }
  }
  if (cookiesDone == null) {
    Map<String,?> prefsValues=prefs.getAll();
    if (prefsValues != null && prefsValues.size() > 0) {
      final Set<? extends Map.Entry<String,?>> entrySet=prefsValues.entrySet();
      final ArrayList<String> cookiesEncoded=new ArrayList<String>();
      for (      Map.Entry<String,?> entry : entrySet) {
        String key=entry.getKey();
        if (key.length() > 7 && key.substring(0,7).equals("cookie_")) {
          cookiesEncoded.add(key + "=" + entry.getValue());
        }
      }
      if (cookiesEncoded.size() > 0) {
        cookiesDone=implode("; ",cookiesEncoded.toArray());
      }
    }
  }
  if (cookiesDone == null) {
    cookiesDone="";
  }
  URLConnection uc=null;
  HttpURLConnection connection=null;
  Integer timeout=30000;
  final StringBuffer buffer=new StringBuffer();
  for (int i=0; i < 3; i++) {
    if (i > 0) {
      Log.w(cgSettings.tag,"Failed to download data, retrying. Attempt #" + (i + 1));
    }
    buffer.delete(0,buffer.length());
    timeout=30000 + (i * 15000);
    try {
      final URL u=new URL("http://" + host + path);
      uc=u.openConnection();
      uc.setRequestProperty("Host",host);
      uc.setRequestProperty("Cookie",cookiesDone);
      uc.setRequestProperty("Content-Type","application/json; charset=UTF-8");
      uc.setRequestProperty("X-Requested-With","XMLHttpRequest");
      uc.setRequestProperty("Accept","application/json, text/javascript, */*; q=0.01");
      uc.setRequestProperty("Referer",host + "/" + path);
      if (settings.asBrowser == 1) {
        uc.setRequestProperty("Accept-Charset","utf-8, iso-8859-1, utf-16, *;q=0.7");
        uc.setRequestProperty("Accept-Language","en-US");
        uc.setRequestProperty("User-Agent",idBrowser);
        uc.setRequestProperty("Connection","keep-alive");
        uc.setRequestProperty("Keep-Alive","300");
      }
      connection=(HttpURLConnection)uc;
      connection.setReadTimeout(timeout);
      connection.setRequestMethod("POST");
      HttpURLConnection.setFollowRedirects(false);
      connection.setDoInput(true);
      connection.setDoOutput(true);
      final OutputStream out=connection.getOutputStream();
      final OutputStreamWriter wr=new OutputStreamWriter(out);
      wr.write(params);
      wr.flush();
      wr.close();
      String headerName=null;
      final SharedPreferences.Editor prefsEditor=prefs.edit();
      for (int j=1; (headerName=uc.getHeaderFieldKey(j)) != null; j++) {
        if (headerName != null && headerName.equalsIgnoreCase("Set-Cookie")) {
          int index;
          String cookie=uc.getHeaderField(j);
          index=cookie.indexOf(";");
          if (index > -1) {
            cookie=cookie.substring(0,cookie.indexOf(";"));
          }
          index=cookie.indexOf("=");
          if (index > -1 && cookie.length() > (index + 1)) {
            String name=cookie.substring(0,cookie.indexOf("="));
            String value=cookie.substring(cookie.indexOf("=") + 1,cookie.length());
            cookies.put(name,value);
            prefsEditor.putString("cookie_" + name,value);
          }
        }
      }
      prefsEditor.commit();
      final String encoding=connection.getContentEncoding();
      InputStream ins;
      if (encoding != null && encoding.equalsIgnoreCase("gzip")) {
        ins=new GZIPInputStream(connection.getInputStream());
      }
 else       if (encoding != null && encoding.equalsIgnoreCase("deflate")) {
        ins=new InflaterInputStream(connection.getInputStream(),new Inflater(true));
      }
 else {
        ins=connection.getInputStream();
      }
      final InputStreamReader inr=new InputStreamReader(ins);
      final BufferedReader br=new BufferedReader(inr);
      readIntoBuffer(br,buffer);
      httpCode=connection.getResponseCode();
      httpLocation=uc.getHeaderField("Location");
      final String paramsLog=params.replaceAll(passMatch,"password=***");
      Log.i(cgSettings.tag + " | JSON","[POST " + (int)(params.length() / 1024) + "k | "+ httpCode+ " | "+ (int)(buffer.length() / 1024)+ "k] Downloaded "+ "http://"+ host+ path+ "?"+ paramsLog);
      connection.disconnect();
      br.close();
      ins.close();
      inr.close();
    }
 catch (    IOException e) {
      Log.e(cgSettings.tag,"cgeoBase.requestJSONgc.IOException: " + e.toString());
    }
catch (    Exception e) {
      Log.e(cgSettings.tag,"cgeoBase.requestJSONgc: " + e.toString());
    }
    if (buffer != null && buffer.length() > 0) {
      break;
    }
  }
  String page=null;
  if (httpCode == 302 && httpLocation != null) {
    final Uri newLocation=Uri.parse(httpLocation);
    if (newLocation.isRelative()) {
      page=requestJSONgc(host,path,params);
    }
 else {
      page=requestJSONgc(newLocation.getHost(),newLocation.getPath(),params);
    }
  }
 else {
    replaceWhitespace(buffer);
    page=buffer.toString();
  }
  if (page != null) {
    return page;
  }
 else {
    return "";
  }
}
