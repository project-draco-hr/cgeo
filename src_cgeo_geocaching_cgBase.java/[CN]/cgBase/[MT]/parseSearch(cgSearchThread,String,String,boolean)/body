{
  if (page == null || page.length() == 0) {
    Log.e(cgSettings.tag,"cgeoBase.parseSearch: No page given");
    return null;
  }
  final cgCacheWrap caches=new cgCacheWrap();
  final ArrayList<String> cids=new ArrayList<String>();
  final ArrayList<String> guids=new ArrayList<String>();
  String recaptchaChallenge=null;
  String recaptchaText=null;
  caches.url=url;
  final Pattern patternCacheType=Pattern.compile("<td class=\"Merge\">[^<]*<a href=\"[^\"]*/seek/cache_details\\.aspx\\?guid=[^\"]+\"[^>]+>[^<]*<img src=\"[^\"]*/images/wpttypes/[^\\.]+\\.gif\" alt=\"([^\"]+)\" title=\"[^\"]+\"[^>]*>[^<]*</a>",Pattern.CASE_INSENSITIVE | Pattern.MULTILINE);
  final Pattern patternGuidAndDisabled=Pattern.compile("<img src=\"[^\"]*/images/wpttypes/[^>]*>[^<]*</a></td><td class=\"Merge\">[^<]*<a href=\"[^\"]*/seek/cache_details\\.aspx\\?guid=([a-z0-9\\-]+)\" class=\"lnk([^\"]*)\">([^<]*<span>)?([^<]*)(</span>[^<]*)?</a>[^<]+<br />([^<]*)<span[^>]+>([^<]*)</span>([^<]*<img[^>]+>)?[^<]*<br />[^<]*</td>",Pattern.CASE_INSENSITIVE | Pattern.MULTILINE);
  final Pattern patternTbs=Pattern.compile("<a id=\"ctl00_ContentBody_dlResults_ctl[0-9]+_uxTravelBugList\" class=\"tblist\" data-tbcount=\"([0-9]+)\" data-id=\"[^\"]*\"[^>]*>(.*)</a>",Pattern.CASE_INSENSITIVE);
  final Pattern patternTbsInside=Pattern.compile("(<img src=\"[^\"]+\" alt=\"([^\"]+)\" title=\"[^\"]*\" />[^<]*)",Pattern.CASE_INSENSITIVE | Pattern.MULTILINE);
  final Pattern patternDirection=Pattern.compile("<img id=\"ctl00_ContentBody_dlResults_ctl[0-9]+_uxDistanceAndHeading\" title=\"[^\"]*\" src=\"[^\"]*/seek/CacheDir\\.ashx\\?k=([^\"]+)\"[^>]*>",Pattern.CASE_INSENSITIVE);
  final Pattern patternCode=Pattern.compile("\\|[^\\w]*(GC[a-z0-9]+)[^\\|]*\\|",Pattern.CASE_INSENSITIVE | Pattern.MULTILINE);
  final Pattern patternId=Pattern.compile("name=\"CID\"[^v]*value=\"([0-9]+)\"",Pattern.CASE_INSENSITIVE);
  final Pattern patternFavourite=Pattern.compile("<span id=\"ctl00_ContentBody_dlResults_ctl[0-9]+_uxFavoritesValue\" title=\"[^\"]*\" class=\"favorite-rank\">([0-9]+)</span>",Pattern.CASE_INSENSITIVE);
  final Pattern patternTotalCnt=Pattern.compile("<td class=\"PageBuilderWidget\"><span>Total Records[^<]*<b>(\\d+)<\\/b>",Pattern.CASE_INSENSITIVE);
  final Pattern patternRecaptcha=Pattern.compile("<script[^>]*src=\"[^\"]*/recaptcha/api/challenge\\?k=([^\"]+)\"[^>]*>",Pattern.CASE_INSENSITIVE);
  final Pattern patternRecaptchaChallenge=Pattern.compile("challenge : '([^']+)'",Pattern.CASE_INSENSITIVE);
  caches.viewstate=findViewstate(page,0);
  caches.viewstate1=findViewstate(page,1);
  if (showCaptcha == true) {
    try {
      String recaptchaJsParam=null;
      final Matcher matcherRecaptcha=patternRecaptcha.matcher(page);
      while (matcherRecaptcha.find()) {
        if (matcherRecaptcha.groupCount() > 0) {
          recaptchaJsParam=matcherRecaptcha.group(1);
        }
      }
      if (recaptchaJsParam != null) {
        final String recaptchaJs=request(false,"www.google.com","/recaptcha/api/challenge","GET","k=" + urlencode_rfc3986(recaptchaJsParam.trim()),0,true).getData();
        if (recaptchaJs != null && recaptchaJs.length() > 0) {
          final Matcher matcherRecaptchaChallenge=patternRecaptchaChallenge.matcher(recaptchaJs);
          while (matcherRecaptchaChallenge.find()) {
            if (matcherRecaptchaChallenge.groupCount() > 0) {
              recaptchaChallenge=matcherRecaptchaChallenge.group(1).trim();
            }
          }
        }
      }
    }
 catch (    Exception e) {
      Log.w(cgSettings.tag,"cgeoBase.parseSearch: Failed to parse recaptcha challenge");
    }
    if (thread != null && recaptchaChallenge != null && recaptchaChallenge.length() > 0) {
      thread.setChallenge(recaptchaChallenge);
      thread.notifyNeed();
    }
  }
  int startPos=-1;
  int endPos=-1;
  startPos=page.indexOf("<div id=\"ctl00_ContentBody_ResultsPanel\"");
  if (startPos == -1) {
    Log.e(cgSettings.tag,"cgeoBase.parseSearch: ID \"ctl00_ContentBody_dlResults\" not found on page");
    return null;
  }
  page=page.substring(startPos);
  startPos=page.indexOf(">");
  endPos=page.indexOf("ctl00_ContentBody_UnitTxt");
  if (startPos == -1 || endPos == -1) {
    Log.e(cgSettings.tag,"cgeoBase.parseSearch: ID \"ctl00_ContentBody_UnitTxt\" not found on page");
    return null;
  }
  page=page.substring(startPos + 1,endPos - startPos + 1);
  final String[] rows=page.split("<tr class=");
  final int rows_count=rows.length;
  for (int z=1; z < rows_count; z++) {
    cgCache cache=new cgCache();
    String row=rows[z];
    if (row.indexOf("images/wpttypes") == -1) {
      continue;
    }
    try {
      final Matcher matcherGuidAndDisabled=patternGuidAndDisabled.matcher(row);
      while (matcherGuidAndDisabled.find()) {
        if (matcherGuidAndDisabled.groupCount() > 0) {
          guids.add(matcherGuidAndDisabled.group(1));
          cache.guid=matcherGuidAndDisabled.group(1);
          if (matcherGuidAndDisabled.group(4) != null) {
            cache.name=Html.fromHtml(matcherGuidAndDisabled.group(4).trim()).toString();
          }
          if (matcherGuidAndDisabled.group(6) != null) {
            cache.location=Html.fromHtml(matcherGuidAndDisabled.group(6).trim()).toString();
          }
          final String attr=matcherGuidAndDisabled.group(2);
          if (attr != null) {
            if (attr.contains("Strike") == true) {
              cache.disabled=true;
            }
 else {
              cache.disabled=false;
            }
            if (attr.contains("OldWarning") == true) {
              cache.archived=true;
            }
 else {
              cache.archived=false;
            }
          }
        }
      }
    }
 catch (    Exception e) {
      Log.w(cgSettings.tag,"cgeoBase.parseSearch: Failed to parse GUID and/or Disabled data");
    }
    if (settings.excludeDisabled == 1 && (cache.disabled == true || cache.archived == true)) {
      cache=null;
      continue;
    }
    String inventoryPre=null;
    try {
      final Matcher matcherCode=patternCode.matcher(row);
      while (matcherCode.find()) {
        if (matcherCode.groupCount() > 0) {
          cache.geocode=matcherCode.group(1).toUpperCase();
        }
      }
    }
 catch (    Exception e) {
      Log.w(cgSettings.tag,"cgeoBase.parseSearch: Failed to parse cache code");
    }
    try {
      final Matcher matcherCacheType=patternCacheType.matcher(row);
      while (matcherCacheType.find()) {
        if (matcherCacheType.groupCount() > 0) {
          cache.type=cacheTypes.get(matcherCacheType.group(1).toLowerCase());
        }
      }
    }
 catch (    Exception e) {
      Log.w(cgSettings.tag,"cgeoBase.parseSearch: Failed to parse cache type");
    }
    try {
      final Matcher matcherDirection=patternDirection.matcher(row);
      while (matcherDirection.find()) {
        if (matcherDirection.groupCount() > 0) {
          cache.directionImg=matcherDirection.group(1);
        }
      }
    }
 catch (    Exception e) {
      Log.w(cgSettings.tag,"cgeoBase.parseSearch: Failed to parse cache direction image");
    }
    try {
      final Matcher matcherTbs=patternTbs.matcher(row);
      while (matcherTbs.find()) {
        if (matcherTbs.groupCount() > 0) {
          cache.inventoryItems=Integer.parseInt(matcherTbs.group(1));
          inventoryPre=matcherTbs.group(2);
        }
      }
    }
 catch (    Exception e) {
      Log.w(cgSettings.tag,"cgeoBase.parseSearch: Failed to parse cache inventory (1)");
    }
    if (inventoryPre != null && inventoryPre.trim().length() > 0) {
      try {
        final Matcher matcherTbsInside=patternTbsInside.matcher(inventoryPre);
        while (matcherTbsInside.find()) {
          if (matcherTbsInside.groupCount() == 2 && matcherTbsInside.group(2) != null) {
            final String inventoryItem=matcherTbsInside.group(2).toLowerCase();
            if (inventoryItem.equals("premium member only cache")) {
              continue;
            }
 else {
              if (cache.inventoryItems <= 0) {
                cache.inventoryItems=1;
              }
            }
          }
        }
      }
 catch (      Exception e) {
        Log.w(cgSettings.tag,"cgeoBase.parseSearch: Failed to parse cache inventory info");
      }
    }
    if (row.indexOf("/images/small_profile.gif") != -1) {
      cache.members=true;
    }
 else {
      cache.members=false;
    }
    if (row.indexOf("/images/icons/icon_smile") != -1) {
      cache.found=true;
    }
 else {
      cache.found=false;
    }
    if (row.indexOf("/images/silk/star.png") != -1) {
      cache.own=true;
    }
 else {
      cache.own=false;
    }
    try {
      final Matcher matcherId=patternId.matcher(row);
      while (matcherId.find()) {
        if (matcherId.groupCount() > 0) {
          cache.cacheid=matcherId.group(1);
          cids.add(cache.cacheid);
        }
      }
    }
 catch (    Exception e) {
      Log.w(cgSettings.tag,"cgeoBase.parseSearch: Failed to parse cache id");
    }
    try {
      final Matcher matcherFavourite=patternFavourite.matcher(row);
      while (matcherFavourite.find()) {
        if (matcherFavourite.groupCount() > 0) {
          cache.favouriteCnt=Integer.parseInt(matcherFavourite.group(1));
        }
      }
    }
 catch (    Exception e) {
      Log.w(cgSettings.tag,"cgeoBase.parseSearch: Failed to parse favourite count");
    }
    if (cache.nameSp == null) {
      cache.nameSp=(new Spannable.Factory()).newSpannable(cache.name);
      if (cache.disabled == true || cache.archived == true) {
        cache.nameSp.setSpan(new StrikethroughSpan(),0,cache.nameSp.toString().length(),Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);
      }
    }
    caches.cacheList.add(cache);
  }
  try {
    final Matcher matcherTotalCnt=patternTotalCnt.matcher(page);
    while (matcherTotalCnt.find()) {
      if (matcherTotalCnt.groupCount() > 0) {
        if (matcherTotalCnt.group(1) != null) {
          caches.totalCnt=new Integer(matcherTotalCnt.group(1));
        }
      }
    }
  }
 catch (  Exception e) {
    Log.w(cgSettings.tag,"cgeoBase.parseSearch: Failed to parse cache count");
  }
  if (thread != null && recaptchaChallenge != null) {
    if (thread.getText() == null) {
      thread.waitForUser();
    }
    recaptchaText=thread.getText();
  }
  if (cids.size() > 0 && (recaptchaChallenge == null || (recaptchaChallenge != null && recaptchaText != null && recaptchaText.length() > 0))) {
    Log.i(cgSettings.tag,"Trying to get .loc for " + cids.size() + " caches");
    try {
      final String host="www.geocaching.com";
      final String path="/seek/nearest.aspx";
      final StringBuilder params=new StringBuilder();
      params.append("__EVENTTARGET=");
      params.append("&");
      params.append("__EVENTARGUMENT=");
      params.append("&");
      params.append("__VIEWSTATE=");
      params.append(urlencode_rfc3986(caches.viewstate));
      if (caches.viewstate1 != null) {
        params.append("&");
        params.append("__VIEWSTATE1=");
        params.append(urlencode_rfc3986(caches.viewstate1));
        params.append("&");
        params.append("__VIEWSTATEFIELDCOUNT=2");
      }
      for (      String cid : cids) {
        params.append("&");
        params.append("CID=");
        params.append(urlencode_rfc3986(cid));
      }
      if (recaptchaChallenge != null && recaptchaText != null && recaptchaText.length() > 0) {
        params.append("&");
        params.append("recaptcha_challenge_field=");
        params.append(urlencode_rfc3986(recaptchaChallenge));
        params.append("&");
        params.append("recaptcha_response_field=");
        params.append(urlencode_rfc3986(recaptchaText));
      }
      params.append("&");
      params.append("ctl00%24ContentBody%24uxDownloadLoc=Download+Waypoints");
      final String coordinates=request(false,host,path,"POST",params.toString(),0,true).getData();
      if (coordinates != null && coordinates.length() > 0) {
        if (coordinates.indexOf("You have not agreed to the license agreement. The license agreement is required before you can start downloading GPX or LOC files from Geocaching.com") > -1) {
          Log.i(cgSettings.tag,"User has not agreed to the license agreement. Can\'t download .loc file.");
          caches.error=errorRetrieve.get(-7);
          return caches;
        }
      }
      if (coordinates != null && coordinates.length() > 0) {
        final HashMap<String,cgCoord> cidCoords=new HashMap<String,cgCoord>();
        final Pattern patternCidCode=Pattern.compile("name id=\"([^\"]+)\"");
        final Pattern patternCidLat=Pattern.compile("lat=\"([^\"]+)\"");
        final Pattern patternCidLon=Pattern.compile("lon=\"([^\"]+)\"");
        final Pattern patternCidDif=Pattern.compile("<difficulty>([^<]+)</difficulty>");
        final Pattern patternCidTer=Pattern.compile("<terrain>([^<]+)</terrain>");
        final Pattern patternCidCon=Pattern.compile("<container>([^<]+)</container>");
        final String[] points=coordinates.split("<waypoint>");
        for (        String point : points) {
          final cgCoord pointCoord=new cgCoord();
          final Matcher matcherCidCode=patternCidCode.matcher(point);
          final Matcher matcherLatCode=patternCidLat.matcher(point);
          final Matcher matcherLonCode=patternCidLon.matcher(point);
          final Matcher matcherDifCode=patternCidDif.matcher(point);
          final Matcher matcherTerCode=patternCidTer.matcher(point);
          final Matcher matcherConCode=patternCidCon.matcher(point);
          HashMap<String,Object> tmp=null;
          if (matcherCidCode.find() == true) {
            pointCoord.name=matcherCidCode.group(1).trim().toUpperCase();
          }
          if (matcherLatCode.find() == true) {
            tmp=parseCoordinate(matcherLatCode.group(1),"lat");
            pointCoord.latitude=(Double)tmp.get("coordinate");
          }
          if (matcherLonCode.find() == true) {
            tmp=parseCoordinate(matcherLonCode.group(1),"lon");
            pointCoord.longitude=(Double)tmp.get("coordinate");
          }
          if (matcherDifCode.find() == true) {
            pointCoord.difficulty=new Float(matcherDifCode.group(1));
          }
          if (matcherTerCode.find() == true) {
            pointCoord.terrain=new Float(matcherTerCode.group(1));
          }
          if (matcherConCode.find() == true) {
            final int size=Integer.parseInt(matcherConCode.group(1));
            if (size == 1) {
              pointCoord.size="not chosen";
            }
 else             if (size == 2) {
              pointCoord.size="micro";
            }
 else             if (size == 3) {
              pointCoord.size="regular";
            }
 else             if (size == 4) {
              pointCoord.size="large";
            }
 else             if (size == 5) {
              pointCoord.size="virtual";
            }
 else             if (size == 6) {
              pointCoord.size="other";
            }
 else             if (size == 8) {
              pointCoord.size="small";
            }
 else {
              pointCoord.size="unknown";
            }
          }
          cidCoords.put(pointCoord.name,pointCoord);
        }
        Log.i(cgSettings.tag,"Coordinates found in .loc file: " + cidCoords.size());
        for (        cgCache oneCache : caches.cacheList) {
          if (cidCoords.containsKey(oneCache.geocode) == true) {
            cgCoord thisCoords=cidCoords.get(oneCache.geocode);
            oneCache.latitude=thisCoords.latitude;
            oneCache.longitude=thisCoords.longitude;
            oneCache.difficulty=thisCoords.difficulty;
            oneCache.terrain=thisCoords.terrain;
            oneCache.size=thisCoords.size;
          }
        }
      }
    }
 catch (    Exception e) {
      Log.e(cgSettings.tag,"cgBase.parseSearch.CIDs: " + e.toString());
    }
  }
  for (  cgCache oneCache : caches.cacheList) {
    if (oneCache.latitude == null && oneCache.longitude == null && oneCache.direction == null && oneCache.directionImg != null) {
      cgDirectionImg.getDrawable(oneCache.geocode,oneCache.directionImg);
    }
  }
  if (guids.size() > 0) {
    Log.i(cgSettings.tag,"Trying to get ratings for " + cids.size() + " caches");
    try {
      final HashMap<String,cgRating> ratings=getRating(guids,null);
      if (ratings != null) {
        for (        cgCache oneCache : caches.cacheList) {
          if (ratings.containsKey(oneCache.guid) == true) {
            cgRating thisRating=ratings.get(oneCache.guid);
            oneCache.rating=thisRating.rating;
            oneCache.votes=thisRating.votes;
            oneCache.myVote=thisRating.myVote;
          }
        }
      }
    }
 catch (    Exception e) {
      Log.e(cgSettings.tag,"cgBase.parseSearch.GCvote: " + e.toString());
    }
  }
  return caches;
}
