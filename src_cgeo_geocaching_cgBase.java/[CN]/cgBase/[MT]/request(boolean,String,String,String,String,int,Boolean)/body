{
  URL u=null;
  int httpCode=-1;
  String httpMessage=null;
  String httpLocation=null;
  if (requestId == 0) {
    requestId=(int)(Math.random() * 1000);
  }
  if (method == null || (method.equalsIgnoreCase("GET") == false && method.equalsIgnoreCase("POST") == false)) {
    method="POST";
  }
 else {
    method=method.toUpperCase();
  }
  String scheme="http://";
  if (secure) {
    scheme="https://";
  }
  String cookiesDone=null;
  if (cookies == null || cookies.isEmpty() == true) {
    if (cookies == null) {
      cookies=new HashMap<String,String>();
    }
    final Map<String,?> prefsAll=prefs.getAll();
    final Set<String> prefsKeys=prefsAll.keySet();
    for (    String key : prefsKeys) {
      if (key.matches("cookie_.+") == true) {
        final String cookieKey=key.substring(7);
        final String cookieValue=(String)prefsAll.get(key);
        cookies.put(cookieKey,cookieValue);
      }
    }
  }
  if (cookies != null && !cookies.isEmpty() && cookies.keySet().size() > 0) {
    final Object[] keys=cookies.keySet().toArray();
    final ArrayList<String> cookiesEncoded=new ArrayList<String>();
    for (int i=0; i < keys.length; i++) {
      String value=cookies.get(keys[i].toString());
      cookiesEncoded.add(keys[i] + "=" + value);
    }
    if (cookiesEncoded.size() > 0) {
      cookiesDone=implode("; ",cookiesEncoded.toArray());
    }
  }
  if (cookiesDone == null) {
    Map<String,?> prefsValues=prefs.getAll();
    if (prefsValues != null && prefsValues.size() > 0 && prefsValues.keySet().size() > 0) {
      final Object[] keys=prefsValues.keySet().toArray();
      final ArrayList<String> cookiesEncoded=new ArrayList<String>();
      final int length=keys.length;
      for (int i=0; i < length; i++) {
        if (keys[i].toString().length() > 7 && keys[i].toString().substring(0,7).equals("cookie_") == true) {
          cookiesEncoded.add(keys[i].toString().substring(7) + "=" + prefsValues.get(keys[i].toString()));
        }
      }
      if (cookiesEncoded.size() > 0) {
        cookiesDone=implode("; ",cookiesEncoded.toArray());
      }
    }
  }
  if (cookiesDone == null) {
    cookiesDone="";
  }
  URLConnection uc=null;
  HttpURLConnection connection=null;
  Integer timeout=30000;
  StringBuffer buffer=null;
  for (int i=0; i < 5; i++) {
    if (i > 0) {
      Log.w(cgSettings.tag,"Failed to download data, retrying. Attempt #" + (i + 1));
    }
    buffer=new StringBuffer();
    timeout=30000 + (i * 10000);
    try {
      if (method.equals("GET")) {
        u=new URL(scheme + host + path+ "?"+ params);
        uc=u.openConnection();
        uc.setRequestProperty("Host",host);
        uc.setRequestProperty("Cookie",cookiesDone);
        if (xContentType == true) {
          uc.setRequestProperty("Content-Type","application/x-www-form-urlencoded");
        }
        if (settings.asBrowser == 1) {
          uc.setRequestProperty("Accept","application/xml,application/xhtml+xml,text/html;q=0.9,text/plain;q=0.8,image/png,*/*;q=0.5");
          uc.setRequestProperty("Accept-Charset","utf-8, iso-8859-1, utf-16, *;q=0.7");
          uc.setRequestProperty("Accept-Language","en-US");
          uc.setRequestProperty("User-Agent",idBrowser);
          uc.setRequestProperty("Connection","keep-alive");
          uc.setRequestProperty("Keep-Alive","300");
        }
        connection=(HttpURLConnection)uc;
        connection.setReadTimeout(timeout);
        connection.setRequestMethod(method);
        HttpURLConnection.setFollowRedirects(false);
        connection.setDoInput(true);
        connection.setDoOutput(false);
      }
 else {
        u=new URL(scheme + host + path);
        uc=u.openConnection();
        uc.setRequestProperty("Host",host);
        uc.setRequestProperty("Cookie",cookiesDone);
        if (xContentType == true) {
          uc.setRequestProperty("Content-Type","application/x-www-form-urlencoded");
        }
        if (settings.asBrowser == 1) {
          uc.setRequestProperty("Accept","application/xml,application/xhtml+xml,text/html;q=0.9,text/plain;q=0.8,image/png,*/*;q=0.5");
          uc.setRequestProperty("Accept-Charset","utf-8, iso-8859-1, utf-16, *;q=0.7");
          uc.setRequestProperty("Accept-Language","en-US");
          uc.setRequestProperty("User-Agent",idBrowser);
          uc.setRequestProperty("Connection","keep-alive");
          uc.setRequestProperty("Keep-Alive","300");
        }
        connection=(HttpURLConnection)uc;
        connection.setReadTimeout(timeout);
        connection.setRequestMethod(method);
        HttpURLConnection.setFollowRedirects(false);
        connection.setDoInput(true);
        connection.setDoOutput(true);
        final OutputStream out=connection.getOutputStream();
        final OutputStreamWriter wr=new OutputStreamWriter(out);
        wr.write(params);
        wr.flush();
        wr.close();
      }
      String headerName=null;
      final SharedPreferences.Editor prefsEditor=prefs.edit();
      for (int j=1; (headerName=uc.getHeaderFieldKey(j)) != null; j++) {
        if (headerName != null && headerName.equalsIgnoreCase("Set-Cookie")) {
          int index;
          String cookie=uc.getHeaderField(j);
          index=cookie.indexOf(";");
          if (index > -1) {
            cookie=cookie.substring(0,cookie.indexOf(";"));
          }
          index=cookie.indexOf("=");
          if (index > -1 && cookie.length() > (index + 1)) {
            String name=cookie.substring(0,cookie.indexOf("="));
            String value=cookie.substring(cookie.indexOf("=") + 1,cookie.length());
            cookies.put(name,value);
            prefsEditor.putString("cookie_" + name,value);
          }
        }
      }
      prefsEditor.commit();
      final String encoding=connection.getContentEncoding();
      InputStream ins;
      if (encoding != null && encoding.equalsIgnoreCase("gzip")) {
        ins=new GZIPInputStream(connection.getInputStream());
      }
 else       if (encoding != null && encoding.equalsIgnoreCase("deflate")) {
        ins=new InflaterInputStream(connection.getInputStream(),new Inflater(true));
      }
 else {
        ins=connection.getInputStream();
      }
      final InputStreamReader inr=new InputStreamReader(ins);
      final BufferedReader br=new BufferedReader(inr,16 * 1024);
      readIntoBuffer(br,buffer);
      httpCode=connection.getResponseCode();
      httpMessage=connection.getResponseMessage();
      httpLocation=uc.getHeaderField("Location");
      final String paramsLog=params.replaceAll(passMatch,"password=***");
      if (buffer != null && connection != null) {
        Log.i(cgSettings.tag + "|" + requestId,"[" + method + " "+ (int)(params.length() / 1024)+ "k | "+ httpCode+ " | "+ (int)(buffer.length() / 1024)+ "k] Downloaded "+ scheme+ host+ path+ "?"+ paramsLog);
      }
 else {
        Log.i(cgSettings.tag + "|" + requestId,"[" + method + " | "+ httpCode+ "] Failed to download "+ scheme+ host+ path+ "?"+ paramsLog);
      }
      connection.disconnect();
      br.close();
      ins.close();
      inr.close();
    }
 catch (    IOException e) {
      Log.e(cgSettings.tag,"cgeoBase.request.IOException: " + e.toString());
    }
catch (    Exception e) {
      Log.e(cgSettings.tag,"cgeoBase.request: " + e.toString());
    }
    if (buffer != null && buffer.length() > 0) {
      break;
    }
  }
  cgResponse response=new cgResponse();
  String data=null;
  try {
    if (httpCode == 302 && httpLocation != null) {
      final Uri newLocation=Uri.parse(httpLocation);
      if (newLocation.isRelative() == true) {
        response=request(secure,host,path,"GET",new HashMap<String,String>(),requestId,false,false,false);
      }
 else {
        boolean secureRedir=false;
        if (newLocation.getScheme().equals("https")) {
          secureRedir=true;
        }
        response=request(secureRedir,newLocation.getHost(),newLocation.getPath(),"GET",new HashMap<String,String>(),requestId,false,false,false);
      }
    }
 else {
      if (buffer != null && buffer.length() > 0) {
        data=replaceWhitespace(buffer);
        buffer=null;
        if (data != null) {
          response.setData(data);
        }
 else {
          response.setData("");
        }
        response.setStatusCode(httpCode);
        response.setStatusMessage(httpMessage);
        response.setUrl(u.toString());
      }
    }
  }
 catch (  Exception e) {
    Log.e(cgSettings.tag,"cgeoBase.page: " + e.toString());
  }
  return response;
}
