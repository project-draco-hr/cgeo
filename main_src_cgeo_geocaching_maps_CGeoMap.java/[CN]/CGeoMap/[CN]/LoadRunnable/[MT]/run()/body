{
  try {
    showProgressHandler.sendEmptyMessage(SHOW_PROGRESS);
    loadThreadRun=System.currentTimeMillis();
    SearchResult searchResult;
    if (mapMode == MapMode.LIVE) {
      if (isLiveEnabled) {
        searchResult=new SearchResult();
      }
 else {
        searchResult=new SearchResult(app.getStoredInViewport(viewport,Settings.getCacheType()));
      }
    }
 else {
      searchResult=new SearchResult(searchIntent);
      if (geocodeIntent != null) {
        searchResult.addGeocode(geocodeIntent);
      }
    }
    if (isLiveEnabled) {
      SearchResult liveResult=new SearchResult(app.getCachedInViewport(viewport,Settings.getCacheType()));
      searchResult.addGeocodes(liveResult.getGeocodes());
    }
    downloaded=true;
    Set<cgCache> cachesFromSearchResult=searchResult.getCachesFromSearchResult(LoadFlags.LOAD_WAYPOINTS);
    caches.removeAll(cachesFromSearchResult);
    caches.addAll(cachesFromSearchResult);
    if (mapMode == MapMode.LIVE) {
      final boolean excludeMine=Settings.isExcludeMyCaches();
      final boolean excludeDisabled=Settings.isExcludeDisabledCaches();
      final List<cgCache> tempList=caches.getAsList();
      for (      cgCache cache : tempList) {
        if ((cache.isFound() && excludeMine) || (cache.isOwner() && excludeMine) || (cache.isDisabled() && excludeDisabled)) {
          caches.remove(cache);
        }
      }
    }
    countVisibleCaches();
    if (cachesCnt < Settings.getWayPointsThreshold() || geocodeIntent != null) {
      waypoints.clear();
      if (isLiveEnabled || mapMode == MapMode.COORDS) {
        CacheType type=Settings.getCacheType();
        Set<cgWaypoint> waypointsInViewport=app.getWaypointsInViewport(viewport,Settings.isExcludeMyCaches(),Settings.isExcludeDisabledCaches(),type);
        waypoints.addAll(waypointsInViewport);
      }
 else {
        for (        cgCache c : caches.getAsList()) {
          waypoints.addAll(c.getWaypoints());
        }
      }
    }
    displayExecutor.execute(new DisplayRunnable(viewport));
    if (isLiveEnabled) {
      downloadExecutor.execute(new DownloadRunnable(viewport));
    }
    lastSearchResult=searchResult;
  }
  finally {
    showProgressHandler.sendEmptyMessage(HIDE_PROGRESS);
  }
}
