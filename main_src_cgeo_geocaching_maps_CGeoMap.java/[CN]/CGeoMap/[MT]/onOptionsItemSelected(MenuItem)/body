{
  final int id=item.getItemId();
switch (id) {
case R.id.menu_trail_mode:
    Settings.setMapTrail(!Settings.isMapTrail());
  mapView.repaintRequired(overlayPosition);
ActivityMixin.invalidateOptionsMenu(activity);
return true;
case R.id.menu_map_live:
isLiveEnabled=!isLiveEnabled;
if (mapMode == MapMode.LIVE) {
Settings.setLiveMap(isLiveEnabled);
}
liveChanged=true;
lastSearchResult=null;
searchIntent=null;
ActivityMixin.invalidateOptionsMenu(activity);
return true;
case R.id.menu_store_caches:
if (!isLoading()) {
final Set<String> geocodesInViewport=getGeocodesForCachesInViewport();
final List<String> geocodes=new ArrayList<String>();
for (final String geocode : geocodesInViewport) {
if (!cgData.isOffline(geocode,null)) {
geocodes.add(geocode);
}
}
detailTotal=geocodes.size();
detailProgress=0;
if (detailTotal == 0) {
ActivityMixin.showToast(activity,res.getString(R.string.warn_save_nothing));
return true;
}
if (Settings.getChooseList()) {
new StoredList.UserInterface(activity).promptForListSelection(R.string.list_title,new RunnableWithArgument<Integer>(){
@Override public void run(final Integer selectedListId){
storeCaches(geocodes,selectedListId);
}
}
,true,StoredList.TEMPORARY_LIST_ID);
}
 else {
storeCaches(geocodes,StoredList.STANDARD_LIST_ID);
}
}
return true;
case R.id.menu_circle_mode:
if (overlayCaches == null) {
return false;
}
overlayCaches.switchCircles();
mapView.repaintRequired(overlayCaches);
ActivityMixin.invalidateOptionsMenu(activity);
return true;
case R.id.menu_theme_mode:
selectMapTheme();
return true;
case R.id.menu_as_list:
{
cgeocaches.startActivityMap(activity,new SearchResult(getGeocodesForCachesInViewport()));
return true;
}
case R.id.menu_strategy_fastest:
{
item.setChecked(true);
Settings.setLiveMapStrategy(Strategy.FASTEST);
return true;
}
case R.id.menu_strategy_fast:
{
item.setChecked(true);
Settings.setLiveMapStrategy(Strategy.FAST);
return true;
}
case R.id.menu_strategy_auto:
{
item.setChecked(true);
Settings.setLiveMapStrategy(Strategy.AUTO);
return true;
}
case R.id.menu_strategy_detailed:
{
item.setChecked(true);
Settings.setLiveMapStrategy(Strategy.DETAILED);
return true;
}
default :
final MapSource mapSource=MapProviderFactory.getMapSource(id);
if (mapSource != null) {
item.setChecked(true);
changeMapSource(mapSource);
return true;
}
}
return false;
}
