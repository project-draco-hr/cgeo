{
  final int id=item.getItemId();
switch (id) {
case MENU_TRAIL_MODE:
    Settings.setMapTrail(!Settings.isMapTrail());
  ActivityMixin.invalidateOptionsMenu(activity);
return true;
case MENU_MAP_LIVE:
Settings.setLiveMap(!Settings.isLiveMap());
liveChanged=true;
search=null;
searchIntent=null;
ActivityMixin.invalidateOptionsMenu(activity);
return true;
case MENU_STORE_CACHES:
if (live && !isLoading() && CollectionUtils.isNotEmpty(caches)) {
final List<String> geocodes=new ArrayList<String>();
List<cgCache> cachesProtected=new ArrayList<cgCache>(caches);
try {
if (cachesProtected.size() > 0) {
final GeoPointImpl mapCenter=mapView.getMapViewCenter();
final int mapCenterLat=mapCenter.getLatitudeE6();
final int mapCenterLon=mapCenter.getLongitudeE6();
final int mapSpanLat=mapView.getLatitudeSpan();
final int mapSpanLon=mapView.getLongitudeSpan();
for (cgCache cache : cachesProtected) {
if (cache != null && cache.getCoords() != null) {
if (Viewport.isCacheInViewPort(mapCenterLat,mapCenterLon,mapSpanLat,mapSpanLon,cache.getCoords()) && !app.isOffline(cache.getGeocode(),null)) {
geocodes.add(cache.getGeocode());
}
}
}
}
}
 catch (Exception e) {
Log.e(Settings.tag,"cgeomap.onOptionsItemSelected.#4: " + e.toString());
}
detailTotal=geocodes.size();
detailProgress=0;
if (detailTotal == 0) {
ActivityMixin.showToast(activity,res.getString(R.string.warn_save_nothing));
return true;
}
final LoadDetailsHandler loadDetailsHandler=new LoadDetailsHandler();
waitDialog=new ProgressDialog(activity);
waitDialog.setProgressStyle(ProgressDialog.STYLE_HORIZONTAL);
waitDialog.setCancelable(true);
waitDialog.setCancelMessage(loadDetailsHandler.cancelMessage());
waitDialog.setMax(detailTotal);
waitDialog.setOnCancelListener(new DialogInterface.OnCancelListener(){
public void onCancel(DialogInterface arg0){
try {
if (loadDetailsThread != null) {
loadDetailsThread.stopIt();
}
if (geo == null) {
geo=app.startGeo(geoUpdate);
}
if (Settings.isUseCompass() && dir == null) {
dir=app.startDir(activity,dirUpdate);
}
}
 catch (Exception e) {
Log.e(Settings.tag,"cgeocaches.onPrepareOptionsMenu.onCancel: " + e.toString());
}
}
}
);
float etaTime=detailTotal * 7.0f / 60.0f;
if (etaTime < 0.4) {
waitDialog.setMessage(res.getString(R.string.caches_downloading) + " " + res.getString(R.string.caches_eta_ltm));
}
 else if (etaTime < 1.5) {
waitDialog.setMessage(res.getString(R.string.caches_downloading) + " " + Math.round(etaTime)+ " "+ res.getString(R.string.caches_eta_min));
}
 else {
waitDialog.setMessage(res.getString(R.string.caches_downloading) + " " + Math.round(etaTime)+ " "+ res.getString(R.string.caches_eta_mins));
}
waitDialog.show();
detailProgressTime=System.currentTimeMillis();
loadDetailsThread=new LoadDetails(loadDetailsHandler,geocodes);
loadDetailsThread.start();
}
return true;
case MENU_CIRCLE_MODE:
if (overlayCaches == null) {
return false;
}
overlayCaches.switchCircles();
mapView.repaintRequired(overlayCaches);
ActivityMixin.invalidateOptionsMenu(activity);
return true;
case MENU_AS_LIST:
{
final SearchResult searchResult=new SearchResult();
search.totalCnt=caches.size();
for (cgCache cache : caches) {
searchResult.addCache(cache);
}
cgeocaches.startActivityMap(activity,search);
return true;
}
case MENU_STRATEGY_FASTEST:
{
item.setChecked(true);
Settings.setLiveMapStrategy(Strategy.FASTEST);
return true;
}
case MENU_STRATEGY_FAST:
{
item.setChecked(true);
Settings.setLiveMapStrategy(Strategy.FAST);
return true;
}
case MENU_STRATEGY_AUTO:
{
item.setChecked(true);
Settings.setLiveMapStrategy(Strategy.AUTO);
return true;
}
case MENU_STRATEGY_DETAILED:
{
item.setChecked(true);
Settings.setLiveMapStrategy(Strategy.DETAILED);
return true;
}
default :
if (MapProviderFactory.isValidSourceId(MapProviderFactory.getMapSourceFromMenuId(id))) {
item.setChecked(true);
int mapSource=MapProviderFactory.getMapSourceFromMenuId(id);
changeMapSource(mapSource);
return true;
}
}
return false;
}
