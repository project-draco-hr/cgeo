{
  final int id=item.getItemId();
switch (id) {
case MENU_TRAIL_MODE:
    Settings.setMapTrail(!Settings.isMapTrail());
  ActivityMixin.invalidateOptionsMenu(activity);
return true;
case MENU_MAP_LIVE:
Settings.setLiveMap(!Settings.isLiveMap());
mapMode=Settings.isLiveMap() ? MapMode.LIVE_ONLINE : MapMode.LIVE_OFFLINE;
liveChanged=true;
lastSearchResult=null;
searchIntent=null;
ActivityMixin.invalidateOptionsMenu(activity);
return true;
case MENU_STORE_CACHES:
if (!isLoading()) {
final Set<String> geocodesInViewport=getGeocodesForCachesInViewport();
final List<String> geocodes=new ArrayList<String>();
for (final String geocode : geocodesInViewport) {
if (!app.isOffline(geocode,null)) {
geocodes.add(geocode);
}
}
detailTotal=geocodes.size();
detailProgress=0;
if (detailTotal == 0) {
ActivityMixin.showToast(activity,res.getString(R.string.warn_save_nothing));
return true;
}
final LoadDetailsHandler loadDetailsHandler=new LoadDetailsHandler();
waitDialog=new ProgressDialog(activity);
waitDialog.setProgressStyle(ProgressDialog.STYLE_HORIZONTAL);
waitDialog.setCancelable(true);
waitDialog.setCancelMessage(loadDetailsHandler.cancelMessage());
waitDialog.setMax(detailTotal);
waitDialog.setOnCancelListener(new DialogInterface.OnCancelListener(){
@Override public void onCancel(DialogInterface arg0){
try {
if (loadDetailsThread != null) {
loadDetailsThread.stopIt();
}
geoDirUpdate.startDir();
}
 catch (Exception e) {
Log.e("cgeocaches.onPrepareOptionsMenu.onCancel: " + e.toString());
}
}
}
);
float etaTime=detailTotal * 7.0f / 60.0f;
int roundedEta=Math.round(etaTime);
if (etaTime < 0.4) {
waitDialog.setMessage(res.getString(R.string.caches_downloading) + " " + res.getString(R.string.caches_eta_ltm));
}
 else {
waitDialog.setMessage(res.getString(R.string.caches_downloading) + " " + roundedEta+ " "+ res.getQuantityString(R.plurals.caches_eta_mins,roundedEta));
}
waitDialog.show();
detailProgressTime=System.currentTimeMillis();
loadDetailsThread=new LoadDetails(loadDetailsHandler,geocodes);
loadDetailsThread.start();
}
return true;
case MENU_CIRCLE_MODE:
if (overlayCaches == null) {
return false;
}
overlayCaches.switchCircles();
mapView.repaintRequired(overlayCaches);
ActivityMixin.invalidateOptionsMenu(activity);
return true;
case MENU_AS_LIST:
{
cgeocaches.startActivityMap(activity,new SearchResult(getGeocodesForCachesInViewport()));
return true;
}
case MENU_STRATEGY_FASTEST:
{
item.setChecked(true);
Settings.setLiveMapStrategy(Strategy.FASTEST);
return true;
}
case MENU_STRATEGY_FAST:
{
item.setChecked(true);
Settings.setLiveMapStrategy(Strategy.FAST);
return true;
}
case MENU_STRATEGY_AUTO:
{
item.setChecked(true);
Settings.setLiveMapStrategy(Strategy.AUTO);
return true;
}
case MENU_STRATEGY_DETAILED:
{
item.setChecked(true);
Settings.setLiveMapStrategy(Strategy.DETAILED);
return true;
}
default :
int mapSource=MapProviderFactory.getMapSourceFromMenuId(id);
if (MapProviderFactory.isValidSourceId(mapSource)) {
item.setChecked(true);
changeMapSource(mapSource);
return true;
}
}
return false;
}
