{
  final int id=item.getItemId();
switch (id) {
case android.R.id.home:
    ActivityMixin.navigateUp(activity);
  return true;
case R.id.menu_trail_mode:
Settings.setMapTrail(!Settings.isMapTrail());
mapView.repaintRequired(overlayPositionAndScale);
ActivityMixin.invalidateOptionsMenu(activity);
return true;
case R.id.menu_direction_line:
Settings.setMapDirection(!Settings.isMapDirection());
mapView.repaintRequired(overlayPositionAndScale);
ActivityMixin.invalidateOptionsMenu(activity);
return true;
case R.id.menu_map_live:
mapOptions.isLiveEnabled=!mapOptions.isLiveEnabled;
if (mapOptions.mapMode == MapMode.LIVE) {
Settings.setLiveMap(mapOptions.isLiveEnabled);
}
markersInvalidated=true;
lastSearchResult=null;
mapOptions.searchResult=null;
ActivityMixin.invalidateOptionsMenu(activity);
if (mapOptions.mapMode != MapMode.SINGLE) {
mapOptions.title=StringUtils.EMPTY;
}
updateMapTitle();
return true;
case R.id.menu_store_caches:
if (!isLoading()) {
final Set<String> geocodesInViewport=getGeocodesForCachesInViewport();
final List<String> geocodes=new ArrayList<>();
for (final String geocode : geocodesInViewport) {
if (!DataStore.isOffline(geocode,null)) {
geocodes.add(geocode);
}
}
detailTotal=geocodes.size();
detailProgress=0;
if (detailTotal == 0) {
ActivityMixin.showToast(activity,res.getString(R.string.warn_save_nothing));
return true;
}
if (Settings.getChooseList()) {
new StoredList.UserInterface(activity).promptForMultiListSelection(R.string.list_title,new Action1<Set<Integer>>(){
@Override public void call(final Set<Integer> selectedListIds){
storeCaches(geocodes,selectedListIds);
}
}
,true,Collections.singleton(StoredList.TEMPORARY_LIST.id));
}
 else {
storeCaches(geocodes,Collections.singleton(StoredList.STANDARD_LIST_ID));
}
}
return true;
case R.id.menu_circle_mode:
overlayCaches.switchCircles();
mapView.repaintRequired(overlayCaches);
ActivityMixin.invalidateOptionsMenu(activity);
return true;
case R.id.menu_mycaches_mode:
Settings.setExcludeMine(!Settings.isExcludeMyCaches());
markersInvalidated=true;
ActivityMixin.invalidateOptionsMenu(activity);
if (!Settings.isExcludeMyCaches()) {
Tile.cache.clear();
}
return true;
case R.id.menu_disabled_mode:
Settings.setExcludeDisabled(!Settings.isExcludeDisabledCaches());
markersInvalidated=true;
ActivityMixin.invalidateOptionsMenu(activity);
if (!Settings.isExcludeDisabledCaches()) {
Tile.cache.clear();
}
return true;
case R.id.menu_theme_mode:
selectMapTheme();
return true;
case R.id.menu_as_list:
{
CacheListActivity.startActivityMap(activity,new SearchResult(getGeocodesForCachesInViewport()));
return true;
}
case R.id.menu_strategy_fastest:
{
item.setChecked(true);
Settings.setLiveMapStrategy(LivemapStrategy.FASTEST);
return true;
}
case R.id.menu_strategy_fast:
{
item.setChecked(true);
Settings.setLiveMapStrategy(LivemapStrategy.FAST);
return true;
}
case R.id.menu_strategy_auto:
{
item.setChecked(true);
Settings.setLiveMapStrategy(LivemapStrategy.AUTO);
return true;
}
case R.id.menu_strategy_detailed:
{
item.setChecked(true);
Settings.setLiveMapStrategy(LivemapStrategy.DETAILED);
return true;
}
case R.id.menu_routing_walk:
{
item.setChecked(true);
Settings.setRoutingMode("foot");
mapView.repaintRequired(overlayPositionAndScale);
return true;
}
case R.id.menu_routing_bike:
{
item.setChecked(true);
Settings.setRoutingMode("bicycle");
mapView.repaintRequired(overlayPositionAndScale);
return true;
}
case R.id.menu_routing_car:
{
item.setChecked(true);
Settings.setRoutingMode("motorcar");
mapView.repaintRequired(overlayPositionAndScale);
return true;
}
case R.id.menu_hint:
menuShowHint();
return true;
case R.id.menu_compass:
menuCompass();
return true;
default :
final MapSource mapSource=MapProviderFactory.getMapSource(id);
if (mapSource != null) {
item.setChecked(true);
changeMapSource(mapSource);
return true;
}
}
return false;
}
