{
  if (!centered && mapState != null) {
    try {
      mapController.setCenter(mapProvider.getGeoPointBase(new Geopoint(mapState[0] / 1.0e6,mapState[1] / 1.0e6)));
      mapController.setZoom(mapState[2]);
    }
 catch (    Exception e) {
    }
    centered=true;
    alreadyCentered=true;
  }
 else   if (!centered && (geocodeCenter != null || searchIntent != null)) {
    try {
      List<Number> viewport=null;
      if (geocodeCenter != null) {
        viewport=app.getBounds(geocodeCenter);
      }
 else {
        if (searchCenter != null) {
          viewport=app.getBounds(searchCenter.getGeocodes());
        }
      }
      if (viewport == null || viewport.size() < 5) {
        return;
      }
      int cnt=(Integer)viewport.get(0);
      if (cnt <= 0) {
        return;
      }
      int minLat=(int)((Double)viewport.get(1) * 1e6);
      int maxLat=(int)((Double)viewport.get(2) * 1e6);
      int maxLon=(int)((Double)viewport.get(3) * 1e6);
      int minLon=(int)((Double)viewport.get(4) * 1e6);
      int centerLat=0;
      int centerLon=0;
      if ((Math.abs(maxLat) - Math.abs(minLat)) != 0) {
        centerLat=minLat + ((maxLat - minLat) / 2);
      }
 else {
        centerLat=maxLat;
      }
      if ((Math.abs(maxLon) - Math.abs(minLon)) != 0) {
        centerLon=minLon + ((maxLon - minLon) / 2);
      }
 else {
        centerLon=maxLon;
      }
      mapController.setCenter(mapProvider.getGeoPointBase(new Geopoint(centerLat,centerLon)));
      if (Math.abs(maxLat - minLat) != 0 && Math.abs(maxLon - minLon) != 0) {
        mapController.zoomToSpan(Math.abs(maxLat - minLat),Math.abs(maxLon - minLon));
      }
    }
 catch (    Exception e) {
    }
    centered=true;
    alreadyCentered=true;
  }
 else   if (!centered && coordsCenter != null) {
    try {
      mapController.setCenter(makeGeoPoint(coordsCenter));
    }
 catch (    Exception e) {
    }
    centered=true;
    alreadyCentered=true;
  }
}
