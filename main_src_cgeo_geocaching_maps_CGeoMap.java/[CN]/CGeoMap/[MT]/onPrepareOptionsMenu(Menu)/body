{
  super.onPrepareOptionsMenu(menu);
  for (  final MapSource mapSource : MapProviderFactory.getMapSources()) {
    final MenuItem menuItem=menu.findItem(mapSource.getNumericalId());
    if (menuItem != null) {
      menuItem.setVisible(mapSource.isAvailable());
    }
  }
  try {
    MenuItem item=menu.findItem(R.id.menu_trail_mode);
    item.setChecked(Settings.isMapTrail());
    item=menu.findItem(R.id.menu_map_live);
    if (isLiveEnabled) {
      item.setTitle(res.getString(R.string.map_live_disable));
    }
 else {
      item.setTitle(res.getString(R.string.map_live_enable));
    }
    item=menu.findItem(R.id.menu_mycaches_mode);
    item.setChecked(Settings.isExcludeMyCaches());
    final Set<String> geocodesInViewport=getGeocodesForCachesInViewport();
    menu.findItem(R.id.menu_store_caches).setVisible(!isLoading() && CollectionUtils.isNotEmpty(geocodesInViewport) && new SearchResult(geocodesInViewport).hasUnsavedCaches());
    item=menu.findItem(R.id.menu_circle_mode);
    item.setChecked(overlayCaches.getCircles());
    item=menu.findItem(R.id.menu_theme_mode);
    item.setVisible(mapView.hasMapThemes());
    menu.findItem(R.id.menu_as_list).setVisible(!isLoading());
    menu.findItem(R.id.submenu_strategy).setVisible(isLiveEnabled);
switch (Settings.getLiveMapStrategy()) {
case FASTEST:
      menu.findItem(R.id.menu_strategy_fastest).setChecked(true);
    break;
case FAST:
  menu.findItem(R.id.menu_strategy_fast).setChecked(true);
break;
case AUTO:
menu.findItem(R.id.menu_strategy_auto).setChecked(true);
break;
default :
menu.findItem(R.id.menu_strategy_detailed).setChecked(true);
}
}
 catch (final RuntimeException e) {
Log.e("CGeoMap.onPrepareOptionsMenu",e);
}
return true;
}
