{
  final Resources res=activity.getResources();
  final ImmutablePair<String,String> credentials=getCredentials();
  if (StringUtils.isBlank(credentials.getLeft()) || StringUtils.isBlank(credentials.getRight())) {
    ActivityMixin.showToast(activity,R.string.err_missing_auth);
    return false;
  }
  final ProgressDialog loginDialog=ProgressDialog.show(activity,res.getString(R.string.init_login_popup),res.getString(R.string.init_login_popup_working),true);
  loginDialog.setCancelable(false);
  Cookies.clearCookies();
  AndroidObservable.bindActivity(activity,Async.start(new Func0<ImmutablePair<StatusCode,? extends Drawable>>(){
    @Override public ImmutablePair<StatusCode,? extends Drawable> call(){
      return login();
    }
  }
)).subscribe(new Action1<ImmutablePair<StatusCode,? extends Drawable>>(){
    @Override public void call(    final ImmutablePair<StatusCode,? extends Drawable> loginInfo){
      loginDialog.dismiss();
      if (loginInfo.getLeft() == StatusCode.NO_ERROR) {
        Dialogs.message(activity,R.string.init_login_popup,R.string.init_login_popup_ok,loginInfo.getRight());
      }
 else {
        Dialogs.message(activity,R.string.init_login_popup,res.getString(R.string.init_login_popup_failed_reason) + " " + loginInfo.getLeft().getErrorString(res)+ ".");
      }
      activity.initBasicMemberPreferences();
    }
  }
,Schedulers.io());
  return false;
}
