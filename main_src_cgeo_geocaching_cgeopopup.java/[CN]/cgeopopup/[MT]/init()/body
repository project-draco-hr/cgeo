{
  app.setAction(geocode);
  cache=app.loadCache(geocode,LoadFlags.LOAD_CACHE_OR_DB);
  if (cache == null) {
    showToast(res.getString(R.string.err_detail_cache_find));
    finish();
    return;
  }
  if (CacheType.UNKNOWN == cache.getType()) {
    Set<String> geocodes=new HashSet<String>();
    geocodes.add(geocode);
    SearchResult search=ConnectorFactory.searchByGeocodes(geocodes);
    cache=search.getFirstCacheFromResult(LoadFlags.LOAD_CACHE_ONLY);
  }
  try {
    RelativeLayout itemLayout;
    TextView itemName;
    TextView itemValue;
    LinearLayout itemStars;
    if (StringUtils.isNotBlank(cache.getName())) {
      setTitle(cache.getName());
    }
 else {
      setTitle(geocode.toUpperCase());
    }
    inflater=getLayoutInflater();
    geocode=cache.getGeocode().toUpperCase();
    LinearLayout detailsList=(LinearLayout)findViewById(R.id.details_list);
    detailsList.removeAllViews();
    ((TextView)findViewById(R.id.actionbar_title)).setCompoundDrawablesWithIntrinsicBounds(getResources().getDrawable(cache.getType().markerId),null,null,null);
    itemLayout=(RelativeLayout)inflater.inflate(R.layout.cache_item,null);
    itemName=(TextView)itemLayout.findViewById(R.id.name);
    itemValue=(TextView)itemLayout.findViewById(R.id.value);
    itemName.setText(res.getString(R.string.cache_type));
    String cacheType=cache.getType().getL10n();
    String cacheSize=cache.getSize() != CacheSize.UNKNOWN ? " (" + cache.getSize().getL10n() + ")" : "";
    itemValue.setText(cacheType + cacheSize);
    detailsList.addView(itemLayout);
    itemLayout=(RelativeLayout)inflater.inflate(R.layout.cache_item,null);
    itemName=(TextView)itemLayout.findViewById(R.id.name);
    itemValue=(TextView)itemLayout.findViewById(R.id.value);
    itemName.setText(res.getString(R.string.cache_geocode));
    itemValue.setText(cache.getGeocode().toUpperCase());
    detailsList.addView(itemLayout);
    if (cache.isArchived() || cache.isDisabled() || cache.isPremiumMembersOnly()|| cache.isFound()) {
      itemLayout=(RelativeLayout)inflater.inflate(R.layout.cache_item,null);
      itemName=(TextView)itemLayout.findViewById(R.id.name);
      itemValue=(TextView)itemLayout.findViewById(R.id.value);
      itemName.setText(res.getString(R.string.cache_status));
      StringBuilder state=new StringBuilder();
      if (cache.isFound()) {
        if (state.length() > 0) {
          state.append(", ");
        }
        state.append(res.getString(R.string.cache_status_found));
      }
      if (cache.isArchived()) {
        if (state.length() > 0) {
          state.append(", ");
        }
        state.append(res.getString(R.string.cache_status_archived));
      }
      if (cache.isDisabled()) {
        if (state.length() > 0) {
          state.append(", ");
        }
        state.append(res.getString(R.string.cache_status_disabled));
      }
      if (cache.isPremiumMembersOnly()) {
        if (state.length() > 0) {
          state.append(", ");
        }
        state.append(res.getString(R.string.cache_status_premium));
      }
      itemValue.setText(state.toString());
      detailsList.addView(itemLayout);
      state=null;
    }
    itemLayout=(RelativeLayout)inflater.inflate(R.layout.cache_item,null);
    itemName=(TextView)itemLayout.findViewById(R.id.name);
    itemValue=(TextView)itemLayout.findViewById(R.id.value);
    itemName.setText(res.getString(R.string.cache_distance));
    itemValue.setText("--");
    detailsList.addView(itemLayout);
    cacheDistance=itemValue;
    if (cache.getDifficulty() > 0f) {
      itemLayout=(RelativeLayout)inflater.inflate(R.layout.cache_layout,null);
      itemName=(TextView)itemLayout.findViewById(R.id.name);
      itemValue=(TextView)itemLayout.findViewById(R.id.value);
      itemStars=(LinearLayout)itemLayout.findViewById(R.id.stars);
      itemName.setText(res.getString(R.string.cache_difficulty));
      itemValue.setText(String.format("%.1f",cache.getDifficulty()) + ' ' + res.getString(R.string.cache_rating_of)+ " 5");
      for (int i=0; i <= 4; i++) {
        ImageView star=(ImageView)inflater.inflate(R.layout.star,null);
        if ((cache.getDifficulty() - i) >= 1.0) {
          star.setImageResource(R.drawable.star_on);
        }
 else         if ((cache.getDifficulty() - i) > 0.0) {
          star.setImageResource(R.drawable.star_half);
        }
 else {
          star.setImageResource(R.drawable.star_off);
        }
        itemStars.addView(star);
      }
      detailsList.addView(itemLayout);
    }
    if (cache.getTerrain() > 0f) {
      itemLayout=(RelativeLayout)inflater.inflate(R.layout.cache_layout,null);
      itemName=(TextView)itemLayout.findViewById(R.id.name);
      itemValue=(TextView)itemLayout.findViewById(R.id.value);
      itemStars=(LinearLayout)itemLayout.findViewById(R.id.stars);
      itemName.setText(res.getString(R.string.cache_terrain));
      itemValue.setText(String.format("%.1f",cache.getTerrain()) + ' ' + res.getString(R.string.cache_rating_of)+ " 5");
      for (int i=0; i <= 4; i++) {
        ImageView star=(ImageView)inflater.inflate(R.layout.star,null);
        if ((cache.getTerrain() - i) >= 1.0) {
          star.setImageResource(R.drawable.star_on);
        }
 else         if ((cache.getTerrain() - i) > 0.0) {
          star.setImageResource(R.drawable.star_half);
        }
 else {
          star.setImageResource(R.drawable.star_off);
        }
        itemStars.addView(star);
      }
      detailsList.addView(itemLayout);
    }
    if (cache.getRating() > 0) {
      setRating(cache.getRating(),cache.getVotes());
    }
 else {
      if (Settings.isRatingWanted() && cache.supportsGCVote()) {
        (new Thread(){
          @Override public void run(){
            GCVoteRating rating=GCVote.getRating(cache.getGuid(),geocode);
            if (rating == null) {
              return;
            }
            Message msg=Message.obtain();
            Bundle bundle=new Bundle();
            bundle.putFloat("rating",rating.getRating());
            bundle.putInt("votes",rating.getVotes());
            msg.setData(bundle);
            ratingHandler.sendMessage(msg);
          }
        }
).start();
      }
    }
    Button buttonMore=(Button)findViewById(R.id.more_details);
    buttonMore.setOnClickListener(new OnClickListener(){
      public void onClick(      View arg0){
        Intent cachesIntent=new Intent(cgeopopup.this,CacheDetailActivity.class);
        cachesIntent.putExtra("geocode",geocode.toUpperCase());
        startActivity(cachesIntent);
        finish();
      }
    }
);
    ((LinearLayout)findViewById(R.id.offline_box)).setVisibility(View.VISIBLE);
    final TextView offlineText=(TextView)findViewById(R.id.offline_text);
    final Button offlineRefresh=(Button)findViewById(R.id.offline_refresh);
    final Button offlineStore=(Button)findViewById(R.id.offline_store);
    if (cache.getListId() > 0) {
      long diff=(System.currentTimeMillis() / (60 * 1000)) - (cache.getDetailedUpdate() / (60 * 1000));
      String ago;
      if (diff < 15) {
        ago=res.getString(R.string.cache_offline_time_mins_few);
      }
 else       if (diff < 50) {
        ago=res.getString(R.string.cache_offline_time_about) + " " + diff+ " "+ res.getString(R.string.cache_offline_time_mins);
      }
 else       if (diff < 90) {
        ago=res.getString(R.string.cache_offline_time_about) + " " + res.getString(R.string.cache_offline_time_hour);
      }
 else       if (diff < (48 * 60)) {
        ago=res.getString(R.string.cache_offline_time_about) + " " + (diff / 60)+ " "+ res.getString(R.string.cache_offline_time_hours);
      }
 else {
        ago=res.getString(R.string.cache_offline_time_about) + " " + (diff / (24 * 60))+ " "+ res.getString(R.string.cache_offline_time_days);
      }
      offlineText.setText(res.getString(R.string.cache_offline_stored) + "\n" + ago);
      offlineRefresh.setVisibility(View.VISIBLE);
      offlineRefresh.setEnabled(true);
      offlineRefresh.setOnClickListener(new storeCache());
      offlineStore.setText(res.getString(R.string.cache_offline_drop));
      offlineStore.setEnabled(true);
      offlineStore.setOnClickListener(new dropCache());
    }
 else {
      offlineText.setText(res.getString(R.string.cache_offline_not_ready));
      offlineRefresh.setVisibility(View.GONE);
      offlineRefresh.setEnabled(false);
      offlineRefresh.setOnTouchListener(null);
      offlineRefresh.setOnClickListener(null);
      offlineStore.setText(res.getString(R.string.cache_offline_store));
      offlineStore.setEnabled(true);
      offlineStore.setOnClickListener(new storeCache());
    }
  }
 catch (  Exception e) {
    Log.e("cgeopopup.init: " + e.toString());
  }
}
