{
  handler=handlerIn;
  final RootElement root=new RootElement(namespace,"gpx");
  final Element waypoint=root.getChild(namespace,"wpt");
  waypoint.setStartElementListener(new StartElementListener(){
    @Override public void start(    Attributes attrs){
      try {
        if (attrs.getIndex("lat") > -1) {
          cache.latitude=new Double(attrs.getValue("lat"));
        }
        if (attrs.getIndex("lon") > -1) {
          cache.longitude=new Double(attrs.getValue("lon"));
        }
      }
 catch (      Exception e) {
        Log.w(cgSettings.tag,"Failed to parse waypoint's latitude and/or longitude.");
      }
    }
  }
);
  waypoint.setEndElementListener(new EndElementListener(){
    @Override public void end(){
      if (cache.geocode == null || cache.geocode.length() == 0) {
        findGeoCode(name);
        findGeoCode(desc);
        findGeoCode(cmt);
      }
      if (cache.geocode != null && cache.geocode.length() > 0 && cache.latitude != null && cache.longitude != null && ((type == null && sym == null) || (type != null && type.indexOf("geocache") > -1) || (sym != null && sym.indexOf("geocache") > -1))) {
        fixCache(cache);
        cache.reason=listId;
        cache.detailed=true;
        app.addCacheToSearch(search,cache);
      }
      showFinishedMessage(handler,search);
      type=null;
      sym=null;
      name=null;
      desc=null;
      cmt=null;
      cache=null;
      cache=new cgCache();
    }
  }
);
  waypoint.getChild(namespace,"time").setEndTextElementListener(new EndTextElementListener(){
    @Override public void end(    String body){
      try {
        cache.hidden=parseDate(body);
      }
 catch (      Exception e) {
        Log.w(cgSettings.tag,"Failed to parse cache date: " + e.toString());
      }
    }
  }
);
  waypoint.getChild(namespace,"name").setEndTextElementListener(new EndTextElementListener(){
    @Override public void end(    String body){
      name=body;
      final String content=body.trim();
      cache.name=content;
      findGeoCode(cache.name);
      findGeoCode(cache.description);
    }
  }
);
  waypoint.getChild(namespace,"desc").setEndTextElementListener(new EndTextElementListener(){
    @Override public void end(    String body){
      desc=body;
      cache.shortdesc=validate(body);
    }
  }
);
  waypoint.getChild(namespace,"cmt").setEndTextElementListener(new EndTextElementListener(){
    @Override public void end(    String body){
      cmt=body;
      cache.description=validate(body);
    }
  }
);
  waypoint.getChild(namespace,"type").setEndTextElementListener(new EndTextElementListener(){
    @Override public void end(    String body){
      final String[] content=body.split("\\|");
      if (content.length > 0) {
        type=content[0].toLowerCase().trim();
      }
    }
  }
);
  waypoint.getChild(namespace,"sym").setEndTextElementListener(new EndTextElementListener(){
    @Override public void end(    String body){
      body=body.toLowerCase();
      sym=body;
      if (body.indexOf("geocache") != -1 && body.indexOf("found") != -1) {
        cache.found=true;
      }
    }
  }
);
  final Element cacheParent=getCacheParent(waypoint);
  for (  String nsGC : nsGCList) {
    final Element gcCache=cacheParent.getChild(nsGC,"cache");
    gcCache.setStartElementListener(new StartElementListener(){
      @Override public void start(      Attributes attrs){
        try {
          if (attrs.getIndex("id") > -1) {
            cache.cacheid=attrs.getValue("id");
          }
          if (attrs.getIndex("archived") > -1) {
            cache.archived=attrs.getValue("archived").equalsIgnoreCase("true");
          }
          if (attrs.getIndex("available") > -1) {
            cache.disabled=!attrs.getValue("available").equalsIgnoreCase("true");
          }
        }
 catch (        Exception e) {
          Log.w(cgSettings.tag,"Failed to parse cache attributes.");
        }
      }
    }
);
    gcCache.getChild(nsGC,"name").setEndTextElementListener(new EndTextElementListener(){
      @Override public void end(      String cacheName){
        cache.name=validate(cacheName);
      }
    }
);
    gcCache.getChild(nsGC,"owner").setEndTextElementListener(new EndTextElementListener(){
      @Override public void end(      String cacheOwner){
        cache.owner=validate(cacheOwner);
      }
    }
);
    gcCache.getChild(nsGC,"type").setEndTextElementListener(new EndTextElementListener(){
      @Override public void end(      String body){
        setType(validate(body.toLowerCase()));
      }
    }
);
    gcCache.getChild(nsGC,"container").setEndTextElementListener(new EndTextElementListener(){
      @Override public void end(      String body){
        cache.size=validate(body.toLowerCase());
      }
    }
);
    final Element gcAttributes=gcCache.getChild(nsGC,"attributes");
    final Element gcAttribute=gcAttributes.getChild(nsGC,"attribute");
    gcAttribute.setStartElementListener(new StartElementListener(){
      @Override public void start(      Attributes attrs){
        cacheAttribute=new CacheAttribute();
        try {
          if (attrs.getIndex("id") > -1) {
            cacheAttribute.setBaseName(Integer.parseInt(attrs.getValue("id")));
          }
          if (attrs.getIndex("inc") > -1) {
            cacheAttribute.setActive(Integer.parseInt(attrs.getValue("inc")) != 0);
          }
        }
 catch (        Exception e) {
        }
      }
    }
);
    gcAttribute.setEndElementListener(new EndElementListener(){
      @Override public void end(){
        if (cacheAttribute != null) {
          String internalId=cacheAttribute.getInternalId();
          if (internalId != null) {
            if (cache.attributes == null)             cache.attributes=new ArrayList<String>();
            cache.attributes.add(internalId);
          }
        }
      }
    }
);
    gcCache.getChild(nsGC,"difficulty").setEndTextElementListener(new EndTextElementListener(){
      @Override public void end(      String body){
        try {
          cache.difficulty=new Float(body);
        }
 catch (        Exception e) {
          Log.w(cgSettings.tag,"Failed to parse difficulty: " + e.toString());
        }
      }
    }
);
    gcCache.getChild(nsGC,"terrain").setEndTextElementListener(new EndTextElementListener(){
      @Override public void end(      String body){
        try {
          cache.terrain=new Float(body);
        }
 catch (        Exception e) {
          Log.w(cgSettings.tag,"Failed to parse terrain: " + e.toString());
        }
      }
    }
);
    gcCache.getChild(nsGC,"country").setEndTextElementListener(new EndTextElementListener(){
      @Override public void end(      String country){
        if (cache.location == null || cache.location.length() == 0) {
          cache.location=validate(country);
        }
 else {
          cache.location=cache.location + ", " + country.trim();
        }
      }
    }
);
    gcCache.getChild(nsGC,"state").setEndTextElementListener(new EndTextElementListener(){
      @Override public void end(      String state){
        if (cache.location == null || cache.location.length() == 0) {
          cache.location=validate(state);
        }
 else {
          cache.location=state.trim() + ", " + cache.location;
        }
      }
    }
);
    gcCache.getChild(nsGC,"encoded_hints").setEndTextElementListener(new EndTextElementListener(){
      @Override public void end(      String encoded){
        cache.hint=validate(encoded);
      }
    }
);
    gcCache.getChild(nsGC,"short_description").setEndTextElementListener(new EndTextElementListener(){
      @Override public void end(      String shortDesc){
        cache.shortdesc=validate(shortDesc);
      }
    }
);
    gcCache.getChild(nsGC,"long_description").setEndTextElementListener(new EndTextElementListener(){
      @Override public void end(      String desc){
        cache.description=validate(desc);
      }
    }
);
    final Element gcTBs=gcCache.getChild(nsGC,"travelbugs");
    gcTBs.getChild(nsGC,"travelbug").setStartElementListener(new StartElementListener(){
      @Override public void start(      Attributes attrs){
        trackable=new cgTrackable();
        try {
          if (attrs.getIndex("ref") > -1) {
            trackable.geocode=attrs.getValue("ref").toUpperCase();
          }
        }
 catch (        Exception e) {
        }
      }
    }
);
    final Element gcTB=gcTBs.getChild(nsGC,"travelbug");
    gcTB.setEndElementListener(new EndElementListener(){
      @Override public void end(){
        if (trackable.geocode != null && trackable.geocode.length() > 0 && trackable.name != null && trackable.name.length() > 0) {
          if (cache.inventory == null) {
            cache.inventory=new ArrayList<cgTrackable>();
          }
          cache.inventory.add(trackable);
        }
      }
    }
);
    gcTB.getChild(nsGC,"name").setEndTextElementListener(new EndTextElementListener(){
      @Override public void end(      String tbName){
        trackable.name=validate(tbName);
      }
    }
);
    final Element gcLogs=gcCache.getChild(nsGC,"logs");
    final Element gcLog=gcLogs.getChild(nsGC,"log");
    gcLog.setStartElementListener(new StartElementListener(){
      @Override public void start(      Attributes attrs){
        log=new cgLog();
        try {
          if (attrs.getIndex("id") > -1) {
            log.id=Integer.parseInt(attrs.getValue("id"));
          }
        }
 catch (        Exception e) {
        }
      }
    }
);
    gcLog.setEndElementListener(new EndElementListener(){
      @Override public void end(){
        if (log.log != null && log.log.length() > 0) {
          if (cache.logs == null) {
            cache.logs=new ArrayList<cgLog>();
          }
          cache.logs.add(log);
        }
      }
    }
);
    gcLog.getChild(nsGC,"date").setEndTextElementListener(new EndTextElementListener(){
      @Override public void end(      String body){
        try {
          log.date=parseDate(body).getTime();
        }
 catch (        Exception e) {
          Log.w(cgSettings.tag,"Failed to parse log date: " + e.toString());
        }
      }
    }
);
    gcLog.getChild(nsGC,"type").setEndTextElementListener(new EndTextElementListener(){
      @Override public void end(      String body){
        final String logType=validate(body).toLowerCase();
        if (cgBase.logTypes0.containsKey(logType)) {
          log.type=cgBase.logTypes0.get(logType);
        }
 else {
          log.type=cgBase.LOG_NOTE;
        }
      }
    }
);
    gcLog.getChild(nsGC,"finder").setEndTextElementListener(new EndTextElementListener(){
      @Override public void end(      String finderName){
        log.author=validate(finderName);
      }
    }
);
    gcLog.getChild(nsGC,"text").setEndTextElementListener(new EndTextElementListener(){
      @Override public void end(      String logText){
        log.log=validate(logText);
      }
    }
);
  }
  boolean parsed=false;
  try {
    Xml.parse(stream,Xml.Encoding.UTF_8,root.getContentHandler());
    parsed=true;
  }
 catch (  IOException e) {
    Log.e(cgSettings.tag,"Cannot parse .gpx file as GPX " + version + ": could not read file!");
  }
catch (  SAXException e) {
    Log.e(cgSettings.tag,"Cannot parse .gpx file as GPX " + version + ": could not parse XML - "+ e.toString());
  }
  return parsed ? search.getCurrentId() : 0L;
}
