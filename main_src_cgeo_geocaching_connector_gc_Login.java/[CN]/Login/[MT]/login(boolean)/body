{
  final ImmutablePair<String,String> login=Settings.getGcLogin();
  if (StringUtils.isEmpty(login.left) || StringUtils.isEmpty(login.right)) {
    Login.setActualStatus(cgeoapplication.getInstance().getString(R.string.err_login));
    Log.e("Login.login: No login information stored");
    return StatusCode.NO_LOGIN_INFO_STORED;
  }
  Login.setActualStatus(cgeoapplication.getInstance().getString(R.string.init_login_popup_working));
  HttpResponse loginResponse=Network.getRequest("https://www.geocaching.com/login/default.aspx");
  String loginData=Network.getResponseData(loginResponse);
  if (loginResponse != null && loginResponse.getStatusLine().getStatusCode() == 503 && TextUtils.matches(loginData,GCConstants.PATTERN_MAINTENANCE)) {
    return StatusCode.MAINTENANCE;
  }
  if (StringUtils.isBlank(loginData)) {
    Log.e("Login.login: Failed to retrieve login page (1st)");
    return StatusCode.CONNECTION_FAILED;
  }
  if (Login.getLoginStatus(loginData)) {
    Log.i("Already logged in Geocaching.com as " + login.left + " ("+ Settings.getMemberStatus()+ ')');
    Login.switchToEnglish(loginData);
    return StatusCode.NO_ERROR;
  }
  Cookies.clearCookies();
  Settings.setCookieStore(null);
  final Parameters params=new Parameters("__EVENTTARGET","","__EVENTARGUMENT","","ctl00$ContentBody$tbUsername",login.left,"ctl00$ContentBody$tbPassword",login.right,"ctl00$ContentBody$cbRememberMe","on","ctl00$ContentBody$btnSignIn","Login");
  final String[] viewstates=Login.getViewstates(loginData);
  if (isEmpty(viewstates)) {
    Log.e("Login.login: Failed to find viewstates");
    return StatusCode.LOGIN_PARSE_ERROR;
  }
  Login.putViewstates(params,viewstates);
  loginResponse=Network.postRequest("https://www.geocaching.com/login/default.aspx",params);
  loginData=Network.getResponseData(loginResponse);
  if (StringUtils.isBlank(loginData)) {
    Log.e("Login.login: Failed to retrieve login page (2nd)");
    return StatusCode.COMMUNICATION_ERROR;
  }
  if (Login.getLoginStatus(loginData)) {
    Log.i("Successfully logged in Geocaching.com as " + login.left + " ("+ Settings.getMemberStatus()+ ')');
    Login.switchToEnglish(loginData);
    Settings.setCookieStore(Cookies.dumpCookieStore());
    return StatusCode.NO_ERROR;
  }
  if (loginData.contains("Your username/password combination does not match.")) {
    Log.i("Failed to log in Geocaching.com as " + login.left + " because of wrong username/password");
    return StatusCode.WRONG_LOGIN_DATA;
  }
  if (loginData.contains("You must validate your account before you can log in.")) {
    Log.i("Failed to log in Geocaching.com as " + login.left + " because account needs to be validated first");
    return StatusCode.UNVALIDATED_ACCOUNT;
  }
  Log.i("Failed to log in Geocaching.com as " + login.left + " for some unknown reason");
  if (retry) {
    Login.switchToEnglish(loginData);
    return login(false);
  }
  return StatusCode.UNKNOWN_ERROR;
}
