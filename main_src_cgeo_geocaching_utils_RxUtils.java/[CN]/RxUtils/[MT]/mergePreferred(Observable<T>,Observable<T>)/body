{
  return Observable.create(new OnSubscribe<T>(){
    @Override public void call(    final Subscriber<? super T> subscriber){
class TProducer implements Producer {
        final TSubscriber preferredSubscriber=new TSubscriber(1);
        final TSubscriber otherSubscriber=new TSubscriber(0);
        final AtomicLong totalDemand=new AtomicLong(0);
        final CompositeSubscription innerSubscriptions=new CompositeSubscription();
        TProducer(){
          innerSubscriptions.add(preferredObservable.subscribe(preferredSubscriber));
          innerSubscriptions.add(otherObservable.subscribe(otherSubscriber));
        }
class TSubscriber extends Subscriber<T> {
          private final Deque<T> fetched=new LinkedList<>();
          private final AtomicBoolean terminated=new AtomicBoolean(false);
          private final AtomicLong demanded=new AtomicLong(1);
          private final long extra;
          TSubscriber(          final long extra){
            this.extra=extra;
          }
          @Override public void onStart(){
            super.onStart();
            dequeue();
          }
          @Override public void onCompleted(){
            terminated.set(true);
          }
          @Override public void onError(          final Throwable e){
            terminated.set(true);
            subscriber.onError(e);
            innerSubscriptions.unsubscribe();
          }
          @Override public void onNext(          final T t){
synchronized (TProducer.this) {
              fetched.offer(t);
            }
            demanded.decrementAndGet();
            dequeue();
          }
          public void dequeue(){
synchronized (TProducer.this) {
              while (!fetched.isEmpty() && totalDemand.get() > 0) {
                if (totalDemand.getAndDecrement() > 0) {
                  subscriber.onNext(fetched.pop());
                }
 else {
                  totalDemand.incrementAndGet();
                  break;
                }
              }
              final long missing=totalDemand.get() - demanded.get() - fetched.size() + extra;
              if (missing > 0 && !terminated.get()) {
                request(missing);
              }
            }
          }
          public boolean isTerminated(){
synchronized (TProducer.this) {
              return fetched.isEmpty() && terminated.get();
            }
          }
        }
        @Override public void request(        final long n){
          if (n == Long.MAX_VALUE) {
            throw new IllegalArgumentException("mergePreferred must be used with backpressure, or merge should be used instead");
          }
          totalDemand.addAndGet(n);
          preferredSubscriber.dequeue();
          otherSubscriber.dequeue();
          if (preferredSubscriber.isTerminated() && otherSubscriber.isTerminated()) {
            subscriber.onCompleted();
          }
        }
      }
      final TProducer producer=new TProducer();
      subscriber.add(producer.innerSubscriptions);
      subscriber.setProducer(producer);
    }
  }
);
}
