{
  return new Operator<T,T>(){
    @Override public Subscriber<? super T> call(    final Subscriber<? super T> subscriber){
      return new Subscriber<T>(subscriber){
        private boolean done=false;
        @Override public void onCompleted(){
          if (!done) {
            subscriber.onCompleted();
          }
        }
        @Override public void onError(        final Throwable throwable){
          if (!done) {
            subscriber.onError(throwable);
          }
        }
        @Override public void onNext(        final T value){
          subscriber.onNext(value);
          boolean shouldEnd=false;
          try {
            shouldEnd=predicate.call(value);
          }
 catch (          final Throwable e) {
            done=true;
            subscriber.onError(e);
            unsubscribe();
          }
          if (shouldEnd) {
            done=true;
            subscriber.onCompleted();
            unsubscribe();
          }
        }
      }
;
    }
  }
;
}
