{
  sendLoadProgressDetail(handler,R.string.cache_dialog_loading_details_status_details);
  if (StringUtils.isBlank(page)) {
    Log.e(Settings.tag,"cgeoBase.parseCache: No page given");
    return null;
  }
  final ParseResult parseResult=new ParseResult();
  if (page.contains("Cache is Unpublished")) {
    parseResult.error=StatusCode.UNPUBLISHED_CACHE;
    return parseResult;
  }
  if (page.contains("Sorry, the owner of this listing has made it viewable to Premium Members only.")) {
    parseResult.error=StatusCode.PREMIUM_ONLY;
    return parseResult;
  }
  if (page.contains("has chosen to make this cache listing visible to Premium Members only.")) {
    parseResult.error=StatusCode.PREMIUM_ONLY;
    return parseResult;
  }
  final cgCache cache=new cgCache();
  cache.setDisabled(page.contains("<li>This cache is temporarily unavailable."));
  cache.setArchived(page.contains("<li>This cache has been archived,"));
  cache.setMembers(BaseUtils.matches(page,GCConstants.PATTERN_MEMBERS));
  cache.setFavourite(BaseUtils.matches(page,GCConstants.PATTERN_FAVORITE));
  cache.setListId(listId);
  cache.setGeocode(BaseUtils.getMatch(page,GCConstants.PATTERN_GEOCODE,true,cache.getGeocode()));
  cache.setCacheId(BaseUtils.getMatch(page,GCConstants.PATTERN_CACHEID,true,cache.getCacheId()));
  cache.setGuid(BaseUtils.getMatch(page,GCConstants.PATTERN_GUID,true,cache.getGuid()));
  cache.setName(Html.fromHtml(BaseUtils.getMatch(page,GCConstants.PATTERN_NAME,true,cache.getName())).toString());
  cache.setOwnerReal(URLDecoder.decode(BaseUtils.getMatch(page,GCConstants.PATTERN_OWNERREAL,true,cache.getOwnerReal())));
  final String username=Settings.getUsername();
  if (cache.getOwnerReal() != null && username != null && cache.getOwnerReal().equalsIgnoreCase(username)) {
    cache.setOwn(true);
  }
  String tableInside=page;
  int pos=tableInside.indexOf("id=\"cacheDetails\"");
  if (pos == -1) {
    Log.e(Settings.tag,"cgeoBase.parseCache: ID \"cacheDetails\" not found on page");
    return null;
  }
  tableInside=tableInside.substring(pos);
  pos=tableInside.indexOf("<div class=\"CacheInformationTable\"");
  if (pos == -1) {
    Log.e(Settings.tag,"cgeoBase.parseCache: class \"CacheInformationTable\" not found on page");
    return null;
  }
  tableInside=tableInside.substring(0,pos);
  if (StringUtils.isNotBlank(tableInside)) {
    String result=BaseUtils.getMatch(tableInside,GCConstants.PATTERN_TERRAIN,true,null);
    if (result != null) {
      cache.setTerrain(Float.parseFloat(StringUtils.replaceChars(result,'_','.')));
    }
    result=BaseUtils.getMatch(tableInside,GCConstants.PATTERN_DIFFICULTY,true,null);
    if (result != null) {
      cache.setDifficulty(Float.parseFloat(StringUtils.replaceChars(result,'_','.')));
    }
    cache.setOwner(Html.fromHtml(BaseUtils.getMatch(tableInside,GCConstants.PATTERN_OWNER,true,cache.getOwner())).toString());
    try {
      String hiddenString=BaseUtils.getMatch(tableInside,GCConstants.PATTERN_HIDDEN,true,null);
      if (StringUtils.isNotBlank(hiddenString)) {
        cache.setHidden(parseGcCustomDate(hiddenString));
      }
      if (cache.getHiddenDate() == null) {
        hiddenString=BaseUtils.getMatch(tableInside,GCConstants.PATTERN_HIDDENEVENT,true,null);
        if (StringUtils.isNotBlank(hiddenString)) {
          cache.setHidden(parseGcCustomDate(hiddenString));
        }
      }
    }
 catch (    ParseException e) {
      Log.w(Settings.tag,"cgeoBase.parseCache: Failed to parse cache hidden (event) date");
    }
    cache.setFavouritePoints(Integer.parseInt(BaseUtils.getMatch(tableInside,GCConstants.PATTERN_FAVORITECOUNT,true,"0")));
    cache.setSize(CacheSize.getById(BaseUtils.getMatch(tableInside,GCConstants.PATTERN_SIZE,true,CacheSize.NOT_CHOSEN.id).toLowerCase()));
  }
  cache.setFound(BaseUtils.matches(page,GCConstants.PATTERN_FOUND) || BaseUtils.matches(page,GCConstants.PATTERN_FOUND_ALTERNATIVE));
  cache.setType(CacheType.getByPattern(BaseUtils.getMatch(page,GCConstants.PATTERN_TYPE,true,cache.getType().id)));
  cache.setOnWatchlist(BaseUtils.matches(page,GCConstants.PATTERN_WATCHLIST));
  cache.setLatlon(BaseUtils.getMatch(page,GCConstants.PATTERN_LATLON,true,cache.getLatlon()));
  if (StringUtils.isNotEmpty(cache.getLatlon())) {
    try {
      cache.setCoords(new Geopoint(cache.getLatlon()));
      cache.setReliableLatLon(true);
    }
 catch (    Geopoint.GeopointException e) {
      Log.w(Settings.tag,"cgeoBase.parseCache: Failed to parse cache coordinates: " + e.toString());
    }
  }
  cache.setLocation(BaseUtils.getMatch(page,GCConstants.PATTERN_LOCATION,true,cache.getLocation()));
  String result=BaseUtils.getMatch(page,GCConstants.PATTERN_HINT,false,null);
  if (result != null) {
    String hint=GCConstants.PATTERN_LINEBREAK.matcher(result).replaceAll("\n");
    if (hint != null) {
      cache.setHint(StringUtils.replace(hint,"</p>","").trim());
    }
  }
  checkFields(cache);
  cache.setPersonalNote(BaseUtils.getMatch(page,GCConstants.PATTERN_PERSONALNOTE,true,cache.getPersonalNote()));
  cache.setShortdesc(BaseUtils.getMatch(page,GCConstants.PATTERN_SHORTDESC,true,cache.getShortdesc()));
  cache.setDescription(BaseUtils.getMatch(page,GCConstants.PATTERN_DESC,true,""));
  try {
    final String attributesPre=BaseUtils.getMatch(page,GCConstants.PATTERN_ATTRIBUTES,true,null);
    if (null != attributesPre) {
      final Matcher matcherAttributesInside=GCConstants.PATTERN_ATTRIBUTESINSIDE.matcher(attributesPre);
      while (matcherAttributesInside.find()) {
        if (matcherAttributesInside.groupCount() > 1 && !matcherAttributesInside.group(2).equalsIgnoreCase("blank")) {
          if (cache.getAttributes() == null) {
            cache.setAttributes(new ArrayList<String>());
          }
          String attribute=matcherAttributesInside.group(2).toLowerCase();
          String imageName=matcherAttributesInside.group(1).trim();
          if (imageName.length() > 0) {
            int start=imageName.lastIndexOf('/');
            int end=imageName.lastIndexOf('.');
            if (start >= 0 && end >= 0) {
              attribute=imageName.substring(start + 1,end).replace('-','_').toLowerCase();
            }
          }
          cache.getAttributes().add(attribute);
        }
      }
    }
  }
 catch (  Exception e) {
    Log.w(Settings.tag,"cgeoBase.parseCache: Failed to parse cache attributes");
  }
  try {
    final String spoilers=BaseUtils.getMatch(page,GCConstants.PATTERN_SPOILERS,false,null);
    if (null != spoilers) {
      if (CancellableHandler.isCancelled(handler)) {
        return null;
      }
      sendLoadProgressDetail(handler,R.string.cache_dialog_loading_details_status_spoilers);
      final Matcher matcherSpoilersInside=GCConstants.PATTERN_SPOILERSINSIDE.matcher(spoilers);
      while (matcherSpoilersInside.find()) {
        String url=matcherSpoilersInside.group(1).replace("/display","");
        String title=null;
        if (matcherSpoilersInside.group(2) != null) {
          title=matcherSpoilersInside.group(2);
        }
        String description=null;
        if (matcherSpoilersInside.group(3) != null) {
          description=matcherSpoilersInside.group(3);
        }
        final cgImage spoiler=new cgImage(url,title,description);
        if (cache.getSpoilers() == null) {
          cache.setSpoilers(new ArrayList<cgImage>());
        }
        cache.getSpoilers().add(spoiler);
      }
    }
  }
 catch (  Exception e) {
    Log.w(Settings.tag,"cgeoBase.parseCache: Failed to parse cache spoilers");
  }
  try {
    cache.setInventoryItems(0);
    final Matcher matcherInventory=GCConstants.PATTERN_INVENTORY.matcher(page);
    if (matcherInventory.find()) {
      if (cache.getInventory() == null) {
        cache.setInventory(new ArrayList<cgTrackable>());
      }
      if (matcherInventory.groupCount() > 1) {
        final String inventoryPre=matcherInventory.group(2);
        if (StringUtils.isNotBlank(inventoryPre)) {
          final Matcher matcherInventoryInside=GCConstants.PATTERN_INVENTORYINSIDE.matcher(inventoryPre);
          while (matcherInventoryInside.find()) {
            if (matcherInventoryInside.groupCount() > 0) {
              final cgTrackable inventoryItem=new cgTrackable();
              inventoryItem.setGuid(matcherInventoryInside.group(1));
              inventoryItem.setName(matcherInventoryInside.group(2));
              cache.getInventory().add(inventoryItem);
              cache.setInventoryItems(cache.getInventoryItems() + 1);
            }
          }
        }
      }
    }
  }
 catch (  Exception e) {
    Log.w(Settings.tag,"cgeoBase.parseCache: Failed to parse cache inventory (2)");
  }
  try {
    final String countlogs=BaseUtils.getMatch(page,GCConstants.PATTERN_COUNTLOGS,true,null);
    if (null != countlogs) {
      final Matcher matcherLog=GCConstants.PATTERN_COUNTLOG.matcher(countlogs);
      while (matcherLog.find()) {
        String typeStr=matcherLog.group(1);
        String countStr=matcherLog.group(2).replaceAll("[.,]","");
        if (StringUtils.isNotBlank(typeStr) && LogType.LOG_UNKNOWN != LogType.getByIconName(typeStr) && StringUtils.isNotBlank(countStr)) {
          cache.getLogCounts().put(LogType.getByIconName(typeStr),Integer.parseInt(countStr));
        }
      }
    }
  }
 catch (  Exception e) {
    Log.w(Settings.tag,"cgeoBase.parseCache: Failed to parse cache log count");
  }
  try {
    final String originalCoords=BaseUtils.getMatch(page,GCConstants.PATTERN_LATLON_ORIG,false,null);
    if (null != originalCoords) {
      final cgWaypoint waypoint=new cgWaypoint(res.getString(R.string.cache_coordinates_original),WaypointType.WAYPOINT);
      waypoint.setCoords(new Geopoint(originalCoords));
      cache.addWaypoint(waypoint);
    }
  }
 catch (  Geopoint.GeopointException e) {
  }
  int wpBegin=0;
  int wpEnd=0;
  wpBegin=page.indexOf("<table class=\"Table\" id=\"ctl00_ContentBody_Waypoints\">");
  if (wpBegin != -1) {
    if (CancellableHandler.isCancelled(handler)) {
      return null;
    }
    sendLoadProgressDetail(handler,R.string.cache_dialog_loading_details_status_waypoints);
    String wpList=page.substring(wpBegin);
    wpEnd=wpList.indexOf("</p>");
    if (wpEnd > -1 && wpEnd <= wpList.length()) {
      wpList=wpList.substring(0,wpEnd);
    }
    if (!wpList.contains("No additional waypoints to display.")) {
      wpEnd=wpList.indexOf("</table>");
      wpList=wpList.substring(0,wpEnd);
      wpBegin=wpList.indexOf("<tbody>");
      wpEnd=wpList.indexOf("</tbody>");
      if (wpBegin >= 0 && wpEnd >= 0 && wpEnd <= wpList.length()) {
        wpList=wpList.substring(wpBegin + 7,wpEnd);
      }
      final String[] wpItems=wpList.split("<tr");
      String[] wp;
      for (int j=1; j < wpItems.length; j++) {
        wp=wpItems[j].split("<td");
        final String name=BaseUtils.getMatch(wp[6],GCConstants.PATTERN_WPNAME,true,1,res.getString(R.string.waypoint),true);
        final String resulttype=BaseUtils.getMatch(wp[3],GCConstants.PATTERN_WPTYPE,null);
        final cgWaypoint waypoint=new cgWaypoint(name,WaypointType.findById(resulttype));
        waypoint.setPrefix(BaseUtils.getMatch(wp[4],GCConstants.PATTERN_WPPREFIXORLOOKUPORLATLON,true,2,waypoint.getPrefix(),false));
        waypoint.setLookup(BaseUtils.getMatch(wp[5],GCConstants.PATTERN_WPPREFIXORLOOKUPORLATLON,true,2,waypoint.getLookup(),false));
        String latlon=Html.fromHtml(BaseUtils.getMatch(wp[7],GCConstants.PATTERN_WPPREFIXORLOOKUPORLATLON,false,2,"",false)).toString().trim();
        if (!StringUtils.startsWith(latlon,"???")) {
          waypoint.setLatlon(latlon);
          waypoint.setCoords(new Geopoint(latlon));
        }
        j++;
        if (wpItems.length > j) {
          wp=wpItems[j].split("<td");
        }
        waypoint.setNote(BaseUtils.getMatch(wp[3],GCConstants.PATTERN_WPNOTE,waypoint.getNote()));
        cache.addWaypoint(waypoint);
      }
    }
  }
  cache.parseWaypointsFromNote();
  cache.setLogs(loadLogsFromDetails(page,cache,false,true));
  parseResult.cacheList.add(cache);
  return parseResult;
}
