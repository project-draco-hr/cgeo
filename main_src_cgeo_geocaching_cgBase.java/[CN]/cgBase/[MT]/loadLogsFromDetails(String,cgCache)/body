{
  final Matcher userTokenMatcher=patternUserToken.matcher(page);
  if (!userTokenMatcher.find()) {
    Log.e(cgSettings.tag,"cgBase.loadLogsFromDetails: unable to extract userToken");
    return;
  }
  final String userToken=userTokenMatcher.group(1);
  final HashMap<String,String> params=new HashMap<String,String>();
  params.put("tkn",userToken);
  params.put("idx","1");
  params.put("num","35");
  params.put("decrypt","true");
  final HttpResponse response=request(URI_GC_SEEK_LOGBOOK,"GET",params,false,false,false);
  final int statusCode=response.getStatusLine().getStatusCode();
  if (statusCode != 200) {
    Log.e(cgSettings.tag,"cgBase.loadLogsFromDetails: error " + statusCode + " when requesting log information");
    return;
  }
  try {
    final JSONObject resp=new JSONObject(cgBase.getResponseData(response));
    if (!resp.getString("status").equals("success")) {
      Log.e(cgSettings.tag,"cgBase.loadLogsFromDetails: status is " + resp.getString("status"));
      return;
    }
    final JSONArray data=resp.getJSONArray("data");
    for (int index=0; index < data.length(); index++) {
      final JSONObject entry=data.getJSONObject(index);
      final cgLog logDone=new cgLog();
      final String logIconNameExt=entry.optString("LogTypeImage",".gif");
      final String logIconName=logIconNameExt.substring(0,logIconNameExt.length() - 4);
      if (logTypes.containsKey(logIconName)) {
        logDone.type=logTypes.get(logIconName);
      }
 else {
        logDone.type=logTypes.get("icon_note");
      }
      try {
        logDone.date=parseGcCustomDate(entry.getString("Visited")).getTime();
      }
 catch (      ParseException e) {
        Log.e(cgSettings.tag,"cgBase.loadLogsFromDetails: failed to parse log date.");
      }
      logDone.author=entry.getString("UserName");
      logDone.found=entry.getInt("GeocacheFindCount");
      logDone.log=entry.getString("LogText");
      final JSONArray images=entry.getJSONArray("Images");
      for (int i=0; i < images.length(); i++) {
        final JSONObject image=images.getJSONObject(i);
        final cgImage logImage=new cgImage();
        logImage.url="http://img.geocaching.com/cache/log/" + image.getString("FileName");
        logImage.title=image.getString("Name");
        if (logDone.logImages == null) {
          logDone.logImages=new ArrayList<cgImage>();
        }
        logDone.logImages.add(logImage);
      }
      if (null == cache.logs) {
        cache.logs=new ArrayList<cgLog>();
      }
      cache.logs.add(logDone);
    }
  }
 catch (  JSONException e) {
    Log.w(cgSettings.tag,"cgBase.loadLogsFromDetails: Failed to parse cache logs",e);
  }
}
