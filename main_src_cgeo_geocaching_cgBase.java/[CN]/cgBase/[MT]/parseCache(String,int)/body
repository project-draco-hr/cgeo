{
  if (StringUtils.isBlank(page)) {
    Log.e(cgSettings.tag,"cgeoBase.parseCache: No page given");
    return null;
  }
  final cgCacheWrap caches=new cgCacheWrap();
  final cgCache cache=new cgCache();
  if (page.contains("Cache is Unpublished")) {
    caches.error="cache was unpublished";
    return caches;
  }
  if (page.contains("Sorry, the owner of this listing has made it viewable to Premium Members only.")) {
    caches.error="requested cache is for premium members only";
    return caches;
  }
  if (page.contains("has chosen to make this cache listing visible to Premium Members only.")) {
    caches.error="requested cache is for premium members only";
    return caches;
  }
  cache.disabled=page.contains("<li>This cache is temporarily unavailable.");
  cache.archived=page.contains("<li>This cache has been archived,");
  cache.members=page.contains("<p class=\"Warning\">This is a Premium Member Only cache.</p>");
  cache.reason=reason;
  try {
    final Matcher matcherGeocode=patternGeocode.matcher(page);
    if (matcherGeocode.find() && matcherGeocode.groupCount() > 0) {
      cache.geocode=getMatch(matcherGeocode.group(1));
    }
  }
 catch (  Exception e) {
    Log.w(cgSettings.tag,"cgeoBase.parseCache: Failed to parse cache geocode");
  }
  try {
    final Matcher matcherCacheId=patternCacheId.matcher(page);
    if (matcherCacheId.find() && matcherCacheId.groupCount() > 0) {
      cache.cacheId=getMatch(matcherCacheId.group(1));
    }
  }
 catch (  Exception e) {
    Log.w(cgSettings.tag,"cgeoBase.parseCache: Failed to parse cache id");
  }
  try {
    final Matcher matcherCacheGuid=patternCacheGuid.matcher(page);
    if (matcherCacheGuid.find() && matcherCacheGuid.groupCount() > 0) {
      cache.guid=getMatch(matcherCacheGuid.group(1));
    }
  }
 catch (  Exception e) {
    Log.w(cgSettings.tag,"cgeoBase.parseCache: Failed to parse cache guid");
  }
  try {
    final Matcher matcherName=patternName.matcher(page);
    if (matcherName.find() && matcherName.groupCount() > 0) {
      cache.name=Html.fromHtml(matcherName.group(1)).toString();
    }
  }
 catch (  Exception e) {
    Log.w(cgSettings.tag,"cgeoBase.parseCache: Failed to parse cache name");
  }
  try {
    final Matcher matcherOwnerReal=patternOwnerReal.matcher(page);
    if (matcherOwnerReal.find() && matcherOwnerReal.groupCount() > 0) {
      cache.ownerReal=URLDecoder.decode(matcherOwnerReal.group(1));
    }
  }
 catch (  Exception e) {
    Log.w(cgSettings.tag,"cgeoBase.parseCache: Failed to parse cache owner real name");
  }
  final String username=settings.getUsername();
  if (cache.ownerReal != null && username != null && cache.ownerReal.equalsIgnoreCase(username)) {
    cache.own=true;
  }
  int pos=-1;
  String tableInside=page;
  pos=tableInside.indexOf("id=\"cacheDetails\"");
  if (pos == -1) {
    Log.e(cgSettings.tag,"cgeoBase.parseCache: ID \"cacheDetails\" not found on page");
    return null;
  }
  tableInside=tableInside.substring(pos);
  pos=tableInside.indexOf("<div class=\"CacheInformationTable\"");
  if (pos == -1) {
    Log.e(cgSettings.tag,"cgeoBase.parseCache: ID \"CacheInformationTable\" not found on page");
    return null;
  }
  tableInside=tableInside.substring(0,pos);
  if (StringUtils.isNotBlank(tableInside)) {
    try {
      final Matcher matcherTerrain=patternTerrain.matcher(tableInside);
      if (matcherTerrain.find() && matcherTerrain.groupCount() > 0) {
        cache.terrain=new Float(Pattern.compile("_").matcher(matcherTerrain.group(1)).replaceAll("."));
      }
    }
 catch (    Exception e) {
      Log.w(cgSettings.tag,"cgeoBase.parseCache: Failed to parse cache terrain");
    }
    try {
      final Matcher matcherDifficulty=patternDifficulty.matcher(tableInside);
      if (matcherDifficulty.find() && matcherDifficulty.groupCount() > 0) {
        cache.difficulty=new Float(Pattern.compile("_").matcher(matcherDifficulty.group(1)).replaceAll("."));
      }
    }
 catch (    Exception e) {
      Log.w(cgSettings.tag,"cgeoBase.parseCache: Failed to parse cache difficulty");
    }
    try {
      final Matcher matcherOwner=patternOwner.matcher(tableInside);
      if (matcherOwner.find() && matcherOwner.groupCount() > 0) {
        cache.owner=Html.fromHtml(matcherOwner.group(2)).toString();
      }
    }
 catch (    Exception e) {
      Log.w(cgSettings.tag,"cgeoBase.parseCache: Failed to parse cache owner");
    }
    try {
      final Matcher matcherHidden=patternHidden.matcher(tableInside);
      if (matcherHidden.find() && matcherHidden.groupCount() > 0) {
        cache.hidden=parseGcCustomDate(matcherHidden.group(1));
      }
    }
 catch (    ParseException e) {
      Log.w(cgSettings.tag,"cgeoBase.parseCache: Failed to parse cache hidden date");
    }
    if (cache.hidden == null) {
      try {
        final Matcher matcherHiddenEvent=patternHiddenEvent.matcher(tableInside);
        if (matcherHiddenEvent.find() && matcherHiddenEvent.groupCount() > 0) {
          cache.hidden=parseGcCustomDate(matcherHiddenEvent.group(1));
        }
      }
 catch (      ParseException e) {
        Log.w(cgSettings.tag,"cgeoBase.parseCache: Failed to parse cache event date");
      }
    }
    try {
      final Matcher matcherFavourite=patternFavourite.matcher(tableInside);
      if (matcherFavourite.find() && matcherFavourite.groupCount() > 0) {
        cache.favouriteCnt=Integer.parseInt(matcherFavourite.group(1));
      }
    }
 catch (    Exception e) {
      Log.w(cgSettings.tag,"cgeoBase.parseCache: Failed to parse favourite count");
    }
    try {
      final Matcher matcherSize=patternSize.matcher(tableInside);
      if (matcherSize.find() && matcherSize.groupCount() > 0) {
        cache.size=CacheSize.FIND_BY_ID.get(getMatch(matcherSize.group(1)).toLowerCase());
      }
    }
 catch (    Exception e) {
      Log.w(cgSettings.tag,"cgeoBase.parseCache: Failed to parse cache size");
    }
  }
  cache.found=patternFound.matcher(page).find() || patternFoundAlternative.matcher(page).find();
  try {
    final Matcher matcherType=patternType.matcher(page);
    if (matcherType.find() && matcherType.groupCount() > 0) {
      cache.type=cacheTypes.get(matcherType.group(1).toLowerCase());
    }
  }
 catch (  Exception e) {
    Log.w(cgSettings.tag,"cgeoBase.parseCache: Failed to parse cache type");
  }
  try {
    final Matcher matcher=patternOnWatchlist.matcher(page);
    cache.onWatchlist=matcher.find();
  }
 catch (  Exception e) {
    Log.w(cgSettings.tag,"cgeoBase.parseCache: Failed to parse watchlist state");
  }
  try {
    final Matcher matcherLatLon=patternLatLon.matcher(page);
    if (matcherLatLon.find() && matcherLatLon.groupCount() > 0) {
      cache.latlon=getMatch(matcherLatLon.group(2));
      Map<String,Object> tmp=cgBase.parseLatlon(cache.latlon);
      if (tmp.size() > 0) {
        cache.coords=new Geopoint((Double)tmp.get("latitude"),(Double)tmp.get("longitude"));
        cache.latitudeString=(String)tmp.get("latitudeString");
        cache.longitudeString=(String)tmp.get("longitudeString");
        cache.reliableLatLon=true;
      }
      tmp=null;
    }
  }
 catch (  Exception e) {
    Log.w(cgSettings.tag,"cgeoBase.parseCache: Failed to parse cache coordinates");
  }
  try {
    final Matcher matcherLocation=patternLocation.matcher(page);
    if (matcherLocation.find() && matcherLocation.groupCount() > 0) {
      cache.location=getMatch(matcherLocation.group(1));
    }
  }
 catch (  Exception e) {
    Log.w(cgSettings.tag,"cgeoBase.parseCache: Failed to parse cache location");
  }
  try {
    final Matcher matcherHint=patternHint.matcher(page);
    if (matcherHint.find() && matcherHint.group(1) != null) {
      String hint=Pattern.compile("<(br|p)[^>]*>").matcher(matcherHint.group(1)).replaceAll("\n");
      if (hint != null) {
        cache.hint=hint.replaceAll(Pattern.quote("</p>"),"").trim();
      }
    }
  }
 catch (  Exception e) {
    Log.w(cgSettings.tag,"cgeoBase.parseCache: Failed to parse cache hint");
  }
  checkFields(cache);
  try {
    final Matcher matcherPersonalNote=patternPersonalNote.matcher(page);
    if (matcherPersonalNote.find() && matcherPersonalNote.groupCount() > 0) {
      cache.personalNote=getMatch(matcherPersonalNote.group(1));
    }
  }
 catch (  Exception e) {
    Log.w(cgSettings.tag,"cgeoBase.parseCache: Failed to parse cache personal note");
  }
  try {
    final Matcher matcherDescShort=patternDescShort.matcher(page);
    if (matcherDescShort.find() && matcherDescShort.groupCount() > 0) {
      cache.shortdesc=getMatch(matcherDescShort.group(1));
    }
  }
 catch (  Exception e) {
    Log.w(cgSettings.tag,"cgeoBase.parseCache: Failed to parse cache short description");
  }
  try {
    final Matcher matcherDesc=patternDesc.matcher(page);
    if (matcherDesc.find() && matcherDesc.groupCount() > 0) {
      cache.description=getMatch(matcherDesc.group(1));
    }
  }
 catch (  Exception e) {
    Log.w(cgSettings.tag,"cgeoBase.parseCache: Failed to parse cache description");
  }
  try {
    final Matcher matcherAttributes=patternAttributes.matcher(page);
    if (matcherAttributes.find() && matcherAttributes.groupCount() > 0) {
      final String attributesPre=matcherAttributes.group(1);
      final Matcher matcherAttributesInside=patternAttributesInside.matcher(attributesPre);
      while (matcherAttributesInside.find()) {
        if (matcherAttributesInside.groupCount() > 1 && matcherAttributesInside.group(2).equalsIgnoreCase("blank") != true) {
          if (cache.attributes == null) {
            cache.attributes=new ArrayList<String>();
          }
          String attribute=matcherAttributesInside.group(2).toLowerCase();
          String imageName=matcherAttributesInside.group(1).trim();
          if (imageName.length() > 0) {
            int start=imageName.lastIndexOf('/');
            int end=imageName.lastIndexOf('.');
            if (start >= 0 && end >= 0) {
              attribute=imageName.substring(start + 1,end).replace('-','_').toLowerCase();
            }
          }
          cache.attributes.add(attribute);
        }
      }
    }
  }
 catch (  Exception e) {
    Log.w(cgSettings.tag,"cgeoBase.parseCache: Failed to parse cache attributes");
  }
  try {
    final Matcher matcherSpoilers=patternSpoilers.matcher(page);
    if (matcherSpoilers.find() && matcherSpoilers.groupCount() > 0) {
      final String spoilersPre=matcherSpoilers.group(1);
      final Matcher matcherSpoilersInside=patternSpoilersInside.matcher(spoilersPre);
      while (matcherSpoilersInside.find()) {
        if (matcherSpoilersInside.groupCount() > 0) {
          final cgImage spoiler=new cgImage();
          spoiler.url=matcherSpoilersInside.group(1);
          if (matcherSpoilersInside.group(2) != null) {
            spoiler.title=matcherSpoilersInside.group(2);
          }
          if (matcherSpoilersInside.group(4) != null) {
            spoiler.description=matcherSpoilersInside.group(4);
          }
          if (cache.spoilers == null) {
            cache.spoilers=new ArrayList<cgImage>();
          }
          cache.spoilers.add(spoiler);
        }
      }
    }
  }
 catch (  Exception e) {
    Log.w(cgSettings.tag,"cgeoBase.parseCache: Failed to parse cache spoilers");
  }
  try {
    cache.inventoryItems=0;
    final Matcher matcherInventory=patternInventory.matcher(page);
    if (matcherInventory.find()) {
      if (cache.inventory == null) {
        cache.inventory=new ArrayList<cgTrackable>();
      }
      if (matcherInventory.groupCount() > 1) {
        final String inventoryPre=matcherInventory.group(2);
        if (StringUtils.isNotBlank(inventoryPre)) {
          final Matcher matcherInventoryInside=patternInventoryInside.matcher(inventoryPre);
          while (matcherInventoryInside.find()) {
            if (matcherInventoryInside.groupCount() > 0) {
              final cgTrackable inventoryItem=new cgTrackable();
              inventoryItem.guid=matcherInventoryInside.group(1);
              inventoryItem.name=matcherInventoryInside.group(2);
              cache.inventory.add(inventoryItem);
              cache.inventoryItems++;
            }
          }
        }
      }
    }
  }
 catch (  Exception e) {
    Log.w(cgSettings.tag,"cgeoBase.parseCache: Failed to parse cache inventory (2)");
  }
  try {
    final Matcher matcherLogCounts=patternCountLogs.matcher(page);
    if (matcherLogCounts.find()) {
      final Matcher matcherLog=patternCountLog.matcher(matcherLogCounts.group(1));
      while (matcherLog.find()) {
        String typeStr=matcherLog.group(1);
        String countStr=matcherLog.group(2).replaceAll("[.,]","");
        if (StringUtils.isNotBlank(typeStr) && logTypes.containsKey(typeStr.toLowerCase()) && StringUtils.isNotBlank(countStr)) {
          cache.logCounts.put(logTypes.get(typeStr.toLowerCase()),Integer.parseInt(countStr));
        }
      }
    }
  }
 catch (  Exception e) {
    Log.w(cgSettings.tag,"cgeoBase.parseCache: Failed to parse cache log count");
  }
  loadLogsFromDetails(page,cache);
  int wpBegin=0;
  int wpEnd=0;
  wpBegin=page.indexOf("<table class=\"Table\" id=\"ctl00_ContentBody_Waypoints\">");
  if (wpBegin != -1) {
    final Pattern patternWpType=Pattern.compile("\\/wpttypes\\/sm\\/(.+)\\.jpg",Pattern.CASE_INSENSITIVE);
    final Pattern patternWpPrefixOrLookupOrLatlon=Pattern.compile(">([^<]*<[^>]+>)?([^<]+)(<[^>]+>[^<]*)?<\\/td>",Pattern.CASE_INSENSITIVE);
    final Pattern patternWpName=Pattern.compile(">[^<]*<a[^>]+>([^<]*)<\\/a>",Pattern.CASE_INSENSITIVE);
    final Pattern patternWpNote=Pattern.compile("colspan=\"6\">(.*)<\\/td>",Pattern.CASE_INSENSITIVE);
    String wpList=page.substring(wpBegin);
    wpEnd=wpList.indexOf("</p>");
    if (wpEnd > -1 && wpEnd <= wpList.length()) {
      wpList=wpList.substring(0,wpEnd);
    }
    if (!wpList.contains("No additional waypoints to display.")) {
      wpEnd=wpList.indexOf("</table>");
      wpList=wpList.substring(0,wpEnd);
      wpBegin=wpList.indexOf("<tbody>");
      wpEnd=wpList.indexOf("</tbody>");
      if (wpBegin >= 0 && wpEnd >= 0 && wpEnd <= wpList.length()) {
        wpList=wpList.substring(wpBegin + 7,wpEnd);
      }
      final String[] wpItems=wpList.split("<tr");
      String[] wp;
      for (int j=1; j < wpItems.length; j++) {
        final cgWaypoint waypoint=new cgWaypoint();
        wp=wpItems[j].split("<td");
        try {
          final Matcher matcherWpType=patternWpType.matcher(wp[3]);
          if (matcherWpType.find() && matcherWpType.groupCount() > 0) {
            waypoint.type=matcherWpType.group(1).trim();
          }
        }
 catch (        Exception e) {
          Log.w(cgSettings.tag,"cgeoBase.parseCache: Failed to parse waypoint type");
        }
        try {
          final Matcher matcherWpPrefix=patternWpPrefixOrLookupOrLatlon.matcher(wp[4]);
          if (matcherWpPrefix.find() && matcherWpPrefix.groupCount() > 1) {
            waypoint.setPrefix(matcherWpPrefix.group(2).trim());
          }
        }
 catch (        Exception e) {
          Log.w(cgSettings.tag,"cgeoBase.parseCache: Failed to parse waypoint prefix");
        }
        try {
          final Matcher matcherWpLookup=patternWpPrefixOrLookupOrLatlon.matcher(wp[5]);
          if (matcherWpLookup.find() && matcherWpLookup.groupCount() > 1) {
            waypoint.lookup=matcherWpLookup.group(2).trim();
          }
        }
 catch (        Exception e) {
          Log.w(cgSettings.tag,"cgeoBase.parseCache: Failed to parse waypoint lookup");
        }
        try {
          final Matcher matcherWpName=patternWpName.matcher(wp[6]);
          while (matcherWpName.find()) {
            if (matcherWpName.groupCount() > 0) {
              waypoint.name=matcherWpName.group(1);
              if (StringUtils.isNotBlank(waypoint.name)) {
                waypoint.name=waypoint.name.trim();
              }
            }
            if (matcherWpName.find() && matcherWpName.groupCount() > 0) {
              waypoint.name=matcherWpName.group(1).trim();
            }
          }
        }
 catch (        Exception e) {
          Log.w(cgSettings.tag,"cgeoBase.parseCache: Failed to parse waypoint name");
        }
        try {
          final Matcher matcherWpLatLon=patternWpPrefixOrLookupOrLatlon.matcher(wp[7]);
          if (matcherWpLatLon.find() && matcherWpLatLon.groupCount() > 1) {
            waypoint.latlon=Html.fromHtml(matcherWpLatLon.group(2)).toString();
            final Map<String,Object> tmp=cgBase.parseLatlon(waypoint.latlon);
            if (tmp.size() > 0) {
              waypoint.coords=new Geopoint((Double)tmp.get("latitude"),(Double)tmp.get("longitude"));
              waypoint.latitudeString=(String)tmp.get("latitudeString");
              waypoint.longitudeString=(String)tmp.get("longitudeString");
            }
          }
        }
 catch (        Exception e) {
          Log.w(cgSettings.tag,"cgeoBase.parseCache: Failed to parse waypoint coordinates");
        }
        j++;
        if (wpItems.length > j) {
          wp=wpItems[j].split("<td");
        }
        try {
          final Matcher matcherWpNote=patternWpNote.matcher(wp[3]);
          if (matcherWpNote.find() && matcherWpNote.groupCount() > 0) {
            waypoint.note=matcherWpNote.group(1).trim();
          }
        }
 catch (        Exception e) {
          Log.w(cgSettings.tag,"cgeoBase.parseCache: Failed to parse waypoint note");
        }
        if (cache.waypoints == null) {
          cache.waypoints=new ArrayList<cgWaypoint>();
        }
        cache.waypoints.add(waypoint);
      }
    }
  }
  if (cache.coords != null) {
    cache.elevation=getElevation(cache.coords);
  }
  final cgRating rating=getRating(cache.guid,cache.geocode);
  if (rating != null) {
    cache.rating=rating.rating;
    cache.votes=rating.votes;
    cache.myVote=rating.myVote;
  }
  cache.updated=System.currentTimeMillis();
  cache.detailedUpdate=System.currentTimeMillis();
  cache.detailed=true;
  caches.cacheList.add(cache);
  return caches;
}
