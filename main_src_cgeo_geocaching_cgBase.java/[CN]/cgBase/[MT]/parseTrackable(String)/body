{
  if (StringUtils.isBlank(page)) {
    Log.e(Settings.tag,"cgeoBase.parseTrackable: No page given");
    return null;
  }
  final cgTrackable trackable=new cgTrackable();
  trackable.setGeocode(BaseUtils.getMatch(page,GCConstants.PATTERN_TRACKABLE_GEOCODE,true,trackable.getGeocode()).toUpperCase());
  trackable.setGuid(BaseUtils.getMatch(page,GCConstants.PATTERN_TRACKABLE_ID,true,trackable.getGuid()));
  trackable.setIconUrl(BaseUtils.getMatch(page,GCConstants.PATTERN_TRACKABLE_ICON,true,trackable.getIconUrl()));
  trackable.setName(BaseUtils.getMatch(page,GCConstants.PATTERN_TRACKABLE_NAME,true,trackable.getName()));
  if (StringUtils.isNotBlank(trackable.getName())) {
    trackable.setType(BaseUtils.getMatch(page,GCConstants.PATTERN_TRACKABLE_TYPE,true,trackable.getType()));
  }
  try {
    final Matcher matcherOwner=GCConstants.PATTERN_TRACKABLE_OWNER.matcher(page);
    if (matcherOwner.find() && matcherOwner.groupCount() > 0) {
      trackable.setOwnerGuid(matcherOwner.group(1));
      trackable.setOwner(matcherOwner.group(2).trim());
    }
  }
 catch (  Exception e) {
    Log.w(Settings.tag,"cgeoBase.parseTrackable: Failed to parse trackable owner name");
  }
  trackable.setOrigin(BaseUtils.getMatch(page,GCConstants.PATTERN_TRACKABLE_ORIGIN,true,trackable.getOrigin()));
  try {
    final Matcher matcherSpottedCache=GCConstants.PATTERN_TRACKABLE_SPOTTEDCACHE.matcher(page);
    if (matcherSpottedCache.find() && matcherSpottedCache.groupCount() > 0) {
      trackable.setSpottedGuid(matcherSpottedCache.group(1));
      trackable.setSpottedName(matcherSpottedCache.group(2).trim());
      trackable.setSpottedType(cgTrackable.SPOTTED_CACHE);
    }
    final Matcher matcherSpottedUser=GCConstants.PATTERN_TRACKABLE_SPOTTEDUSER.matcher(page);
    if (matcherSpottedUser.find() && matcherSpottedUser.groupCount() > 0) {
      trackable.setSpottedGuid(matcherSpottedUser.group(1));
      trackable.setSpottedName(matcherSpottedUser.group(2).trim());
      trackable.setSpottedType(cgTrackable.SPOTTED_USER);
    }
    if (BaseUtils.matches(page,GCConstants.PATTERN_TRACKABLE_SPOTTEDUNKNOWN)) {
      trackable.setSpottedType(cgTrackable.SPOTTED_UNKNOWN);
    }
    if (BaseUtils.matches(page,GCConstants.PATTERN_TRACKABLE_SPOTTEDOWNER)) {
      trackable.setSpottedType(cgTrackable.SPOTTED_OWNER);
    }
  }
 catch (  Exception e) {
    Log.w(Settings.tag,"cgeoBase.parseTrackable: Failed to parse trackable last known place");
  }
  try {
    trackable.setReleased(dateTbIn1.parse(BaseUtils.getMatch(page,GCConstants.PATTERN_TRACKABLE_RELEASES,false,null)));
    if (trackable.getReleased() == null) {
      trackable.setReleased(dateTbIn2.parse(BaseUtils.getMatch(page,GCConstants.PATTERN_TRACKABLE_RELEASES,false,null)));
    }
  }
 catch (  ParseException e1) {
    trackable.setReleased(null);
  }
  try {
    trackable.setDistance(DistanceParser.parseDistance(BaseUtils.getMatch(page,GCConstants.PATTERN_TRACKABLE_DISTANCE,false,null),Settings.isUseMetricUnits()));
  }
 catch (  NumberFormatException e) {
    trackable.setDistance(null);
    throw e;
  }
  trackable.setGoal(BaseUtils.getMatch(page,GCConstants.PATTERN_TRACKABLE_GOAL,true,trackable.getGoal()));
  try {
    final Matcher matcherDetailsImage=GCConstants.PATTERN_TRACKABLE_DETAILSIMAGE.matcher(page);
    if (matcherDetailsImage.find() && matcherDetailsImage.groupCount() > 0) {
      final String image=matcherDetailsImage.group(3).trim();
      final String details=matcherDetailsImage.group(4).trim();
      if (image != null) {
        trackable.setImage(image);
      }
      if (details != null && !details.equals("No additional details available.")) {
        trackable.setDetails(details);
      }
    }
  }
 catch (  Exception e) {
    Log.w(Settings.tag,"cgeoBase.parseTrackable: Failed to parse trackable details & image");
  }
  try {
    final Matcher matcherLogs=GCConstants.PATTERN_TRACKABLE_LOG.matcher(page);
    while (matcherLogs.find()) {
      final cgLog logDone=new cgLog();
      if (logTypes.containsKey(matcherLogs.group(1).toLowerCase())) {
        logDone.type=logTypes.get(matcherLogs.group(1).toLowerCase().trim());
      }
 else {
        logDone.type=logTypes.get("icon_note");
      }
      logDone.author=Html.fromHtml(matcherLogs.group(3)).toString().trim();
      try {
        logDone.date=parseGcCustomDate(matcherLogs.group(2)).getTime();
      }
 catch (      ParseException e) {
      }
      logDone.log=matcherLogs.group(6).trim();
      if (matcherLogs.group(4) != null && matcherLogs.group(5) != null) {
        logDone.cacheGuid=matcherLogs.group(4);
        logDone.cacheName=matcherLogs.group(5);
      }
      trackable.getLogs().add(logDone);
    }
  }
 catch (  Exception e) {
    Log.w(Settings.tag,"cgeoBase.parseCache: Failed to parse cache logs");
  }
  app.saveTrackable(trackable);
  return trackable;
}
