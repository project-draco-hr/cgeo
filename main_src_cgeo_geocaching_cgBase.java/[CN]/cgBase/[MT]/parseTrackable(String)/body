{
  if (StringUtils.isBlank(page)) {
    Log.e(Settings.tag,"cgeoBase.parseTrackable: No page given");
    return null;
  }
  final cgTrackable trackable=new cgTrackable();
  try {
    final Matcher matcherGeocode=PATTERN_TRACKABLE_Geocode.matcher(page);
    if (matcherGeocode.find() && matcherGeocode.groupCount() > 0) {
      trackable.setGeocode(matcherGeocode.group(1).toUpperCase());
    }
  }
 catch (  Exception e) {
    Log.w(Settings.tag,"cgeoBase.parseTrackable: Failed to parse trackable geocode");
  }
  try {
    final Matcher matcherTrackableId=PATTERN_TRACKABLE_TrackableId.matcher(page);
    if (matcherTrackableId.find() && matcherTrackableId.groupCount() > 0) {
      trackable.setGuid(matcherTrackableId.group(1));
    }
  }
 catch (  Exception e) {
    Log.w(Settings.tag,"cgeoBase.parseTrackable: Failed to parse trackable id");
  }
  try {
    final Matcher matcherTrackableIcon=PATTERN_TRACKABLE_Icon.matcher(page);
    if (matcherTrackableIcon.find() && matcherTrackableIcon.groupCount() > 0) {
      trackable.setIconUrl(matcherTrackableIcon.group(1));
    }
  }
 catch (  Exception e) {
    Log.w(Settings.tag,"cgeoBase.parseTrackable: Failed to parse trackable icon");
  }
  try {
    final Matcher matcherName=PATTERN_TRACKABLE_Name.matcher(page);
    if (matcherName.find() && matcherName.groupCount() > 1) {
      trackable.setName(matcherName.group(2));
    }
  }
 catch (  Exception e) {
    Log.w(Settings.tag,"cgeoBase.parseTrackable: Failed to parse trackable name");
  }
  if (StringUtils.isNotBlank(trackable.getName())) {
    try {
      final Matcher matcherType=PATTERN_TRACKABLE_Type.matcher(page);
      if (matcherType.find() && matcherType.groupCount() > 0) {
        trackable.setType(matcherType.group(1));
      }
    }
 catch (    Exception e) {
      Log.w(Settings.tag,"cgeoBase.parseTrackable: Failed to parse trackable type");
    }
  }
  try {
    final Matcher matcherOwner=PATTERN_TRACKABLE_Owner.matcher(page);
    if (matcherOwner.find() && matcherOwner.groupCount() > 0) {
      trackable.setOwnerGuid(matcherOwner.group(1));
      trackable.setOwner(matcherOwner.group(2));
    }
  }
 catch (  Exception e) {
    Log.w(Settings.tag,"cgeoBase.parseTrackable: Failed to parse trackable owner name");
  }
  try {
    final Matcher matcherOrigin=PATTERN_TRACKABLE_Origin.matcher(page);
    if (matcherOrigin.find() && matcherOrigin.groupCount() > 0) {
      trackable.setOrigin(matcherOrigin.group(1));
    }
  }
 catch (  Exception e) {
    Log.w(Settings.tag,"cgeoBase.parseTrackable: Failed to parse trackable origin");
  }
  try {
    final Matcher matcherSpottedCache=PATTERN_TRACKABLE_SpottedCache.matcher(page);
    if (matcherSpottedCache.find() && matcherSpottedCache.groupCount() > 0) {
      trackable.setSpottedGuid(matcherSpottedCache.group(1));
      trackable.setSpottedName(matcherSpottedCache.group(2));
      trackable.setSpottedType(cgTrackable.SPOTTED_CACHE);
    }
    final Matcher matcherSpottedUser=PATTERN_TRACKABLE_SpottedUser.matcher(page);
    if (matcherSpottedUser.find() && matcherSpottedUser.groupCount() > 0) {
      trackable.setSpottedGuid(matcherSpottedUser.group(1));
      trackable.setSpottedName(matcherSpottedUser.group(2));
      trackable.setSpottedType(cgTrackable.SPOTTED_USER);
    }
    final Matcher matcherSpottedUnknown=PATTERN_TRACKABLE_SpottedUnknown.matcher(page);
    if (matcherSpottedUnknown.find()) {
      trackable.setSpottedType(cgTrackable.SPOTTED_UNKNOWN);
    }
    final Matcher matcherSpottedOwner=PATTERN_TRACKABLE_SpottedOwner.matcher(page);
    if (matcherSpottedOwner.find()) {
      trackable.setSpottedType(cgTrackable.SPOTTED_OWNER);
    }
  }
 catch (  Exception e) {
    Log.w(Settings.tag,"cgeoBase.parseTrackable: Failed to parse trackable last known place");
  }
  try {
    final Matcher matcherReleased=PATTERN_TRACKABLE_Released.matcher(page);
    if (matcherReleased.find() && matcherReleased.groupCount() > 0 && matcherReleased.group(1) != null) {
      try {
        if (trackable.getReleased() == null) {
          trackable.setReleased(dateTbIn1.parse(matcherReleased.group(1)));
        }
      }
 catch (      Exception e) {
      }
      try {
        if (trackable.getReleased() == null) {
          trackable.setReleased(dateTbIn2.parse(matcherReleased.group(1)));
        }
      }
 catch (      Exception e) {
      }
    }
  }
 catch (  Exception e) {
    Log.w(Settings.tag,"cgeoBase.parseTrackable: Failed to parse trackable released date");
  }
  try {
    final Matcher matcherDistance=PATTERN_TRACKABLE_Distance.matcher(page);
    if (matcherDistance.find() && matcherDistance.groupCount() > 0) {
      try {
        trackable.setDistance(DistanceParser.parseDistance(matcherDistance.group(1),Settings.isUseMetricUnits()));
      }
 catch (      NumberFormatException e) {
        trackable.setDistance(null);
        throw e;
      }
    }
  }
 catch (  Exception e) {
    Log.w(Settings.tag,"cgeoBase.parseTrackable: Failed to parse trackable distance");
  }
  try {
    final Matcher matcherGoal=PATTERN_TRACKABLE_GOAL.matcher(page);
    if (matcherGoal.find() && matcherGoal.groupCount() > 0) {
      trackable.setGoal(matcherGoal.group(1));
    }
  }
 catch (  Exception e) {
    Log.w(Settings.tag,"cgeoBase.parseTrackable: Failed to parse trackable goal");
  }
  try {
    final Matcher matcherDetailsImage=PATTERN_TRACKABLE_DETAILSIMAGE.matcher(page);
    if (matcherDetailsImage.find() && matcherDetailsImage.groupCount() > 0) {
      final String image=matcherDetailsImage.group(3);
      final String details=matcherDetailsImage.group(4);
      if (image != null) {
        trackable.setImage(image);
      }
      if (details != null) {
        trackable.setDetails(details);
      }
    }
  }
 catch (  Exception e) {
    Log.w(Settings.tag,"cgeoBase.parseTrackable: Failed to parse trackable details & image");
  }
  try {
    final Matcher matcherLogs=PATTERN_TRACKABLE_Log.matcher(page);
    while (matcherLogs.find()) {
      final cgLog logDone=new cgLog();
      if (logTypes.containsKey(matcherLogs.group(1).toLowerCase())) {
        logDone.type=logTypes.get(matcherLogs.group(1).toLowerCase());
      }
 else {
        logDone.type=logTypes.get("icon_note");
      }
      logDone.author=Html.fromHtml(matcherLogs.group(3)).toString();
      try {
        logDone.date=parseGcCustomDate(matcherLogs.group(2)).getTime();
      }
 catch (      ParseException e) {
      }
      logDone.log=matcherLogs.group(6).trim();
      if (matcherLogs.group(4) != null && matcherLogs.group(5) != null) {
        logDone.cacheGuid=matcherLogs.group(4);
        logDone.cacheName=matcherLogs.group(5);
      }
      trackable.getLogs().add(logDone);
    }
  }
 catch (  Exception e) {
    Log.w(Settings.tag,"cgeoBase.parseCache: Failed to parse cache logs");
  }
  app.saveTrackable(trackable);
  return trackable;
}
