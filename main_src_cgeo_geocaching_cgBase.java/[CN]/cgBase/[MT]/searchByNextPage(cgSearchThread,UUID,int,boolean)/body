{
  final String[] viewstates=app.getViewstates(searchId);
  String url=app.getUrl(searchId);
  if (StringUtils.isBlank(url)) {
    Log.e(cgSettings.tag,"cgeoBase.searchByNextPage: No url found");
    return searchId;
  }
  if (isEmpty(viewstates)) {
    Log.e(cgSettings.tag,"cgeoBase.searchByNextPage: No viewstate given");
    return searchId;
  }
  String host="www.geocaching.com";
  String path="/";
  final String method="POST";
  int dash=-1;
  if (url.startsWith("http://")) {
    url=url.substring(7);
  }
  dash=url.indexOf("/");
  if (dash > -1) {
    host=url.substring(0,dash);
    url=url.substring(dash);
  }
 else {
    host=url;
    url="";
  }
  dash=url.indexOf("?");
  if (dash > -1) {
    path=url.substring(0,dash);
  }
 else {
    path=url;
  }
  final Map<String,String> params=new HashMap<String,String>();
  setViewstates(viewstates,params);
  params.put("__EVENTTARGET","ctl00$ContentBody$pgrBottom$ctl08");
  params.put("__EVENTARGUMENT","");
  final Uri uri=buildURI(false,host,path);
  String page=request(uri,method,params,false,false,true).getData();
  if (checkLogin(page) == false) {
    int loginState=login();
    if (loginState == 1) {
      page=request(uri,method,params,false,false,true).getData();
    }
 else     if (loginState == -3) {
      Log.i(cgSettings.tag,"Working as guest.");
    }
 else {
      app.setError(searchId,errorRetrieve.get(loginState));
      Log.e(cgSettings.tag,"cgeoBase.searchByNextPage: Can not log in geocaching");
      return searchId;
    }
  }
  if (StringUtils.isBlank(page)) {
    Log.e(cgSettings.tag,"cgeoBase.searchByNextPage: No data from server");
    return searchId;
  }
  final cgCacheWrap caches=parseSearch(thread,url,page,showCaptcha);
  if (caches == null || caches.cacheList == null || caches.cacheList.isEmpty()) {
    Log.e(cgSettings.tag,"cgeoBase.searchByNextPage: No cache parsed");
    return searchId;
  }
  app.setError(searchId,caches.error);
  app.setViewstates(searchId,caches.viewstates);
  final List<cgCache> cacheList=new ArrayList<cgCache>();
  for (  cgCache cache : caches.cacheList) {
    app.addGeocode(searchId,cache.geocode);
    cacheList.add(cache);
  }
  app.addSearch(searchId,cacheList,true,reason);
  return searchId;
}
