{
  if (StringUtils.isBlank(page)) {
    Log.e(Settings.tag,"cgeoBase.parseSearch: No page given");
    return null;
  }
  final cgCacheWrap caches=new cgCacheWrap();
  final List<String> cids=new ArrayList<String>();
  final List<String> guids=new ArrayList<String>();
  String recaptchaChallenge=null;
  String recaptchaText=null;
  caches.url=url;
  final Pattern patternCacheType=Pattern.compile("<td class=\"Merge\">[^<]*<a href=\"[^\"]*/seek/cache_details\\.aspx\\?guid=[^\"]+\"[^>]+>[^<]*<img src=\"[^\"]*/images/wpttypes/[^.]+\\.gif\" alt=\"([^\"]+)\" title=\"[^\"]+\"[^>]*>[^<]*</a>",Pattern.CASE_INSENSITIVE | Pattern.MULTILINE);
  final Pattern patternGuidAndDisabled=Pattern.compile("<img src=\"[^\"]*/images/wpttypes/[^>]*>[^<]*</a></td><td class=\"Merge\">[^<]*<a href=\"[^\"]*/seek/cache_details\\.aspx\\?guid=([a-z0-9\\-]+)\" class=\"lnk([^\"]*)\">([^<]*<span>)?([^<]*)(</span>[^<]*)?</a>[^<]+<br />([^<]*)<span[^>]+>([^<]*)</span>([^<]*<img[^>]+>)?[^<]*<br />[^<]*</td>",Pattern.CASE_INSENSITIVE | Pattern.MULTILINE);
  final Pattern patternTbs=Pattern.compile("<a id=\"ctl00_ContentBody_dlResults_ctl[0-9]+_uxTravelBugList\" class=\"tblist\" data-tbcount=\"([0-9]+)\" data-id=\"[^\"]*\"[^>]*>(.*)</a>",Pattern.CASE_INSENSITIVE);
  final Pattern patternTbsInside=Pattern.compile("(<img src=\"[^\"]+\" alt=\"([^\"]+)\" title=\"[^\"]*\" />[^<]*)",Pattern.CASE_INSENSITIVE | Pattern.MULTILINE);
  final Pattern patternDirection=Pattern.compile("<img id=\"ctl00_ContentBody_dlResults_ctl[0-9]+_uxDistanceAndHeading\" title=\"[^\"]*\" src=\"[^\"]*/seek/CacheDir\\.ashx\\?k=([^\"]+)\"[^>]*>",Pattern.CASE_INSENSITIVE);
  final Pattern patternCode=Pattern.compile("\\|\\W*(GC[a-z0-9]+)[^\\|]*\\|",Pattern.CASE_INSENSITIVE | Pattern.MULTILINE);
  final Pattern patternId=Pattern.compile("name=\"CID\"[^v]*value=\"([0-9]+)\"",Pattern.CASE_INSENSITIVE);
  final Pattern patternFavourite=Pattern.compile("<span id=\"ctl00_ContentBody_dlResults_ctl[0-9]+_uxFavoritesValue\" title=\"[^\"]*\" class=\"favorite-rank\">([0-9]+)</span>",Pattern.CASE_INSENSITIVE);
  final Pattern patternTotalCnt=Pattern.compile("<td class=\"PageBuilderWidget\"><span>Total Records[^<]*<b>(\\d+)<\\/b>",Pattern.CASE_INSENSITIVE);
  final Pattern patternRecaptcha=Pattern.compile("<script[^>]*src=\"[^\"]*/recaptcha/api/challenge\\?k=([^\"]+)\"[^>]*>",Pattern.CASE_INSENSITIVE);
  final Pattern patternRecaptchaChallenge=Pattern.compile("challenge : '([^']+)'",Pattern.CASE_INSENSITIVE);
  caches.viewstates=getViewstates(page);
  if (showCaptcha) {
    try {
      String recaptchaJsParam=null;
      final Matcher matcherRecaptcha=patternRecaptcha.matcher(page);
      while (matcherRecaptcha.find()) {
        if (matcherRecaptcha.groupCount() > 0) {
          recaptchaJsParam=matcherRecaptcha.group(1);
        }
      }
      if (recaptchaJsParam != null) {
        final Parameters params=new Parameters("k",recaptchaJsParam.trim());
        final String recaptchaJs=cgBase.getResponseData(request("http://www.google.com/recaptcha/api/challenge",params,true));
        if (StringUtils.isNotBlank(recaptchaJs)) {
          final Matcher matcherRecaptchaChallenge=patternRecaptchaChallenge.matcher(recaptchaJs);
          while (matcherRecaptchaChallenge.find()) {
            if (matcherRecaptchaChallenge.groupCount() > 0) {
              recaptchaChallenge=matcherRecaptchaChallenge.group(1).trim();
            }
          }
        }
      }
    }
 catch (    Exception e) {
      Log.w(Settings.tag,"cgeoBase.parseSearch: Failed to parse recaptcha challenge");
    }
    if (thread != null && StringUtils.isNotBlank(recaptchaChallenge)) {
      thread.setChallenge(recaptchaChallenge);
      thread.notifyNeed();
    }
  }
  if (!page.contains("SearchResultsTable")) {
    return caches;
  }
  int startPos=page.indexOf("<div id=\"ctl00_ContentBody_ResultsPanel\"");
  if (startPos == -1) {
    Log.e(Settings.tag,"cgeoBase.parseSearch: ID \"ctl00_ContentBody_dlResults\" not found on page");
    return null;
  }
  page=page.substring(startPos);
  startPos=page.indexOf(">");
  int endPos=page.indexOf("ctl00_ContentBody_UnitTxt");
  if (startPos == -1 || endPos == -1) {
    Log.e(Settings.tag,"cgeoBase.parseSearch: ID \"ctl00_ContentBody_UnitTxt\" not found on page");
    return null;
  }
  page=page.substring(startPos + 1,endPos - startPos + 1);
  final String[] rows=page.split("<tr class=");
  final int rows_count=rows.length;
  for (int z=1; z < rows_count; z++) {
    cgCache cache=new cgCache();
    String row=rows[z];
    if (!row.contains("images/wpttypes")) {
      continue;
    }
    try {
      final Matcher matcherGuidAndDisabled=patternGuidAndDisabled.matcher(row);
      while (matcherGuidAndDisabled.find()) {
        if (matcherGuidAndDisabled.groupCount() > 0) {
          guids.add(matcherGuidAndDisabled.group(1));
          cache.guid=matcherGuidAndDisabled.group(1);
          if (matcherGuidAndDisabled.group(4) != null) {
            cache.name=Html.fromHtml(matcherGuidAndDisabled.group(4).trim()).toString();
          }
          if (matcherGuidAndDisabled.group(6) != null) {
            cache.location=Html.fromHtml(matcherGuidAndDisabled.group(6).trim()).toString();
          }
          final String attr=matcherGuidAndDisabled.group(2);
          if (attr != null) {
            if (attr.contains("Strike")) {
              cache.disabled=true;
            }
 else {
              cache.disabled=false;
            }
            if (attr.contains("OldWarning")) {
              cache.archived=true;
            }
 else {
              cache.archived=false;
            }
          }
        }
      }
    }
 catch (    Exception e) {
      Log.w(Settings.tag,"cgeoBase.parseSearch: Failed to parse GUID and/or Disabled data");
    }
    if (Settings.isExcludeDisabledCaches() && (cache.disabled || cache.archived)) {
      cache=null;
      continue;
    }
    String inventoryPre=null;
    try {
      final Matcher matcherCode=patternCode.matcher(row);
      while (matcherCode.find()) {
        if (matcherCode.groupCount() > 0) {
          cache.geocode=new String(matcherCode.group(1).toUpperCase().trim());
        }
      }
    }
 catch (    Exception e) {
      Log.w(Settings.tag,"cgeoBase.parseSearch: Failed to parse cache code");
    }
    try {
      final Matcher matcherCacheType=patternCacheType.matcher(row);
      while (matcherCacheType.find()) {
        if (matcherCacheType.groupCount() > 0) {
          cache.type=cacheTypes.get(matcherCacheType.group(1).toLowerCase());
        }
      }
    }
 catch (    Exception e) {
      Log.w(Settings.tag,"cgeoBase.parseSearch: Failed to parse cache type");
    }
    if (Settings.getLoadDirImg()) {
      try {
        final Matcher matcherDirection=patternDirection.matcher(row);
        while (matcherDirection.find()) {
          if (matcherDirection.groupCount() > 0) {
            cache.directionImg=matcherDirection.group(1);
          }
        }
      }
 catch (      Exception e) {
        Log.w(Settings.tag,"cgeoBase.parseSearch: Failed to parse cache direction image");
      }
    }
    try {
      final Matcher matcherTbs=patternTbs.matcher(row);
      while (matcherTbs.find()) {
        if (matcherTbs.groupCount() > 0) {
          cache.inventoryItems=Integer.parseInt(matcherTbs.group(1));
          inventoryPre=matcherTbs.group(2);
        }
      }
    }
 catch (    Exception e) {
      Log.w(Settings.tag,"cgeoBase.parseSearch: Failed to parse cache inventory (1)");
    }
    if (StringUtils.isNotBlank(inventoryPre)) {
      try {
        final Matcher matcherTbsInside=patternTbsInside.matcher(inventoryPre);
        while (matcherTbsInside.find()) {
          if (matcherTbsInside.groupCount() == 2 && matcherTbsInside.group(2) != null) {
            final String inventoryItem=matcherTbsInside.group(2).toLowerCase();
            if (inventoryItem.equals("premium member only cache")) {
              continue;
            }
 else {
              if (cache.inventoryItems <= 0) {
                cache.inventoryItems=1;
              }
            }
          }
        }
      }
 catch (      Exception e) {
        Log.w(Settings.tag,"cgeoBase.parseSearch: Failed to parse cache inventory info");
      }
    }
    cache.members=row.contains("/images/small_profile.gif");
    cache.found=row.contains("/images/icons/icon_smile");
    cache.own=row.contains("/images/silk/star.png");
    try {
      final Matcher matcherId=patternId.matcher(row);
      while (matcherId.find()) {
        if (matcherId.groupCount() > 0) {
          cache.cacheId=matcherId.group(1);
          cids.add(cache.cacheId);
        }
      }
    }
 catch (    Exception e) {
      Log.w(Settings.tag,"cgeoBase.parseSearch: Failed to parse cache id");
    }
    try {
      final Matcher matcherFavourite=patternFavourite.matcher(row);
      while (matcherFavourite.find()) {
        if (matcherFavourite.groupCount() > 0) {
          cache.favouriteCnt=Integer.parseInt(matcherFavourite.group(1));
        }
      }
    }
 catch (    Exception e) {
      Log.w(Settings.tag,"cgeoBase.parseSearch: Failed to parse favourite count");
    }
    if (cache.nameSp == null) {
      cache.nameSp=(new Spannable.Factory()).newSpannable(cache.name);
      if (cache.disabled || cache.archived) {
        cache.nameSp.setSpan(new StrikethroughSpan(),0,cache.nameSp.toString().length(),Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
      }
    }
    caches.cacheList.add(cache);
  }
  try {
    final Matcher matcherTotalCnt=patternTotalCnt.matcher(page);
    while (matcherTotalCnt.find()) {
      if (matcherTotalCnt.groupCount() > 0) {
        if (matcherTotalCnt.group(1) != null) {
          caches.totalCnt=Integer.valueOf(matcherTotalCnt.group(1));
        }
      }
    }
  }
 catch (  Exception e) {
    Log.w(Settings.tag,"cgeoBase.parseSearch: Failed to parse cache count");
  }
  if (thread != null && recaptchaChallenge != null) {
    if (thread.getText() == null) {
      thread.waitForUser();
    }
    recaptchaText=thread.getText();
  }
  if (cids.size() > 0 && (recaptchaChallenge == null || StringUtils.isNotBlank(recaptchaText))) {
    Log.i(Settings.tag,"Trying to get .loc for " + cids.size() + " caches");
    try {
      final Parameters params=new Parameters("__EVENTTARGET","","__EVENTARGUMENT","");
      if (ArrayUtils.isNotEmpty(caches.viewstates)) {
        params.put("__VIEWSTATE",caches.viewstates[0]);
        if (caches.viewstates.length > 1) {
          for (int i=1; i < caches.viewstates.length; i++) {
            params.put("__VIEWSTATE" + i,caches.viewstates[i]);
          }
          params.put("__VIEWSTATEFIELDCOUNT","" + caches.viewstates.length);
        }
      }
      for (      String cid : cids) {
        params.put("CID",cid);
      }
      if (recaptchaChallenge != null && StringUtils.isNotBlank(recaptchaText)) {
        params.put("recaptcha_challenge_field",recaptchaChallenge);
        params.put("recaptcha_response_field",recaptchaText);
      }
      params.put("ctl00$ContentBody$uxDownloadLoc","Download Waypoints");
      final String coordinates=getResponseData(postRequest("http://www.geocaching.com/seek/nearest.aspx",params));
      if (StringUtils.isNotBlank(coordinates)) {
        if (coordinates.contains("You have not agreed to the license agreement. The license agreement is required before you can start downloading GPX or LOC files from Geocaching.com")) {
          Log.i(Settings.tag,"User has not agreed to the license agreement. Can\'t download .loc file.");
          caches.error=StatusCode.UNAPPROVED_LICENSE;
          return caches;
        }
      }
      LocParser.parseLoc(caches,coordinates);
    }
 catch (    Exception e) {
      Log.e(Settings.tag,"cgBase.parseSearch.CIDs: " + e.toString());
    }
  }
  if (Settings.getLoadDirImg()) {
    for (    cgCache oneCache : caches.cacheList) {
      if (oneCache.coords == null && oneCache.directionImg != null) {
        cgDirectionImg.getDrawable(oneCache.geocode,oneCache.directionImg);
      }
    }
  }
  if (guids.size() > 0) {
    Log.i(Settings.tag,"Trying to get ratings for " + cids.size() + " caches");
    try {
      final Map<String,cgRating> ratings=GCVote.getRating(guids,null);
      if (MapUtils.isNotEmpty(ratings)) {
        for (        cgCache oneCache : caches.cacheList) {
          if (ratings.containsKey(oneCache.guid)) {
            cgRating thisRating=ratings.get(oneCache.guid);
            oneCache.rating=thisRating.rating;
            oneCache.votes=thisRating.votes;
            oneCache.myVote=thisRating.myVote;
          }
        }
      }
    }
 catch (    Exception e) {
      Log.e(Settings.tag,"cgBase.parseSearch.GCvote: " + e.toString());
    }
  }
  return caches;
}
