{
  String rawResponse=null;
  if (!getDataFromPage) {
    final Matcher userTokenMatcher=GCConstants.PATTERN_USERTOKEN2.matcher(page);
    if (!userTokenMatcher.find()) {
      Log.e("cgBase.loadLogsFromDetails: unable to extract userToken");
      return null;
    }
    final String userToken=userTokenMatcher.group(1);
    final Parameters params=new Parameters("tkn",userToken,"idx","1","num",String.valueOf(GCConstants.NUMBER_OF_LOGS),"decrypt","true","sf",Boolean.toString(friends));
    final HttpResponse response=Network.request("http://www.geocaching.com/seek/geocache.logbook",params);
    if (response == null) {
      Log.e("cgBase.loadLogsFromDetails: cannot log logs, response is null");
      return null;
    }
    final int statusCode=response.getStatusLine().getStatusCode();
    if (statusCode != 200) {
      Log.e("cgBase.loadLogsFromDetails: error " + statusCode + " when requesting log information");
      return null;
    }
    rawResponse=Network.getResponseData(response);
    if (rawResponse == null) {
      Log.e("cgBase.loadLogsFromDetails: unable to read whole response");
      return null;
    }
  }
 else {
    rawResponse=BaseUtils.getMatch(page,GCConstants.PATTERN_LOGBOOK,"");
  }
  List<cgLog> logs=new ArrayList<cgLog>();
  try {
    final JSONObject resp=new JSONObject(rawResponse);
    if (!resp.getString("status").equals("success")) {
      Log.e("cgBase.loadLogsFromDetails: status is " + resp.getString("status"));
      return null;
    }
    final JSONArray data=resp.getJSONArray("data");
    for (int index=0; index < data.length(); index++) {
      final JSONObject entry=data.getJSONObject(index);
      final cgLog logDone=new cgLog();
      logDone.friend=friends;
      final String logIconNameExt=entry.optString("LogTypeImage",".gif");
      final String logIconName=logIconNameExt.substring(0,logIconNameExt.length() - 4);
      logDone.type=LogType.getByIconName(logIconName);
      try {
        logDone.date=Login.parseGcCustomDate(entry.getString("Visited")).getTime();
      }
 catch (      ParseException e) {
        Log.e("cgBase.loadLogsFromDetails: failed to parse log date.");
      }
      logDone.author=entry.getString("UserName");
      logDone.found=entry.getInt("GeocacheFindCount");
      logDone.log=entry.getString("LogText");
      final JSONArray images=entry.getJSONArray("Images");
      for (int i=0; i < images.length(); i++) {
        final JSONObject image=images.getJSONObject(i);
        String url="http://img.geocaching.com/cache/log/" + image.getString("FileName");
        String title=image.getString("Name");
        final cgImage logImage=new cgImage(url,title);
        if (logDone.logImages == null) {
          logDone.logImages=new ArrayList<cgImage>();
        }
        logDone.logImages.add(logImage);
      }
      logs.add(logDone);
    }
  }
 catch (  JSONException e) {
    Log.w("cgBase.loadLogsFromDetails: Failed to parse cache logs",e);
  }
  return logs;
}
