{
  this.app=app;
  context=app.getBaseContext();
  res=app.getBaseContext().getResources();
  cacheIDsChoices.put(res.getString(R.string.all),CacheType.ALL_GUID);
  for (  CacheType ct : CacheType.values()) {
    String l10n=res.getString(ct.stringId);
    cacheTypesInv.put(ct,l10n);
    cacheIDsChoices.put(l10n,ct.guid);
  }
  for (  CacheSize cs : CacheSize.values()) {
    cacheSizesInv.put(cs,res.getString(cs.stringId));
  }
  for (  WaypointType wt : WaypointType.values()) {
    if (wt != WaypointType.OWN) {
      waypointTypes.put(wt,res.getString(wt.stringId));
    }
  }
  logTypes1.put(LOG_FOUND_IT,res.getString(R.string.log_found));
  logTypes1.put(LOG_DIDNT_FIND_IT,res.getString(R.string.log_dnf));
  logTypes1.put(LOG_NOTE,res.getString(R.string.log_note));
  logTypes1.put(LOG_PUBLISH_LISTING,res.getString(R.string.log_published));
  logTypes1.put(LOG_ENABLE_LISTING,res.getString(R.string.log_enabled));
  logTypes1.put(LOG_ARCHIVE,res.getString(R.string.log_archived));
  logTypes1.put(LOG_TEMP_DISABLE_LISTING,res.getString(R.string.log_disabled));
  logTypes1.put(LOG_NEEDS_ARCHIVE,res.getString(R.string.log_needs_archived));
  logTypes1.put(LOG_WILL_ATTEND,res.getString(R.string.log_attend));
  logTypes1.put(LOG_ATTENDED,res.getString(R.string.log_attended));
  logTypes1.put(LOG_RETRIEVED_IT,res.getString(R.string.log_retrieved));
  logTypes1.put(LOG_PLACED_IT,res.getString(R.string.log_placed));
  logTypes1.put(LOG_GRABBED_IT,res.getString(R.string.log_grabbed));
  logTypes1.put(LOG_NEEDS_MAINTENANCE,res.getString(R.string.log_maintenance_needed));
  logTypes1.put(LOG_OWNER_MAINTENANCE,res.getString(R.string.log_maintained));
  logTypes1.put(LOG_UPDATE_COORDINATES,res.getString(R.string.log_update));
  logTypes1.put(LOG_DISCOVERED_IT,res.getString(R.string.log_discovered));
  logTypes1.put(LOG_POST_REVIEWER_NOTE,res.getString(R.string.log_reviewed));
  logTypes1.put(LOG_VISIT,res.getString(R.string.log_taken));
  logTypes1.put(LOG_WEBCAM_PHOTO_TAKEN,res.getString(R.string.log_webcam));
  logTypes1.put(LOG_ANNOUNCEMENT,res.getString(R.string.log_announcement));
  logTypes2.put(LOG_FOUND_IT,res.getString(R.string.log_found));
  logTypes2.put(LOG_DIDNT_FIND_IT,res.getString(R.string.log_dnf));
  logTypes2.put(LOG_NOTE,res.getString(R.string.log_note));
  logTypes2.put(LOG_PUBLISH_LISTING,res.getString(R.string.log_published));
  logTypes2.put(LOG_ENABLE_LISTING,res.getString(R.string.log_enabled));
  logTypes2.put(LOG_ARCHIVE,res.getString(R.string.log_archived));
  logTypes2.put(LOG_TEMP_DISABLE_LISTING,res.getString(R.string.log_disabled));
  logTypes2.put(LOG_NEEDS_ARCHIVE,res.getString(R.string.log_needs_archived));
  logTypes2.put(LOG_WILL_ATTEND,res.getString(R.string.log_attend));
  logTypes2.put(LOG_ATTENDED,res.getString(R.string.log_attended));
  logTypes2.put(LOG_WEBCAM_PHOTO_TAKEN,res.getString(R.string.log_webcam));
  logTypes2.put(LOG_RETRIEVED_IT,res.getString(R.string.log_retrieved));
  logTypes2.put(LOG_GRABBED_IT,res.getString(R.string.log_grabbed));
  logTypes2.put(LOG_NEEDS_MAINTENANCE,res.getString(R.string.log_maintenance_needed));
  logTypes2.put(LOG_OWNER_MAINTENANCE,res.getString(R.string.log_maintained));
  logTypes2.put(LOG_DISCOVERED_IT,res.getString(R.string.log_discovered));
  logTypes2.put(LOG_POST_REVIEWER_NOTE,res.getString(R.string.log_reviewed));
  logTypes2.put(LOG_ANNOUNCEMENT,res.getString(R.string.log_announcement));
  try {
    final PackageManager manager=app.getPackageManager();
    final PackageInfo info=manager.getPackageInfo(app.getPackageName(),0);
    version=info.versionName;
  }
 catch (  PackageManager.NameNotFoundException e) {
    Log.e(Settings.tag,"unable to get version information",e);
    version=null;
  }
  if (Settings.isBrowser()) {
    final long rndBrowser=Math.round(Math.random() * 6);
switch ((int)rndBrowser) {
case 0:
      idBrowser="Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US) AppleWebKit/533.1 (KHTML, like Gecko) Chrome/5.0.322.2 Safari/533.1";
    break;
case 1:
  idBrowser="Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1; WOW64; Trident/4.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; MDDC)";
break;
case 2:
idBrowser="Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.9.2.3) Gecko/20100401 Firefox/3.6.3";
break;
case 3:
idBrowser="Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10_6_2; en-us) AppleWebKit/531.21.8 (KHTML, like Gecko) Version/4.0.4 Safari/531.21.10";
break;
case 4:
idBrowser="Mozilla/5.0 (iPod; U; CPU iPhone OS 2_2_1 like Mac OS X; en-us) AppleWebKit/525.18.1 (KHTML, like Gecko) Version/3.1.1 Mobile/5H11a Safari/525.20";
break;
case 5:
idBrowser="Mozilla/5.0 (Linux; U; Android 1.1; en-gb; dream) AppleWebKit/525.10+ (KHTML, like Gecko) Version/3.0.4 Mobile Safari/523.12.2";
break;
case 6:
idBrowser="Mozilla/5.0 (X11; U; Linux i686; en-US) AppleWebKit/533.4 (KHTML, like Gecko) Chrome/5.0.375.86 Safari/533.4";
break;
default :
idBrowser="Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10_6_2; en-US) AppleWebKit/532.9 (KHTML, like Gecko) Chrome/5.0.307.11 Safari/532.9";
break;
}
}
}
