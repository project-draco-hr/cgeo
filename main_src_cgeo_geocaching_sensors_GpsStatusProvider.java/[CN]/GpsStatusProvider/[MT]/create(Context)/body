{
  final Observable<Status> observable=Observable.create(new OnSubscribe<Status>(){
    @Override public void call(    final Subscriber<? super Status> subscriber){
      final LocationManager geoManager=(LocationManager)context.getSystemService(Context.LOCATION_SERVICE);
      final Listener listener=new Listener(){
        Status latest=new Status(false,0,0);
        @Override public void onGpsStatusChanged(        final int event){
switch (event) {
case GpsStatus.GPS_EVENT_FIRST_FIX:
case GpsStatus.GPS_EVENT_SATELLITE_STATUS:
{
              final GpsStatus status=geoManager.getGpsStatus(null);
              int visible=0;
              int fixed=0;
              for (              final GpsSatellite satellite : status.getSatellites()) {
                if (satellite.usedInFix()) {
                  fixed++;
                }
                visible++;
              }
              if (visible == latest.satellitesVisible && fixed == latest.satellitesFixed) {
                return;
              }
              latest=new Status(true,visible,fixed);
              break;
            }
case GpsStatus.GPS_EVENT_STARTED:
          latest=new Status(true,0,0);
        break;
case GpsStatus.GPS_EVENT_STOPPED:
      latest=new Status(false,0,0);
    break;
default :
  subscriber.onError(new IllegalStateException());
return;
}
subscriber.onNext(latest);
}
}
;
subscriber.onNext(NO_GPS);
geoManager.addGpsStatusListener(listener);
subscriber.add(Subscriptions.create(new Action0(){
@Override public void call(){
RxUtils.looperCallbacksWorker.schedule(new Action0(){
@Override public void call(){
geoManager.removeGpsStatusListener(listener);
}
}
);
}
}
));
}
}
);
return observable.subscribeOn(RxUtils.looperCallbacksScheduler);
}
