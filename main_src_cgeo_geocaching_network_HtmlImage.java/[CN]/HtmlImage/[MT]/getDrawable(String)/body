{
  if (StringUtils.isBlank(url) || isCounter(url)) {
    return new BitmapDrawable(resources,getTransparent1x1Image());
  }
  final boolean shared=url.contains("/images/icons/icon_");
  final String pseudoGeocode=shared ? SHARED : geocode;
  Bitmap imagePre=loadImageFromStorage(url,pseudoGeocode,shared);
  if (imagePre == null) {
    final File file=LocalStorage.getStorageFile(pseudoGeocode,url,true,true);
    if (url.startsWith("data:image/")) {
      if (url.contains(";base64,")) {
        byte[] decoded=Base64.decode(StringUtils.substringAfter(url,";base64,"),Base64.DEFAULT);
        OutputStream out=null;
        try {
          out=new FileOutputStream(file);
          out.write(decoded);
        }
 catch (        final IOException e) {
          Log.e("HtmlImage.getDrawable: cannot write file for decoded inline image",e);
          return null;
        }
 finally {
          IOUtils.closeQuietly(out);
        }
      }
 else {
        Log.e("HtmlImage.getDrawable: unable to decode non-base64 inline image");
        return null;
      }
    }
 else {
      final String absoluteURL=makeAbsoluteURL(url);
      if (absoluteURL != null) {
        try {
          final HttpResponse httpResponse=Network.getRequest(absoluteURL,null,file);
          if (httpResponse != null) {
            final int statusCode=httpResponse.getStatusLine().getStatusCode();
            if (statusCode == 200) {
              LocalStorage.saveEntityToFile(httpResponse,file);
            }
 else             if (statusCode == 304) {
              if (!file.setLastModified(System.currentTimeMillis())) {
                makeFreshCopy(file);
              }
            }
          }
        }
 catch (        Exception e) {
          Log.e("HtmlImage.getDrawable (downloading from web)",e);
        }
      }
    }
  }
  if (onlySave) {
    return null;
  }
  if (imagePre == null) {
    imagePre=loadImageFromStorage(url,pseudoGeocode,shared);
  }
  if (imagePre == null) {
    Log.d("HtmlImage.getDrawable: Failed to obtain image");
    if (returnErrorImage) {
      imagePre=BitmapFactory.decodeResource(resources,R.drawable.image_not_loaded);
    }
 else {
      imagePre=getTransparent1x1Image();
    }
  }
  return imagePre != null ? ImageUtils.scaleBitmapToFitDisplay(imagePre) : null;
}
