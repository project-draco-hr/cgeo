{
  if (StringUtils.isBlank(url) || ImageUtils.containsPattern(url,BLOCKED)) {
    return Observable.just(ImageUtils.getTransparent1x1Drawable(resources));
  }
  if (FileUtils.isFileUrl(url)) {
    return Observable.defer(new Func0<Observable<BitmapDrawable>>(){
      @Override public Observable<BitmapDrawable> call(){
        final Bitmap bitmap=loadCachedImage(FileUtils.urlToFile(url),true).left;
        return bitmap != null ? Observable.just(ImageUtils.scaleBitmapToFitDisplay(bitmap)) : Observable.<BitmapDrawable>empty();
      }
    }
).subscribeOn(RxUtils.computationScheduler);
  }
  final boolean shared=url.contains("/images/icons/icon_");
  final String pseudoGeocode=shared ? SHARED : geocode;
  return Observable.create(new OnSubscribe<BitmapDrawable>(){
    @Override public void call(    final Subscriber<? super BitmapDrawable> subscriber){
      subscription.add(subscriber);
      subscriber.add(RxUtils.computationScheduler.createWorker().schedule(new Action0(){
        @Override public void call(){
          final ImmutablePair<BitmapDrawable,Boolean> loaded=loadFromDisk();
          final BitmapDrawable bitmap=loaded.left;
          if (loaded.right) {
            subscriber.onNext(bitmap);
            subscriber.onCompleted();
            return;
          }
          if (bitmap != null && !onlySave) {
            subscriber.onNext(bitmap);
          }
          RxUtils.networkScheduler.createWorker().schedule(new Action0(){
            @Override public void call(){
              downloadAndSave(subscriber);
            }
          }
);
        }
      }
));
    }
    private ImmutablePair<BitmapDrawable,Boolean> loadFromDisk(){
      final ImmutablePair<Bitmap,Boolean> loadResult=loadImageFromStorage(url,pseudoGeocode,shared);
      return scaleImage(loadResult);
    }
    private void downloadAndSave(    final Subscriber<? super BitmapDrawable> subscriber){
      final File file=LocalStorage.getStorageFile(pseudoGeocode,url,true,true);
      if (url.startsWith("data:image/")) {
        if (url.contains(";base64,")) {
          ImageUtils.decodeBase64ToFile(StringUtils.substringAfter(url,";base64,"),file);
        }
 else {
          Log.e("HtmlImage.getDrawable: unable to decode non-base64 inline image");
          subscriber.onCompleted();
          return;
        }
      }
 else       if (subscriber.isUnsubscribed() || downloadOrRefreshCopy(url,file)) {
        subscriber.onCompleted();
        return;
      }
      if (onlySave) {
        subscriber.onCompleted();
        return;
      }
      RxUtils.computationScheduler.createWorker().schedule(new Action0(){
        @Override public void call(){
          final ImmutablePair<BitmapDrawable,Boolean> loaded=loadFromDisk();
          final BitmapDrawable image=loaded.left;
          if (image != null) {
            subscriber.onNext(image);
          }
 else {
            subscriber.onNext(returnErrorImage ? new BitmapDrawable(resources,BitmapFactory.decodeResource(resources,R.drawable.image_not_loaded)) : ImageUtils.getTransparent1x1Drawable(resources));
          }
          subscriber.onCompleted();
        }
      }
);
    }
  }
);
}
