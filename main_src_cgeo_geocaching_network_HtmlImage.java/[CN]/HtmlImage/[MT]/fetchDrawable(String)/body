{
  final boolean shared=url.contains("/images/icons/icon_");
  final String pseudoGeocode=shared ? SHARED : geocode;
  final Observable<Pair<BitmapDrawable,Boolean>> loadFromDisk=Observable.create(new OnSubscribe<Pair<BitmapDrawable,Boolean>>(){
    @Override public void call(    final Subscriber<? super Pair<BitmapDrawable,Boolean>> subscriber){
      final Pair<Bitmap,Boolean> loadResult=loadImageFromStorage(url,pseudoGeocode,shared);
      final Bitmap bitmap=loadResult.getLeft();
      subscriber.onNext(new ImmutablePair<BitmapDrawable,Boolean>(bitmap != null ? ImageUtils.scaleBitmapToFitDisplay(bitmap) : null,loadResult.getRight()));
      subscriber.onCompleted();
    }
  }
);
  final Observable<BitmapDrawable> downloadAndSave=Observable.defer(new Func0<Observable<? extends BitmapDrawable>>(){
    @Override public Observable<? extends BitmapDrawable> call(){
      final File file=LocalStorage.getStorageFile(pseudoGeocode,url,true,true);
      if (url.startsWith("data:image/")) {
        if (url.contains(";base64,")) {
          saveBase64ToFile(url,file);
        }
 else {
          Log.e("HtmlImage.getDrawable: unable to decode non-base64 inline image");
          return Observable.empty();
        }
      }
 else {
        if (subscription.isUnsubscribed() || downloadOrRefreshCopy(url,file)) {
          return Observable.empty();
        }
      }
      if (onlySave) {
        return Observable.empty();
      }
 else {
        return loadFromDisk.map(new Func1<Pair<BitmapDrawable,Boolean>,BitmapDrawable>(){
          @Override public BitmapDrawable call(          final Pair<BitmapDrawable,Boolean> loadResult){
            final BitmapDrawable image=loadResult.getLeft();
            if (image != null) {
              return image;
            }
            return returnErrorImage ? new BitmapDrawable(resources,BitmapFactory.decodeResource(resources,R.drawable.image_not_loaded)) : getTransparent1x1Image(resources);
          }
        }
);
      }
    }
  }
);
  if (StringUtils.isBlank(url) || isCounter(url)) {
    return Observable.from(getTransparent1x1Image(resources));
  }
  return loadFromDisk.switchMap(new Func1<Pair<BitmapDrawable,Boolean>,Observable<? extends BitmapDrawable>>(){
    @Override public Observable<? extends BitmapDrawable> call(    final Pair<BitmapDrawable,Boolean> loadResult){
      final BitmapDrawable bitmap=loadResult.getLeft();
      if (loadResult.getRight()) {
        return Observable.from(bitmap);
      }
      return bitmap != null && !onlySave ? downloadAndSave.startWith(bitmap) : downloadAndSave;
    }
  }
).subscribeOn(downloadScheduler);
}
