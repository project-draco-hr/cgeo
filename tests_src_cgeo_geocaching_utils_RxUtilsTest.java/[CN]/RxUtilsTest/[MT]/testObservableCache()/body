{
  final AtomicInteger counter=new AtomicInteger(0);
  final RxUtils.ObservableCache<String,Integer> cache=new RxUtils.ObservableCache<>(new Func1<String,Observable<Integer>>(){
    @Override public Observable<Integer> call(    final String s){
      counter.incrementAndGet();
      return Observable.just(s.length());
    }
  }
);
  assertThat(cache.get("a").toBlocking().single()).isEqualTo(1);
  assertThat(counter.get()).isEqualTo(1);
  assertThat(cache.get("a").toBlocking().single()).isEqualTo(1);
  assertThat(counter.get()).isEqualTo(1);
  assertThat(cache.get("bb").toBlocking().single()).isEqualTo(2);
  assertThat(counter.get()).isEqualTo(2);
  assertThat(cache.get("bb").toBlocking().single()).isEqualTo(2);
  assertThat(counter.get()).isEqualTo(2);
  assertThat(cache.get("a").toBlocking().single()).isEqualTo(1);
  assertThat(counter.get()).isEqualTo(2);
}
