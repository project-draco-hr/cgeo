{
  return Observable.defer(new Func0<Observable<Address>>(){
    @Override public Observable<Address> call(){
      final ObjectNode response=Network.requestJSON("https://www.mapquestapi.com/geocoding/v1/address",new Parameters("key",MAPQUEST_KEY,"location",address,"maxResults","20","thumbMaps","false"));
      final int statusCode=response != null ? response.path("info").path("statuscode").asInt(-1) : -1;
      if (statusCode != 0) {
        Log.w("MapQuest decoder error: statuscode is not 0");
        return Observable.error(new RuntimeException("no correct answer from MapQuest geocoder"));
      }
      return Observable.create(new OnSubscribe<Address>(){
        @Override public void call(        final Subscriber<? super Address> subscriber){
          try {
            for (            final JsonNode address : response.get("results").get(0).get("locations")) {
              subscriber.onNext(mapquestToAddress(address));
            }
            subscriber.onCompleted();
          }
 catch (          final Exception e) {
            Log.e("Error decoding MapQuest address",e);
            subscriber.onError(e);
          }
        }
      }
);
    }
  }
).subscribeOn(RxUtils.networkScheduler);
}
