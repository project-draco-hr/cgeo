{
  Geopoint result=null;
  Geopoint coords=null;
  String bearingText=((EditText)findViewById(R.id.bearing)).getText().toString();
  String distanceText=((EditText)findViewById(R.id.distance)).getText().toString();
  String latText=latButton.getText().toString();
  String lonText=lonButton.getText().toString();
  if (StringUtils.isBlank(bearingText) && StringUtils.isBlank(distanceText) && StringUtils.isBlank(latText)&& StringUtils.isBlank(lonText)) {
    showToast(res.getString(R.string.err_point_no_position_given));
    return null;
  }
  if (StringUtils.isNotBlank(latText) && StringUtils.isNotBlank(lonText)) {
    Map<String,Object> latParsed=cgBase.parseCoordinate(latText,"lat");
    Map<String,Object> lonParsed=cgBase.parseCoordinate(lonText,"lon");
    if (latParsed == null || latParsed.get("coordinate") == null || latParsed.get("string") == null) {
      showToast(res.getString(R.string.err_parse_lat));
      return null;
    }
    if (lonParsed == null || lonParsed.get("coordinate") == null || lonParsed.get("string") == null) {
      showToast(res.getString(R.string.err_parse_lon));
      return null;
    }
    coords=new Geopoint((Double)latParsed.get("coordinate"),(Double)lonParsed.get("coordinate"));
  }
 else {
    if (geo == null || geo.coordsNow == null) {
      showToast(res.getString(R.string.err_point_curr_position_unavailable));
      return null;
    }
    coords=geo.coordsNow;
  }
  if (StringUtils.isNotBlank(bearingText) && StringUtils.isNotBlank(distanceText)) {
    Double bearing=null;
    try {
      bearing=new Double(bearingText);
    }
 catch (    Exception e) {
    }
    if (bearing == null) {
      helpDialog(res.getString(R.string.err_point_bear_and_dist_title),res.getString(R.string.err_point_bear_and_dist));
      return null;
    }
    Double distance=null;
    final Pattern patternA=Pattern.compile("^([0-9\\.\\,]+)[ ]*m$",Pattern.CASE_INSENSITIVE);
    final Pattern patternB=Pattern.compile("^([0-9\\.\\,]+)[ ]*km$",Pattern.CASE_INSENSITIVE);
    final Pattern patternC=Pattern.compile("^([0-9\\.\\,]+)[ ]*ft$",Pattern.CASE_INSENSITIVE);
    final Pattern patternD=Pattern.compile("^([0-9\\.\\,]+)[ ]*yd$",Pattern.CASE_INSENSITIVE);
    final Pattern patternE=Pattern.compile("^([0-9\\.\\,]+)[ ]*mi$",Pattern.CASE_INSENSITIVE);
    Matcher matcherA=patternA.matcher(distanceText);
    Matcher matcherB=patternB.matcher(distanceText);
    Matcher matcherC=patternC.matcher(distanceText);
    Matcher matcherD=patternD.matcher(distanceText);
    Matcher matcherE=patternE.matcher(distanceText);
    if (matcherA.find() && matcherA.groupCount() > 0) {
      distance=(new Double(matcherA.group(1))) * 0.001;
    }
 else     if (matcherB.find() && matcherB.groupCount() > 0) {
      distance=new Double(matcherB.group(1));
    }
 else     if (matcherC.find() && matcherC.groupCount() > 0) {
      distance=(new Double(matcherC.group(1))) * 0.0003048;
    }
 else     if (matcherD.find() && matcherD.groupCount() > 0) {
      distance=(new Double(matcherD.group(1))) * 0.0009144;
    }
 else     if (matcherE.find() && matcherE.groupCount() > 0) {
      distance=(new Double(matcherE.group(1))) * 1.609344;
    }
 else {
      try {
        if (settings.units == cgSettings.unitsImperial) {
          distance=(new Double(distanceText)) * 0.0003048;
        }
 else {
          distance=(new Double(distanceText)) * 0.001;
        }
      }
 catch (      Exception e) {
      }
    }
    if (distance == null) {
      showToast(res.getString(R.string.err_parse_dist));
      return null;
    }
    final Geopoint coordsDst=cgBase.getRadialDistance(coords,bearing,distance);
    if (coordsDst == null) {
      showToast(res.getString(R.string.err_point_location_error));
      return null;
    }
    result=coordsDst;
  }
 else   if (coords != null) {
    result=coords;
  }
 else {
    return null;
  }
  saveCoords(result);
  return result;
}
