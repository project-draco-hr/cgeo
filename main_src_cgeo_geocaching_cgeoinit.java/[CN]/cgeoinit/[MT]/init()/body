{
  final ImmutablePair<String,String> login=Settings.getLogin();
  if (login != null) {
    ((EditText)findViewById(R.id.username)).setText(login.left);
    ((EditText)findViewById(R.id.password)).setText(login.right);
  }
  Button logMeIn=(Button)findViewById(R.id.log_me_in);
  logMeIn.setOnClickListener(new logIn());
  TextView legalNote=(TextView)findViewById(R.id.legal_note);
  legalNote.setClickable(true);
  legalNote.setOnClickListener(new View.OnClickListener(){
    public void onClick(    View arg0){
      startActivity(new Intent(Intent.ACTION_VIEW,Uri.parse("http://www.geocaching.com/about/termsofuse.aspx")));
    }
  }
);
  final ImmutablePair<String,String> gcvoteLogin=Settings.getGCvoteLogin();
  if (null != gcvoteLogin && null != gcvoteLogin.right) {
    ((EditText)findViewById(R.id.passvote)).setText(gcvoteLogin.right);
  }
  TextView go4cache=(TextView)findViewById(R.id.about_go4cache);
  go4cache.setClickable(true);
  go4cache.setOnClickListener(new View.OnClickListener(){
    public void onClick(    View arg0){
      startActivity(new Intent(Intent.ACTION_VIEW,Uri.parse("http://go4cache.com/")));
    }
  }
);
  final CheckBox publicButton=(CheckBox)findViewById(R.id.publicloc);
  publicButton.setChecked(Settings.isPublicLoc());
  publicButton.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      Settings.setPublicLoc(publicButton.isChecked());
    }
  }
);
  Button authorizeTwitter=(Button)findViewById(R.id.authorize_twitter);
  authorizeTwitter.setOnClickListener(new View.OnClickListener(){
    public void onClick(    View arg0){
      Intent authIntent=new Intent(cgeoinit.this,TwitterAuthorizationActivity.class);
      startActivity(authIntent);
    }
  }
);
  final CheckBox twitterButton=(CheckBox)findViewById(R.id.twitter_option);
  twitterButton.setChecked(Settings.isUseTwitter() && Settings.isTwitterLoginValid());
  twitterButton.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      Settings.setUseTwitter(twitterButton.isChecked());
      if (Settings.isUseTwitter() && !Settings.isTwitterLoginValid()) {
        Intent authIntent=new Intent(cgeoinit.this,TwitterAuthorizationActivity.class);
        startActivity(authIntent);
      }
      twitterButton.setChecked(Settings.isUseTwitter());
    }
  }
);
  EditText sigEdit=(EditText)findViewById(R.id.signature);
  if (sigEdit.getText().length() == 0) {
    sigEdit.setText(Settings.getSignature());
  }
  Button sigBtn=(Button)findViewById(R.id.signature_help);
  sigBtn.setOnClickListener(new View.OnClickListener(){
    public void onClick(    View v){
      helpDialog(res.getString(R.string.init_signature_help_title),res.getString(R.string.init_signature_help_text));
    }
  }
);
  Button templates=(Button)findViewById(R.id.signature_template);
  registerForContextMenu(templates);
  templates.setOnClickListener(new View.OnClickListener(){
    public void onClick(    View v){
      enableTemplatesMenu=true;
      openContextMenu(v);
      enableTemplatesMenu=false;
    }
  }
);
  final CheckBox autoinsertButton=(CheckBox)findViewById(R.id.sigautoinsert);
  autoinsertButton.setChecked(Settings.isAutoInsertSignature());
  autoinsertButton.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      Settings.setAutoInsertSignature(autoinsertButton.isChecked());
    }
  }
);
  final CheckBox autoloadButton=(CheckBox)findViewById(R.id.autoload);
  autoloadButton.setChecked(Settings.isAutoLoadDescription());
  autoloadButton.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      Settings.setAutoLoadDesc(autoloadButton.isChecked());
    }
  }
);
  final CheckBox ratingWantedButton=(CheckBox)findViewById(R.id.ratingwanted);
  ratingWantedButton.setChecked(Settings.isRatingWanted());
  ratingWantedButton.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      Settings.setRatingWanted(ratingWantedButton.isChecked());
    }
  }
);
  final CheckBox elevationWantedButton=(CheckBox)findViewById(R.id.elevationwanted);
  elevationWantedButton.setChecked(Settings.isElevationWanted());
  elevationWantedButton.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      Settings.setElevationWanted(elevationWantedButton.isChecked());
    }
  }
);
  final CheckBox friendLogsWantedButton=(CheckBox)findViewById(R.id.friendlogswanted);
  friendLogsWantedButton.setChecked(Settings.isFriendLogsWanted());
  friendLogsWantedButton.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      Settings.setFriendLogsWanted(friendLogsWantedButton.isChecked());
    }
  }
);
  final CheckBox openLastDetailsPageButton=(CheckBox)findViewById(R.id.openlastdetailspage);
  openLastDetailsPageButton.setChecked(Settings.isOpenLastDetailsPage());
  openLastDetailsPageButton.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      Settings.setOpenLastDetailsPage(openLastDetailsPageButton.isChecked());
    }
  }
);
  final CheckBox skinButton=(CheckBox)findViewById(R.id.skin);
  skinButton.setChecked(Settings.isLightSkin());
  skinButton.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      Settings.setLightSkin(skinButton.isChecked());
    }
  }
);
  final CheckBox addressButton=(CheckBox)findViewById(R.id.address);
  addressButton.setChecked(Settings.isShowAddress());
  addressButton.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      Settings.setShowAddress(addressButton.isChecked());
    }
  }
);
  final CheckBox captchaButton=(CheckBox)findViewById(R.id.captcha);
  captchaButton.setEnabled(!Settings.isPremiumMember());
  captchaButton.setChecked(Settings.isShowCaptcha());
  captchaButton.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      Settings.setShowCaptcha(captchaButton.isChecked());
    }
  }
);
  final CheckBox dirImgButton=(CheckBox)findViewById(R.id.loaddirectionimg);
  dirImgButton.setChecked(Settings.getLoadDirImg());
  dirImgButton.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      Settings.setLoadDirImg(!Settings.getLoadDirImg());
      dirImgButton.setChecked(Settings.getLoadDirImg());
    }
  }
);
  final CheckBox useEnglishButton=(CheckBox)findViewById(R.id.useenglish);
  useEnglishButton.setChecked(Settings.isUseEnglish());
  useEnglishButton.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      Settings.setUseEnglish(useEnglishButton.isChecked());
    }
  }
);
  final CheckBox excludeButton=(CheckBox)findViewById(R.id.exclude);
  excludeButton.setChecked(Settings.isExcludeMyCaches());
  excludeButton.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      Settings.setExcludeMine(excludeButton.isChecked());
    }
  }
);
  final CheckBox disabledButton=(CheckBox)findViewById(R.id.disabled);
  disabledButton.setChecked(Settings.isExcludeDisabledCaches());
  disabledButton.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      Settings.setExcludeDisabledCaches(disabledButton.isChecked());
    }
  }
);
  TextView showWaypointsThreshold=(TextView)findViewById(R.id.showwaypointsthreshold);
  showWaypointsThreshold.setText(String.valueOf(Settings.getWayPointsThreshold()));
  final CheckBox autovisitButton=(CheckBox)findViewById(R.id.trackautovisit);
  autovisitButton.setChecked(Settings.isTrackableAutoVisit());
  autovisitButton.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      Settings.setTrackableAutoVisit(autovisitButton.isChecked());
    }
  }
);
  final CheckBox offlineButton=(CheckBox)findViewById(R.id.offline);
  offlineButton.setChecked(Settings.isStoreOfflineMaps());
  offlineButton.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      Settings.setStoreOfflineMaps(offlineButton.isChecked());
    }
  }
);
  final CheckBox offlineWpButton=(CheckBox)findViewById(R.id.offline_wp);
  offlineWpButton.setChecked(Settings.isStoreOfflineWpMaps());
  offlineWpButton.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      Settings.setStoreOfflineWpMaps(offlineWpButton.isChecked());
    }
  }
);
  final CheckBox saveLogImgButton=(CheckBox)findViewById(R.id.save_log_img);
  saveLogImgButton.setChecked(Settings.isStoreLogImages());
  saveLogImgButton.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      Settings.setStoreLogImages(saveLogImgButton.isChecked());
    }
  }
);
  final CheckBox livelistButton=(CheckBox)findViewById(R.id.livelist);
  livelistButton.setChecked(Settings.isLiveList());
  livelistButton.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      Settings.setLiveList(livelistButton.isChecked());
    }
  }
);
  final CheckBox unitsButton=(CheckBox)findViewById(R.id.units);
  unitsButton.setChecked(!Settings.isUseMetricUnits());
  unitsButton.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      Settings.setUseMetricUnits(!unitsButton.isChecked());
    }
  }
);
  final CheckBox gnavButton=(CheckBox)findViewById(R.id.gnav);
  gnavButton.setChecked(Settings.isUseGoogleNavigation());
  gnavButton.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      Settings.setUseGoogleNavigation(gnavButton.isChecked());
    }
  }
);
  final CheckBox logOffline=(CheckBox)findViewById(R.id.log_offline);
  logOffline.setChecked(Settings.getLogOffline());
  logOffline.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      Settings.setLogOffline(!Settings.getLogOffline());
      logOffline.setChecked(Settings.getLogOffline());
    }
  }
);
  EditText altitudeEdit=(EditText)findViewById(R.id.altitude);
  altitudeEdit.setText(String.valueOf(Settings.getAltCorrection()));
  String webDeviceName=Settings.getWebDeviceName();
  if (StringUtils.isNotBlank(webDeviceName)) {
    ((EditText)findViewById(R.id.webDeviceName)).setText(webDeviceName);
  }
 else {
    String s=android.os.Build.MODEL;
    ((EditText)findViewById(R.id.webDeviceName)).setText(s);
  }
  Button webAuth=(Button)findViewById(R.id.sendToCgeo_register);
  webAuth.setOnClickListener(new webAuth());
  SortedMap<Integer,String> mapSources=MapProviderFactory.getMapSources();
  Spinner mapSourceSelector=(Spinner)findViewById(R.id.mapsource);
  ArrayAdapter<CharSequence> adapter=new ArrayAdapter<CharSequence>(this,android.R.layout.simple_spinner_item,mapSources.values().toArray(new String[]{}));
  adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
  mapSourceSelector.setAdapter(adapter);
  int mapsource=Settings.getMapSource();
  mapSourceSelector.setSelection(MapProviderFactory.getSourceOrdinalFromId(mapsource));
  mapSourceSelector.setOnItemSelectedListener(new cgeoChangeMapSource());
  initMapfileEdittext(false);
  Button selectMapfile=(Button)findViewById(R.id.select_mapfile);
  selectMapfile.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      Intent selectIntent=new Intent(cgeoinit.this,cgSelectMapfile.class);
      startActivityForResult(selectIntent,SELECT_MAPFILE_REQUEST);
    }
  }
);
  final CheckBox trailButton=(CheckBox)findViewById(R.id.trail);
  trailButton.setChecked(Settings.isMapTrail());
  trailButton.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      Settings.setMapTrail(trailButton.isChecked());
    }
  }
);
  Spinner defaultNavigationToolSelector=(Spinner)findViewById(R.id.default_navigation_tool);
  final List<NavigationAppsEnum> apps=NavigationAppFactory.getInstalledNavigationApps(this);
  ArrayAdapter<NavigationAppsEnum> naviAdapter=new ArrayAdapter<NavigationAppsEnum>(this,android.R.layout.simple_spinner_item,apps){
    @Override public View getView(    int position,    View convertView,    ViewGroup parent){
      TextView textView=(TextView)super.getView(position,convertView,parent);
      textView.setText(getItem(position).app.getName());
      return textView;
    }
    @Override public View getDropDownView(    int position,    View convertView,    ViewGroup parent){
      TextView textView=(TextView)super.getDropDownView(position,convertView,parent);
      textView.setText(getItem(position).app.getName());
      return textView;
    }
  }
;
  naviAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
  defaultNavigationToolSelector.setAdapter(naviAdapter);
  int defaultNavigationTool=Settings.getDefaultNavigationTool();
  int ordinal=0;
  for (int i=0; i < apps.size(); i++) {
    if (apps.get(i).id == defaultNavigationTool) {
      ordinal=i;
      break;
    }
  }
  defaultNavigationToolSelector.setSelection(ordinal);
  defaultNavigationToolSelector.setOnItemSelectedListener(new OnItemSelectedListener(){
    @Override public void onItemSelected(    AdapterView<?> parent,    View view,    int position,    long id){
      NavigationAppsEnum item=(NavigationAppsEnum)parent.getItemAtPosition(position);
      if (item != null) {
        Settings.setDefaultNavigationTool(item.id);
      }
    }
    @Override public void onNothingSelected(    AdapterView<?> arg0){
    }
  }
);
  Spinner defaultNavigationTool2Selector=(Spinner)findViewById(R.id.default_navigation_tool_2);
  ArrayAdapter<NavigationAppsEnum> navi2Adapter=new ArrayAdapter<NavigationAppsEnum>(this,android.R.layout.simple_spinner_item,apps){
    @Override public View getView(    int position,    View convertView,    ViewGroup parent){
      TextView textView=(TextView)super.getView(position,convertView,parent);
      textView.setText(getItem(position).app.getName());
      return textView;
    }
    @Override public View getDropDownView(    int position,    View convertView,    ViewGroup parent){
      TextView textView=(TextView)super.getDropDownView(position,convertView,parent);
      textView.setText(getItem(position).app.getName());
      return textView;
    }
  }
;
  navi2Adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
  defaultNavigationTool2Selector.setAdapter(navi2Adapter);
  int defaultNavigationTool2=Settings.getDefaultNavigationTool2();
  int ordinal2=0;
  for (int i=0; i < apps.size(); i++) {
    if (apps.get(i).id == defaultNavigationTool2) {
      ordinal2=i;
      break;
    }
  }
  defaultNavigationTool2Selector.setSelection(ordinal2);
  defaultNavigationTool2Selector.setOnItemSelectedListener(new OnItemSelectedListener(){
    @Override public void onItemSelected(    AdapterView<?> parent,    View view,    int position,    long id){
      NavigationAppsEnum item=(NavigationAppsEnum)parent.getItemAtPosition(position);
      if (item != null) {
        Settings.setDefaultNavigationTool2(item.id);
      }
    }
    @Override public void onNothingSelected(    AdapterView<?> arg0){
    }
  }
);
  refreshBackupLabel();
}
