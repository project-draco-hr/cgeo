{
  return Observable.from(searchByViewPortConns).filter(new Func1<ISearchByViewPort,Boolean>(){
    @Override public Boolean call(    final ISearchByViewPort connector){
      return connector.isActive();
    }
  }
).parallel(new Func1<Observable<ISearchByViewPort>,Observable<SearchResult>>(){
    @Override public Observable<SearchResult> call(    final Observable<ISearchByViewPort> connector){
      return connector.map(new Func1<ISearchByViewPort,SearchResult>(){
        @Override public SearchResult call(        final ISearchByViewPort connector){
          return connector.searchByViewport(viewport,tokens);
        }
      }
);
    }
  }
,Schedulers.io()).reduce(new SearchResult(),new Func2<SearchResult,SearchResult,SearchResult>(){
    @Override public SearchResult call(    final SearchResult result,    final SearchResult searchResult){
      result.addSearchResult(searchResult);
      return result;
    }
  }
);
}
