{
  Log.i("Upgrade database from ver. " + oldVersion + " to ver. "+ newVersion+ ": start");
  try {
    if (db.isReadOnly()) {
      return;
    }
    db.beginTransaction();
    if (oldVersion <= 0) {
      dropDatabase(db);
      onCreate(db);
      Log.i("Database structure created.");
    }
    if (oldVersion > 0) {
      db.execSQL("delete from " + dbTableCaches + " where reason = 0");
      if (oldVersion < 52) {
        try {
          db.execSQL(dbCreateSearchDestinationHistory);
          Log.i("Added table " + dbTableSearchDestinationHistory + ".");
        }
 catch (        final Exception e) {
          Log.e("Failed to upgrade to ver. 52",e);
        }
      }
      if (oldVersion < 53) {
        try {
          db.execSQL("alter table " + dbTableCaches + " add column onWatchlist integer");
          Log.i("Column onWatchlist added to " + dbTableCaches + ".");
        }
 catch (        final Exception e) {
          Log.e("Failed to upgrade to ver. 53",e);
        }
      }
      if (oldVersion < 54) {
        try {
          db.execSQL(dbCreateLogImages);
        }
 catch (        final Exception e) {
          Log.e("Failed to upgrade to ver. 54",e);
        }
      }
      if (oldVersion < 55) {
        try {
          db.execSQL("alter table " + dbTableCaches + " add column personal_note text");
        }
 catch (        final Exception e) {
          Log.e("Failed to upgrade to ver. 55",e);
        }
      }
      if (oldVersion < 56) {
        try {
          db.execSQL("update " + dbTableAttributes + " set attribute = "+ "lower(attribute) where attribute like \"%_yes\" "+ "or attribute like \"%_no\"");
        }
 catch (        final Exception e) {
          Log.e("Failed to upgrade to ver. 56",e);
        }
      }
      if (oldVersion < 57) {
        try {
          db.execSQL("drop index in_a");
          db.execSQL("drop index in_b");
          db.execSQL("drop index in_c");
          db.execSQL("drop index in_d");
          db.execSQL("drop index in_e");
          db.execSQL("drop index in_f");
          createIndices(db);
        }
 catch (        final Exception e) {
          Log.e("Failed to upgrade to ver. 57",e);
        }
      }
      if (oldVersion < 58) {
        try {
          db.beginTransaction();
          final String dbTableCachesTemp=dbTableCaches + "_temp";
          final String dbCreateCachesTemp="" + "create table " + dbTableCachesTemp + " ("+ "_id integer primary key autoincrement, "+ "updated long not null, "+ "detailed integer not null default 0, "+ "detailedupdate long, "+ "visiteddate long, "+ "geocode text unique not null, "+ "reason integer not null default 0, "+ "cacheid text, "+ "guid text, "+ "type text, "+ "name text, "+ "own integer not null default 0, "+ "owner text, "+ "owner_real text, "+ "hidden long, "+ "hint text, "+ "size text, "+ "difficulty float, "+ "terrain float, "+ "location text, "+ "direction double, "+ "distance double, "+ "latitude double, "+ "longitude double, "+ "reliable_latlon integer, "+ "personal_note text, "+ "shortdesc text, "+ "description text, "+ "favourite_cnt integer, "+ "rating float, "+ "votes integer, "+ "myvote float, "+ "disabled integer not null default 0, "+ "archived integer not null default 0, "+ "members integer not null default 0, "+ "found integer not null default 0, "+ "favourite integer not null default 0, "+ "inventorycoins integer default 0, "+ "inventorytags integer default 0, "+ "inventoryunknown integer default 0, "+ "onWatchlist integer default 0 "+ "); ";
          db.execSQL(dbCreateCachesTemp);
          db.execSQL("insert into " + dbTableCachesTemp + " select _id,updated,detailed,detailedupdate,visiteddate,geocode,reason,cacheid,guid,type,name,own,owner,owner_real,"+ "hidden,hint,size,difficulty,terrain,location,direction,distance,latitude,longitude, 0,"+ "personal_note,shortdesc,description,favourite_cnt,rating,votes,myvote,disabled,archived,members,found,favourite,inventorycoins,"+ "inventorytags,inventoryunknown,onWatchlist from "+ dbTableCaches);
          db.execSQL("drop table " + dbTableCaches);
          db.execSQL("alter table " + dbTableCachesTemp + " rename to "+ dbTableCaches);
          final String dbTableWaypointsTemp=dbTableWaypoints + "_temp";
          final String dbCreateWaypointsTemp="" + "create table " + dbTableWaypointsTemp + " ("+ "_id integer primary key autoincrement, "+ "geocode text not null, "+ "updated long not null, "+ "type text not null default 'waypoint', "+ "prefix text, "+ "lookup text, "+ "name text, "+ "latitude double, "+ "longitude double, "+ "note text "+ "); ";
          db.execSQL(dbCreateWaypointsTemp);
          db.execSQL("insert into " + dbTableWaypointsTemp + " select _id, geocode, updated, type, prefix, lookup, name, latitude, longitude, note from "+ dbTableWaypoints);
          db.execSQL("drop table " + dbTableWaypoints);
          db.execSQL("alter table " + dbTableWaypointsTemp + " rename to "+ dbTableWaypoints);
          createIndices(db);
          db.setTransactionSuccessful();
          Log.i("Removed latitude_string and longitude_string columns");
        }
 catch (        final Exception e) {
          Log.e("Failed to upgrade to ver. 58",e);
        }
 finally {
          db.endTransaction();
        }
      }
      if (oldVersion < 59) {
        try {
          createIndices(db);
          removeObsoleteCacheDirectories(db);
        }
 catch (        final Exception e) {
          Log.e("Failed to upgrade to ver. 59",e);
        }
      }
      if (oldVersion < 60) {
        try {
          removeSecEmptyDirs();
        }
 catch (        final Exception e) {
          Log.e("Failed to upgrade to ver. 60",e);
        }
      }
      if (oldVersion < 61) {
        try {
          db.execSQL("alter table " + dbTableLogs + " add column friend integer");
          db.execSQL("alter table " + dbTableCaches + " add column coordsChanged integer default 0");
        }
 catch (        final Exception e) {
          Log.e("Failed to upgrade to ver. 61",e);
        }
      }
      if (oldVersion < 62) {
        try {
          db.execSQL("alter table " + dbTableCaches + " add column finalDefined integer default 0");
          db.execSQL("alter table " + dbTableWaypoints + " add column own integer default 0");
          db.execSQL("update " + dbTableWaypoints + " set own = 1 where type = 'own'");
        }
 catch (        final Exception e) {
          Log.e("Failed to upgrade to ver. 62",e);
        }
      }
      if (oldVersion < 63) {
        try {
          removeDoubleUnderscoreMapFiles();
        }
 catch (        final Exception e) {
          Log.e("Failed to upgrade to ver. 63",e);
        }
      }
      if (oldVersion < 64) {
        try {
          db.execSQL("update " + dbTableCaches + " set reason=1 where reason=2");
        }
 catch (        final Exception e) {
          Log.e("Failed to upgrade to ver. 64",e);
        }
      }
      if (oldVersion < 65) {
        try {
          db.execSQL("update " + dbTableWaypoints + " set type='original', own=0 where name='Original Coordinates'");
        }
 catch (        final Exception e) {
          Log.e("Failed to upgrade to ver. 65:",e);
        }
      }
      if (oldVersion < 66) {
        try {
          db.execSQL("alter table " + dbTableWaypoints + " add column visited integer default 0");
        }
 catch (        final Exception e) {
          Log.e("Failed to upgrade to ver. 66",e);
        }
      }
      if (oldVersion < 67) {
        try {
          db.execSQL("update " + dbTableAttributes + " set attribute = 'easy_climbing_yes' where geocode like 'OC%' and attribute = 'climbing_yes'");
          db.execSQL("update " + dbTableAttributes + " set attribute = 'easy_climbing_no' where geocode like 'OC%' and attribute = 'climbing_no'");
        }
 catch (        final Exception e) {
          Log.e("Failed to upgrade to ver. 67",e);
        }
      }
      if (oldVersion < 68) {
        try {
          db.execSQL("alter table " + dbTableCaches + " add column logPasswordRequired integer default 0");
        }
 catch (        final Exception e) {
          Log.e("Failed to upgrade to ver. 68",e);
        }
      }
      if (oldVersion < 69) {
        try {
          db.execSQL("alter table " + dbTableLogImages + " add column description text");
        }
 catch (        final Exception e) {
          Log.e("Failed to upgrade to ver. 69",e);
        }
      }
      if (oldVersion < 70) {
        try {
          db.execSQL("alter table " + dbTableCaches + " add column watchlistCount integer default -1");
        }
 catch (        final Exception e) {
          Log.e("Failed to upgrade to ver. 69",e);
        }
      }
    }
    db.setTransactionSuccessful();
  }
  finally {
    db.endTransaction();
  }
  Log.i("Upgrade database from ver. " + oldVersion + " to ver. "+ newVersion+ ": completed");
}
