{
  Log.i("Upgrade database from ver. " + oldVersion + " to ver. "+ newVersion+ ": start");
  try {
    if (db.isReadOnly()) {
      return;
    }
    db.beginTransaction();
    if (oldVersion <= 0) {
      dropDatabase(db);
      onCreate(db);
      Log.i("Database structure created.");
    }
    if (oldVersion > 0) {
      db.execSQL("DELETE FROM " + dbTableCaches + " WHERE reason = 0");
      if (oldVersion < 52) {
        try {
          db.execSQL(dbCreateSearchDestinationHistory);
          Log.i("Added table " + dbTableSearchDestinationHistory + ".");
        }
 catch (        final Exception e) {
          Log.e("Failed to upgrade to ver. 52",e);
        }
      }
      if (oldVersion < 53) {
        try {
          db.execSQL("ALTER TABLE " + dbTableCaches + " ADD COLUMN onWatchlist INTEGER");
          Log.i("Column onWatchlist added to " + dbTableCaches + ".");
        }
 catch (        final Exception e) {
          Log.e("Failed to upgrade to ver. 53",e);
        }
      }
      if (oldVersion < 54) {
        try {
          db.execSQL(dbCreateLogImages);
        }
 catch (        final Exception e) {
          Log.e("Failed to upgrade to ver. 54",e);
        }
      }
      if (oldVersion < 55) {
        try {
          db.execSQL("ALTER TABLE " + dbTableCaches + " ADD COLUMN personal_note TEXT");
        }
 catch (        final Exception e) {
          Log.e("Failed to upgrade to ver. 55",e);
        }
      }
      if (oldVersion < 56) {
        try {
          db.execSQL("UPDATE " + dbTableAttributes + " SET attribute = "+ "LOWER(attribute) WHERE attribute LIKE \"%_yes\" "+ "OR  attribute LIKE \"%_no\"");
        }
 catch (        final Exception e) {
          Log.e("Failed to upgrade to ver. 56",e);
        }
      }
      if (oldVersion < 57) {
        try {
          db.execSQL("DROP INDEX in_a");
          db.execSQL("DROP INDEX in_b");
          db.execSQL("DROP INDEX in_c");
          db.execSQL("DROP INDEX in_d");
          db.execSQL("DROP INDEX in_e");
          db.execSQL("DROP INDEX in_f");
          createIndices(db);
        }
 catch (        final Exception e) {
          Log.e("Failed to upgrade to ver. 57",e);
        }
      }
      if (oldVersion < 58) {
        try {
          db.beginTransaction();
          final String dbTableCachesTemp=dbTableCaches + "_temp";
          final String dbCreateCachesTemp="" + "CREATE TABLE " + dbTableCachesTemp + " ("+ "_id INTEGER PRIMARY KEY AUTOINCREMENT, "+ "updated LONG NOT NULL, "+ "detailed INTEGER NOT NULL DEFAULT 0, "+ "detailedupdate LONG, "+ "visiteddate LONG, "+ "geocode TEXT UNIQUE NOT NULL, "+ "reason INTEGER NOT NULL DEFAULT 0, "+ "cacheid TEXT, "+ "guid TEXT, "+ "type TEXT, "+ "name TEXT, "+ "own INTEGER NOT NULL DEFAULT 0, "+ "owner TEXT, "+ "owner_real TEXT, "+ "hidden LONG, "+ "hint TEXT, "+ "size TEXT, "+ "difficulty FLOAT, "+ "terrain FLOAT, "+ "location TEXT, "+ "direction DOUBLE, "+ "distance DOUBLE, "+ "latitude DOUBLE, "+ "longitude DOUBLE, "+ "reliable_latlon INTEGER, "+ "personal_note TEXT, "+ "shortdesc TEXT, "+ "description TEXT, "+ "favourite_cnt INTEGER, "+ "rating FLOAT, "+ "votes INTEGER, "+ "myvote FLOAT, "+ "disabled INTEGER NOT NULL DEFAULT 0, "+ "archived INTEGER NOT NULL DEFAULT 0, "+ "members INTEGER NOT NULL DEFAULT 0, "+ "found INTEGER NOT NULL DEFAULT 0, "+ "favourite INTEGER NOT NULL DEFAULT 0, "+ "inventorycoins INTEGER DEFAULT 0, "+ "inventorytags INTEGER DEFAULT 0, "+ "inventoryunknown INTEGER DEFAULT 0, "+ "onWatchlist INTEGER DEFAULT 0 "+ "); ";
          db.execSQL(dbCreateCachesTemp);
          db.execSQL("INSERT INTO " + dbTableCachesTemp + " SELECT _id,updated,detailed,detailedupdate,visiteddate,geocode,reason,cacheid,guid,type,name,own,owner,owner_real,"+ "hidden,hint,size,difficulty,terrain,location,direction,distance,latitude,longitude, 0,"+ "personal_note,shortdesc,description,favourite_cnt,rating,votes,myvote,disabled,archived,members,found,favourite,inventorycoins,"+ "inventorytags,inventoryunknown,onWatchlist FROM "+ dbTableCaches);
          db.execSQL("DROP TABLE " + dbTableCaches);
          db.execSQL("ALTER TABLE " + dbTableCachesTemp + " RENAME TO "+ dbTableCaches);
          final String dbTableWaypointsTemp=dbTableWaypoints + "_temp";
          final String dbCreateWaypointsTemp="" + "CREATE TABLE " + dbTableWaypointsTemp + " ("+ "_id INTEGER PRIMARY KEY AUTOINCREMENT, "+ "geocode TEXT NOT NULL, "+ "updated LONG NOT NULL, "+ "type TEXT NOT NULL DEFAULT 'waypoint', "+ "prefix TEXT, "+ "lookup TEXT, "+ "name TEXT, "+ "latitude DOUBLE, "+ "longitude DOUBLE, "+ "note TEXT "+ "); ";
          db.execSQL(dbCreateWaypointsTemp);
          db.execSQL("INSERT INTO " + dbTableWaypointsTemp + " SELECT _id, geocode, updated, type, prefix, lookup, name, latitude, longitude, note FROM "+ dbTableWaypoints);
          db.execSQL("DROP TABLE " + dbTableWaypoints);
          db.execSQL("ALTER TABLE " + dbTableWaypointsTemp + " RENAME TO "+ dbTableWaypoints);
          createIndices(db);
          db.setTransactionSuccessful();
          Log.i("Removed latitude_string and longitude_string columns");
        }
 catch (        final Exception e) {
          Log.e("Failed to upgrade to ver. 58",e);
        }
 finally {
          db.endTransaction();
        }
      }
      if (oldVersion < 59) {
        try {
          createIndices(db);
          removeObsoleteCacheDirectories();
        }
 catch (        final Exception e) {
          Log.e("Failed to upgrade to ver. 59",e);
        }
      }
      if (oldVersion < 60) {
        try {
          removeSecEmptyDirs();
        }
 catch (        final Exception e) {
          Log.e("Failed to upgrade to ver. 60",e);
        }
      }
      if (oldVersion < 61) {
        try {
          db.execSQL("ALTER TABLE " + dbTableLogs + " ADD COLUMN friend INTEGER");
          db.execSQL("ALTER TABLE " + dbTableCaches + " ADD COLUMN coordsChanged INTEGER DEFAULT 0");
        }
 catch (        final Exception e) {
          Log.e("Failed to upgrade to ver. 61",e);
        }
      }
      if (oldVersion < 62) {
        try {
          db.execSQL("ALTER TABLE " + dbTableCaches + " ADD COLUMN finalDefined INTEGER DEFAULT 0");
          db.execSQL("ALTER TABLE " + dbTableWaypoints + " ADD COLUMN own INTEGER DEFAULT 0");
          db.execSQL("UPDATE " + dbTableWaypoints + " SET own = 1 WHERE type = 'own'");
        }
 catch (        final Exception e) {
          Log.e("Failed to upgrade to ver. 62",e);
        }
      }
      if (oldVersion < 63) {
        try {
          removeDoubleUnderscoreMapFiles();
        }
 catch (        final Exception e) {
          Log.e("Failed to upgrade to ver. 63",e);
        }
      }
      if (oldVersion < 64) {
        try {
          db.execSQL("UPDATE " + dbTableCaches + " SET reason=1 WHERE reason=2");
        }
 catch (        final Exception e) {
          Log.e("Failed to upgrade to ver. 64",e);
        }
      }
      if (oldVersion < 65) {
        try {
          db.execSQL("UPDATE " + dbTableWaypoints + " SET type='original', own=0 WHERE name='Original Coordinates'");
        }
 catch (        final Exception e) {
          Log.e("Failed to upgrade to ver. 65:",e);
        }
      }
      if (oldVersion < 66) {
        try {
          db.execSQL("ALTER TABLE " + dbTableWaypoints + " ADD COLUMN visited INTEGER DEFAULT 0");
        }
 catch (        final Exception e) {
          Log.e("Failed to upgrade to ver. 66",e);
        }
      }
      if (oldVersion < 67) {
        try {
          db.execSQL("UPDATE " + dbTableAttributes + " SET attribute = 'easy_climbing_yes' WHERE geocode LIKE 'OC%' AND attribute = 'climbing_yes'");
          db.execSQL("UPDATE " + dbTableAttributes + " SET attribute = 'easy_climbing_no' WHERE geocode LIKE 'OC%' AND attribute = 'climbing_no'");
        }
 catch (        final Exception e) {
          Log.e("Failed to upgrade to ver. 67",e);
        }
      }
      if (oldVersion < 68) {
        try {
          db.execSQL("ALTER TABLE " + dbTableCaches + " ADD COLUMN logPasswordRequired INTEGER DEFAULT 0");
        }
 catch (        final Exception e) {
          Log.e("Failed to upgrade to ver. 68",e);
        }
      }
      if (oldVersion < 69) {
        try {
          db.execSQL("ALTER TABLE " + dbTableLogImages + " ADD COLUMN description TEXT");
        }
 catch (        final Exception e) {
          Log.e("Failed to upgrade to ver. 69",e);
        }
      }
      if (oldVersion < 70) {
        try {
          db.execSQL("ALTER TABLE " + dbTableCaches + " ADD COLUMN watchlistCount INTEGER DEFAULT -1");
        }
 catch (        final Exception e) {
          Log.e("Failed to upgrade to ver. 70",e);
        }
      }
      if (oldVersion < 71) {
        try {
          db.execSQL(dbCreateCachesLists);
          createIndices(db);
          db.execSQL("INSERT INTO " + dbTableCachesLists + " SELECT reason, geocode FROM "+ dbTableCaches);
        }
 catch (        final Exception e) {
          Log.e("Failed to upgrade to ver. 71",e);
        }
      }
    }
    db.setTransactionSuccessful();
  }
  finally {
    db.endTransaction();
  }
  Log.i("Upgrade database from ver. " + oldVersion + " to ver. "+ newVersion+ ": completed");
}
