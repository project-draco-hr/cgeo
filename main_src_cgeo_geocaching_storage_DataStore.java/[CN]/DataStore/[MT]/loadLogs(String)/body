{
  final List<LogEntry> logs=new ArrayList<>();
  if (StringUtils.isBlank(geocode)) {
    return logs;
  }
  init();
  final Cursor cursor=database.rawQuery("SELECT cg_logs._id as cg_logs_id, type, author, log, date, found, friend, " + dbTableLogImages + "._id as cg_logImages_id, log_id, title, url, description"+ " FROM "+ dbTableLogs+ " LEFT OUTER JOIN "+ dbTableLogImages+ " ON ( cg_logs._id = log_id ) WHERE geocode = ?  ORDER BY date desc, cg_logs._id asc",new String[]{geocode});
  LogEntry.Builder log=null;
  while (cursor.moveToNext() && logs.size() < 100) {
    if (log == null || log.getId() != cursor.getInt(0)) {
      if (log != null) {
        logs.add(log.build());
      }
      log=new LogEntry.Builder().setAuthor(cursor.getString(2)).setDate(cursor.getLong(4)).setLogType(LogType.getById(cursor.getInt(1))).setLog(cursor.getString(3)).setId(cursor.getInt(0)).setFound(cursor.getInt(5)).setFriend(cursor.getInt(6) == 1);
      if (!cursor.isNull(7)) {
        log.addLogImage(new Image.Builder().setUrl(cursor.getString(10)).setTitle(cursor.getString(9)).setDescription(cursor.getString(11)).build());
      }
    }
 else {
      assert(!cursor.isNull(7));
      log.addLogImage(new Image.Builder().setUrl(cursor.getString(10)).setTitle(cursor.getString(9)).setDescription(cursor.getString(11)).build());
    }
  }
  if (log != null) {
    logs.add(log.build());
  }
  cursor.close();
  return Collections.unmodifiableList(logs);
}
