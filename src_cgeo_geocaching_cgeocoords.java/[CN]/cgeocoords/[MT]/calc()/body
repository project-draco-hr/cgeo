{
  if (currentFormat == formatPlain)   return;
  int latDeg=0, latMin=0, latSec=0, latSub=0;
  int lonDeg=0, lonMin=0, lonSec=0, lonSub=0;
  try {
    latDeg=Integer.parseInt(eLatDeg.getText().toString());
    lonDeg=Integer.parseInt(eLonDeg.getText().toString());
    latMin=Integer.parseInt(eLatMin.getText().toString());
    lonMin=Integer.parseInt(eLonMin.getText().toString());
    latSec=Integer.parseInt(eLatSec.getText().toString());
    lonSec=Integer.parseInt(eLonSec.getText().toString());
    latSub=Integer.parseInt(eLatSub.getText().toString());
    lonSub=Integer.parseInt(eLonSub.getText().toString());
  }
 catch (  NumberFormatException e) {
  }
switch (currentFormat) {
case formatDeg:
    Double latDegFrac=latMin * 1.0;
  while (latDegFrac > 1)   latDegFrac/=10;
Double lonDegFrac=lonMin * 1.0;
while (lonDegFrac > 1) lonDegFrac/=10;
latitude=latDeg + latDegFrac;
longitude=lonDeg + lonDegFrac;
break;
case formatMin:
Double latMinFrac=latSec * 1.0;
while (latMinFrac > 1) latMinFrac/=10;
Double lonMinFrac=lonSec * 1.0;
while (lonMinFrac > 1) lonMinFrac/=10;
latitude=latDeg + latMin / 60.0 + latMinFrac / 60.0;
longitude=lonDeg + lonMin / 60.0 + lonMinFrac / 60.0;
break;
case formatSec:
Double latSecFrac=latSub * 1.0;
while (latSecFrac > 1) latSecFrac/=10;
Double lonSecFrac=lonSub * 1.0;
while (lonSecFrac > 1) lonSecFrac/=10;
latitude=latDeg + latMin / 60.0 + latSec / 60.0 / 60.0 + latSecFrac / 60.0 / 60.0;
longitude=lonDeg + lonMin / 60.0 + lonSec / 60.0 / 60.0 + lonSecFrac / 60.0 / 60.0;
break;
}
latitude*=(bLat.getText().toString() == "S" ? -1 : 1);
longitude*=(bLon.getText().toString() == "W" ? -1 : 1);
}
