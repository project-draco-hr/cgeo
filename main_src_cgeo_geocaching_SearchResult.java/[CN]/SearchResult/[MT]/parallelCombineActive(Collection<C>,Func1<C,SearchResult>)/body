{
  return Observable.from(connectors).parallel(new Func1<Observable<C>,Observable<SearchResult>>(){
    @Override public Observable<SearchResult> call(    final Observable<C> cObservable){
      return cObservable.flatMap(new Func1<C,Observable<? extends SearchResult>>(){
        @Override public Observable<? extends SearchResult> call(        final C c){
          return c.isActive() ? Observable.from(func.call(c)) : Observable.<SearchResult>empty();
        }
      }
);
    }
  }
,Schedulers.io()).reduce(new SearchResult(),new Func2<SearchResult,SearchResult,SearchResult>(){
    @Override public SearchResult call(    final SearchResult searchResult,    final SearchResult searchResult2){
      searchResult.addSearchResult(searchResult2);
      return searchResult;
    }
  }
).toBlocking().first();
}
