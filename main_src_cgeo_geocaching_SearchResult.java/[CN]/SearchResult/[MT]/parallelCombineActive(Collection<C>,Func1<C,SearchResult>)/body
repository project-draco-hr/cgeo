{
  return Observable.from(connectors).flatMap(new Func1<C,Observable<SearchResult>>(){
    @Override public Observable<SearchResult> call(    final C connector){
      if (!connector.isActive()) {
        return Observable.empty();
      }
      return Observable.defer(new Func0<Observable<SearchResult>>(){
        @Override public Observable<SearchResult> call(){
          return Observable.just(func.call(connector));
        }
      }
).subscribeOn(AndroidRxUtils.networkScheduler);
    }
  }
).reduce(new SearchResult(),new Func2<SearchResult,SearchResult,SearchResult>(){
    @Override public SearchResult call(    final SearchResult searchResult,    final SearchResult searchResult2){
      searchResult.addSearchResult(searchResult2);
      return searchResult;
    }
  }
).toBlocking().first();
}
