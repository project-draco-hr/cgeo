{
  final cgCache cache=new cgCache();
  try {
    cache.setGeocode(response.getString(CACHE_CODE));
    cache.setName(response.getString(CACHE_NAME));
    setLocation(cache,response.getString(CACHE_LOCATION));
    cache.setCacheType(CacheType.getById(getCacheType(response.getString(CACHE_TYPE))));
    final String status=response.getString(CACHE_STATUS);
    cache.setDisabled(status.equalsIgnoreCase("Temporarily unavailable"));
    cache.setArchived(status.equalsIgnoreCase("Archived"));
    final JSONObject owner=response.getJSONObject(CACHE_OWNER);
    cache.setOwner(parseUser(owner));
    cache.getLogCounts().put(cgBase.LOG_FOUND_IT,response.getInt(CACHE_FOUNDS));
    cache.getLogCounts().put(cgBase.LOG_DIDNT_FIND_IT,response.getInt(CACHE_NOTFOUNDS));
    cache.setSize(getCacheSize(response));
    cache.setDifficulty((float)response.getDouble(CACHE_DIFFICULTY));
    cache.setTerrain((float)response.getDouble(CACHE_TERRAIN));
    if (response.has(CACHE_RATING) && !isNull(response.getString(CACHE_RATING))) {
      cache.setRating((float)response.getDouble(CACHE_RATING));
    }
    cache.setVotes(response.getInt(CACHE_VOTES));
    cache.setFavouriteCnt(response.getInt(CACHE_RECOMMENDATIONS));
    cache.setDescription(response.getString(CACHE_DESCRIPTION));
    cache.setHint(Html.fromHtml(response.getString(CACHE_HINT)).toString());
    final JSONArray images=response.getJSONArray(CACHE_IMAGES);
    if (images != null) {
      JSONObject imageResponse;
      cgImage image;
      for (int i=0; i < images.length(); i++) {
        imageResponse=images.getJSONObject(i);
        if (imageResponse.getBoolean(CACHE_IMAGE_IS_SPOILER)) {
          image=new cgImage();
          image.title=imageResponse.getString(CACHE_IMAGE_CAPTION);
          image.url=absoluteUrl(imageResponse.getString(CACHE_IMAGE_URL),cache.getGeocode());
          if (cache.getSpoilers() == null) {
            cache.setSpoilers(new ArrayList<cgImage>());
          }
          cache.getSpoilers().add(image);
        }
      }
    }
    cache.setLogs(parseLogs(response.getJSONArray(CACHE_LATEST_LOGS)));
    cache.setHidden(parseDate(response.getString(CACHE_HIDDEN)));
  }
 catch (  JSONException e) {
    e.printStackTrace();
  }
  return cache;
}
