{
  final LocationManager geoManager=(LocationManager)context.getSystemService(Context.LOCATION_SERVICE);
  final AtomicReference<Location> latestGPSLocation=new AtomicReference<>(null);
  final Observable<GeoData> observable=Observable.create(new OnSubscribe<GeoData>(){
    @Override public void call(    final Subscriber<? super GeoData> subscriber){
      final Listener networkListener=new Listener(subscriber,latestGPSLocation);
      final Listener gpsListener=new Listener(subscriber,latestGPSLocation);
      final GeoData initialLocation=GeoData.getInitialLocation(context);
      if (initialLocation != null) {
        subscriber.onNext(initialLocation);
      }
      Log.d("GeoDataProvider: starting the GPS and network listeners");
      try {
        geoManager.requestLocationUpdates(LocationManager.GPS_PROVIDER,0,0,gpsListener);
      }
 catch (      final Exception e) {
        Log.w("Unable to create GPS location provider: " + e.getMessage());
      }
      try {
        geoManager.requestLocationUpdates(LocationManager.NETWORK_PROVIDER,0,0,networkListener);
      }
 catch (      final Exception e) {
        Log.w("Unable to create network location provider: " + e.getMessage());
      }
      subscriber.add(Subscriptions.create(new Action0(){
        @Override public void call(){
          AndroidRxUtils.looperCallbacksWorker.schedule(new Action0(){
            @Override public void call(){
              geoManager.removeUpdates(networkListener);
              geoManager.removeUpdates(gpsListener);
            }
          }
);
        }
      }
));
    }
  }
);
  return observable.subscribeOn(AndroidRxUtils.looperCallbacksScheduler).share().lift(new DelayedUnsubscription<GeoData>(2500,TimeUnit.MILLISECONDS)).onBackpressureLatest();
}
