{
  final List<Pair<Float,Geocache>> sorted=getDistanceSortedCaches(list);
  final HashSet<Geocache> filtered=new HashSet<>();
  for (int i=0; i < sorted.size(); i++) {
    final Geocache current=sorted.get(i).second;
    for (int j=i + 1; j < sorted.size(); j++) {
      final Geocache next=sorted.get(j).second;
      if (current.getCoords().distanceTo(next) < MAX_DISTANCE_KILOMETERS && haveSimilarNames(current,next)) {
        if (ConnectorFactory.getConnector(current) != ConnectorFactory.getConnector(next) && current.isFound() != next.isFound()) {
          filtered.add(current);
          filtered.add(next);
        }
      }
 else {
        break;
      }
    }
  }
  list.retainAll(filtered);
}
