{
  if (other == null) {
    return false;
  }
  updated=System.currentTimeMillis();
  if (!detailed && (other.detailed || zoomlevel < other.zoomlevel)) {
    detailed=other.detailed;
    detailedUpdate=other.detailedUpdate;
    coords=other.coords;
    cacheType=other.cacheType;
    zoomlevel=other.zoomlevel;
    if (other.premiumMembersOnly != null) {
      premiumMembersOnly=other.premiumMembersOnly;
    }
    reliableLatLon=other.reliableLatLon;
    if (other.found != null) {
      found=other.found;
    }
    if (other.disabled != null) {
      disabled=other.disabled;
    }
    if (other.favorite != null) {
      favorite=other.favorite;
    }
    if (other.archived != null) {
      archived=other.archived;
    }
    if (other.onWatchlist != null) {
      onWatchlist=other.onWatchlist;
    }
    logOffline=other.logOffline;
    finalDefined=other.finalDefined;
  }
  if (visitedDate == 0) {
    visitedDate=other.visitedDate;
  }
  if (listId == StoredList.TEMPORARY_LIST_ID) {
    listId=other.listId;
  }
  if (StringUtils.isBlank(geocode)) {
    geocode=other.geocode;
  }
  if (StringUtils.isBlank(cacheId)) {
    cacheId=other.cacheId;
  }
  if (StringUtils.isBlank(guid)) {
    guid=other.guid;
  }
  if (null == cacheType || CacheType.UNKNOWN == cacheType) {
    cacheType=other.cacheType;
  }
  if (StringUtils.isBlank(name)) {
    name=other.name;
  }
  if (StringUtils.isBlank(ownerDisplayName)) {
    ownerDisplayName=other.ownerDisplayName;
  }
  if (StringUtils.isBlank(ownerUserId)) {
    ownerUserId=other.ownerUserId;
  }
  if (hidden == null) {
    hidden=other.hidden;
  }
  if (StringUtils.isBlank(getHint())) {
    hint=other.getHint();
  }
  if (size == null || CacheSize.UNKNOWN == size) {
    size=other.size;
  }
  if (difficulty == 0) {
    difficulty=other.difficulty;
  }
  if (terrain == 0) {
    terrain=other.terrain;
  }
  if (direction == null) {
    direction=other.direction;
  }
  if (distance == null) {
    distance=other.distance;
  }
  if (StringUtils.isBlank(getLocation())) {
    location=other.getLocation();
  }
  if (coords == null) {
    coords=other.coords;
  }
  if (personalNote == null) {
    personalNote=other.personalNote;
  }
 else   if (other.personalNote != null && !personalNote.equals(other.personalNote)) {
    final PersonalNote myNote=new PersonalNote(this);
    final PersonalNote otherNote=new PersonalNote(other);
    final PersonalNote mergedNote=myNote.mergeWith(otherNote);
    personalNote=mergedNote.toString();
  }
  if (StringUtils.isBlank(getShortDescription())) {
    shortdesc=other.getShortDescription();
  }
  if (StringUtils.isBlank(getDescription())) {
    description=other.getDescription();
  }
  if (favoritePoints == 0) {
    favoritePoints=other.favoritePoints;
  }
  if (rating == 0) {
    rating=other.rating;
  }
  if (votes == 0) {
    votes=other.votes;
  }
  if (myVote == 0) {
    myVote=other.myVote;
  }
  if (attributes.isEmpty()) {
    attributes.clear();
    if (other.attributes != null) {
      attributes.addAll(other.attributes);
    }
  }
  if (waypoints.isEmpty()) {
    this.setWaypoints(other.waypoints,false);
  }
 else {
    final ArrayList<Waypoint> newPoints=new ArrayList<Waypoint>(waypoints);
    Waypoint.mergeWayPoints(newPoints,other.waypoints,false);
    this.setWaypoints(newPoints,false);
  }
  if (spoilers == null) {
    spoilers=other.spoilers;
  }
  if (inventory == null) {
    inventory=other.inventory;
    inventoryItems=other.inventoryItems;
  }
  if (logs.isEmpty()) {
    logs.clear();
    if (other.logs != null) {
      logs.addAll(other.logs);
    }
  }
  if (logCounts.isEmpty()) {
    logCounts=other.logCounts;
  }
  userModifiedCoords=false;
  for (  final Waypoint wpt : waypoints) {
    if (wpt.getWaypointType() == WaypointType.ORIGINAL) {
      userModifiedCoords=true;
      break;
    }
  }
  if (!reliableLatLon) {
    reliableLatLon=other.reliableLatLon;
  }
  if (zoomlevel == -1) {
    zoomlevel=other.zoomlevel;
  }
  return isEqualTo(other);
}
