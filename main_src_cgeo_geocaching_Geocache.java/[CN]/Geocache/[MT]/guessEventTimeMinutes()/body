{
  if (!isEventCache()) {
    return null;
  }
  final Pattern time=Pattern.compile("\\b(\\d{1,2})\\:(\\d\\d)\\b");
  final MatcherWrapper matcher=new MatcherWrapper(time,getDescription());
  while (matcher.find()) {
    try {
      final int hours=Integer.valueOf(matcher.group(1));
      final int minutes=Integer.valueOf(matcher.group(2));
      if (hours >= 0 && hours < 24 && minutes >= 0 && minutes < 60) {
        return String.valueOf(hours * 60 + minutes);
      }
    }
 catch (    NumberFormatException e) {
    }
  }
  final String hourLocalized=cgeoapplication.getInstance().getString(R.string.cache_time_full_hours);
  if (StringUtils.isNotBlank(hourLocalized)) {
    final Pattern fullHours=Pattern.compile("\\b(\\d{1,2})\\s+" + Pattern.quote(hourLocalized),Pattern.CASE_INSENSITIVE);
    final MatcherWrapper matcherHours=new MatcherWrapper(fullHours,getDescription());
    if (matcherHours.find()) {
      try {
        final int hours=Integer.valueOf(matcherHours.group(1));
        if (hours >= 0 && hours < 24) {
          return String.valueOf(hours * 60);
        }
      }
 catch (      NumberFormatException e) {
      }
    }
  }
  return null;
}
