{
  final LeastRecentlyUsedMap<String,cgCache> cache=new LeastRecentlyUsedMap.LruCache<String,cgCache>(10);
  final cgCache first=new cgCache();
  assertNull(cache.put("1",first));
  final cgCache second=new cgCache();
  assertNull(cache.put("2",second));
  assertEquals(2,cache.size());
  assertTrue(cache.containsKey("1"));
  assertTrue(cache.containsValue(first));
  assertTrue(cache.containsKey("2"));
  assertTrue(cache.containsValue(second));
  for (int i=3; i <= 10; i++) {
    assertNull(cache.put(Integer.toString(i),new cgCache()));
  }
  assertEquals(10,cache.size());
  assertTrue(cache.containsKey("1"));
  assertTrue(cache.containsValue(first));
  assertTrue(cache.containsKey("2"));
  assertTrue(cache.containsValue(second));
  assertNotNull(cache.remove("1"));
  assertNull(cache.put("1",new cgCache()));
  assertNull(cache.put("11",new cgCache()));
  assertEquals(10,cache.size());
  assertTrue(cache.containsKey("1"));
  assertFalse(cache.containsKey("2"));
  assertTrue(cache.containsKey("11"));
}
