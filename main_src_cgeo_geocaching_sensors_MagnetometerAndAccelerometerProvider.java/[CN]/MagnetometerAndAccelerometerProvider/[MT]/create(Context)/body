{
  final SensorManager sensorManager=(SensorManager)context.getSystemService(Context.SENSOR_SERVICE);
  final Sensor accelerometerSensor=sensorManager.getDefaultSensor(Sensor.TYPE_ACCELEROMETER);
  final Sensor magnetometerSensor=sensorManager.getDefaultSensor(Sensor.TYPE_MAGNETIC_FIELD);
  if (magnetometerSensor == null || accelerometerSensor == null) {
    return Observable.error(new RuntimeException("no magenetic or accelerometer sensor"));
  }
  Log.d("MagnetometerAndAccelerometerProvider: sensors found");
  final Observable<Float> observable=Observable.create(new OnSubscribe<Float>(){
    private final float[] lastAccelerometer=new float[3];
    private final float[] lastMagnetometer=new float[3];
    private boolean lastAccelerometerSet=false;
    private boolean lastMagnetometerSet=false;
    private final float[] rotateMatrix=new float[9];
    private final float[] orientation=new float[3];
    @Override public void call(    final Subscriber<? super Float> subscriber){
      final SensorEventListener listener=new SensorEventListener(){
        @Override public void onSensorChanged(        final SensorEvent sensorEvent){
          if (sensorEvent.sensor.equals(accelerometerSensor)) {
            System.arraycopy(sensorEvent.values,0,lastAccelerometer,0,sensorEvent.values.length);
            lastAccelerometerSet=true;
          }
 else           if (sensorEvent.sensor.equals(magnetometerSensor)) {
            System.arraycopy(sensorEvent.values,0,lastMagnetometer,0,sensorEvent.values.length);
            lastMagnetometerSet=true;
          }
          if (lastAccelerometerSet && lastMagnetometerSet) {
            SensorManager.getRotationMatrix(rotateMatrix,null,lastAccelerometer,lastMagnetometer);
            SensorManager.getOrientation(rotateMatrix,orientation);
            subscriber.onNext((float)(orientation[0] * 180 / Math.PI));
          }
        }
        @Override public void onAccuracyChanged(        final Sensor sensor,        final int i){
        }
      }
;
      Log.d("MagnetometerAndAccelerometerProvider: registering listener");
      sensorManager.registerListener(listener,accelerometerSensor,SensorManager.SENSOR_DELAY_NORMAL);
      sensorManager.registerListener(listener,magnetometerSensor,SensorManager.SENSOR_DELAY_NORMAL);
      subscriber.add(Subscriptions.create(new Action0(){
        @Override public void call(){
          RxUtils.looperCallbacksWorker.schedule(new Action0(){
            @Override public void call(){
              Log.d("MagnetometerAndAccelerometerProvider: unregistering listener");
              sensorManager.unregisterListener(listener,accelerometerSensor);
              sensorManager.unregisterListener(listener,magnetometerSensor);
            }
          }
);
        }
      }
));
    }
  }
);
  return observable.subscribeOn(RxUtils.looperCallbacksScheduler).share().onBackpressureLatest();
}
