{
  register(R.string.caches_sort_distance,null);
  register(R.string.caches_sort_date_hidden,DateComparator.class);
  register(R.string.caches_sort_difficulty,DifficultyComparator.class);
  register(R.string.caches_sort_finds,FindsComparator.class);
  register(R.string.caches_sort_geocode,GeocodeComparator.class);
  register(R.string.caches_sort_inventory,InventoryComparator.class);
  register(R.string.caches_sort_name,NameComparator.class);
  register(R.string.caches_sort_favorites,PopularityComparator.class);
  register(R.string.caches_sort_favorites_ratio,PopularityRatioComparator.class);
  register(R.string.caches_sort_rating,RatingComparator.class);
  register(R.string.caches_sort_size,SizeComparator.class);
  register(R.string.caches_sort_state,StateComparator.class);
  register(R.string.caches_sort_storage,StorageTimeComparator.class);
  register(R.string.caches_sort_terrain,TerrainComparator.class);
  register(R.string.caches_sort_date_logged,VisitComparator.class);
  register(R.string.caches_sort_vote,VoteComparator.class);
  Collections.sort(registry,new Comparator<ComparatorEntry>(){
    @Override public int compare(    final ComparatorEntry lhs,    final ComparatorEntry rhs){
      return lhs.name.compareToIgnoreCase(rhs.name);
    }
  }
);
}
