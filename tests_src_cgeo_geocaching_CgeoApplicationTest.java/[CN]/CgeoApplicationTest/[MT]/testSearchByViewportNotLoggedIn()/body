{
  withMockedLoginDo(new Runnable(){
    public void run(){
      final Strategy strategy=Settings.getLiveMapStrategy();
      final Strategy testStrategy=Strategy.FAST;
      Settings.setLiveMapStrategy(testStrategy);
      final CacheType cacheType=Settings.getCacheType();
      try {
        MockedCache cache=new GC2CJPF();
        deleteCacheFromDBAndLogout(cache.getGeocode());
        Tile.cache.removeFromTileCache(cache);
        Settings.setCacheType(CacheType.ALL);
        Viewport viewport=new Viewport(cache,0.003,0.003);
        SearchResult search=ConnectorFactory.searchByViewport(viewport,INVALID_TOKEN);
        assertThat(search).isNotNull();
        assertThat(search.getGeocodes().contains(cache.getGeocode())).isTrue();
        final Geocache cacheFromViewport=DataStore.loadCache(cache.getGeocode(),LoadFlags.LOAD_CACHE_OR_DB);
        Log.d("cgeoApplicationTest.testSearchByViewportNotLoggedIn: Coords expected = " + cache.getCoords());
        Log.d("cgeoApplicationTest.testSearchByViewportNotLoggedIn: Coords actual = " + cacheFromViewport.getCoords());
        assertThat(cache.getCoords().distanceTo(cacheFromViewport.getCoords()) <= 1e-3).isFalse();
        assertThat(cacheFromViewport.isReliableLatLon()).isEqualTo(testStrategy == Strategy.DETAILED);
        cache=new GC2JVEH();
        deleteCacheFromDBAndLogout(cache.getGeocode());
        viewport=new Viewport(cache,0.003,0.003);
        search=ConnectorFactory.searchByViewport(viewport,INVALID_TOKEN);
        assertThat(search).isNotNull();
        assertThat(search.getGeocodes().contains(cache.getGeocode())).isTrue();
      }
  finally {
        Settings.setLiveMapStrategy(strategy);
        Settings.setCacheType(cacheType);
      }
    }
  }
);
}
