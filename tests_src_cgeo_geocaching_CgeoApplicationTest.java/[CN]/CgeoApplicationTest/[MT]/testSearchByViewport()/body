{
  withMockedFilters(new Runnable(){
    @Override public void run(){
      final Strategy strategy=Settings.getLiveMapStrategy();
      final CacheType cacheType=Settings.getCacheType();
      try {
        TestSettings.setExcludeMine(false);
        Settings.setCacheType(CacheType.ALL);
        final GC2CJPF mockedCache=new GC2CJPF();
        deleteCacheFromDB(mockedCache.getGeocode());
        final MapTokens tokens=GCLogin.getMapTokens();
        final Viewport viewport=new Viewport(mockedCache,0.003,0.003);
        Settings.setLiveMapStrategy(Strategy.DETAILED);
        SearchResult search=ConnectorFactory.searchByViewport(viewport,tokens);
        assertNotNull(search);
        assertTrue(search.getGeocodes().contains(mockedCache.getGeocode()));
        Geocache parsedCache=DataStore.loadCache(mockedCache.getGeocode(),LoadFlags.LOAD_CACHE_OR_DB);
        assertEquals(Settings.isPremiumMember(),mockedCache.getCoords().equals(parsedCache.getCoords()));
        assertEquals(Settings.isPremiumMember(),parsedCache.isReliableLatLon());
        Settings.setLiveMapStrategy(Strategy.FAST);
        Tile.Cache.removeFromTileCache(mockedCache);
        search=ConnectorFactory.searchByViewport(viewport,tokens);
        assertNotNull(search);
        assertTrue(search.getGeocodes().contains(mockedCache.getGeocode()));
        parsedCache=DataStore.loadCache(mockedCache.getGeocode(),LoadFlags.LOAD_CACHE_OR_DB);
        assertEquals(Settings.isPremiumMember(),mockedCache.getCoords().equals(parsedCache.getCoords()));
        assertEquals(Settings.isPremiumMember(),parsedCache.isReliableLatLon());
      }
  finally {
        Settings.setLiveMapStrategy(strategy);
        Settings.setCacheType(cacheType);
      }
    }
  }
);
}
