{
  final SensorManager sensorManager=(SensorManager)context.getSystemService(Context.SENSOR_SERVICE);
  final Sensor rotationSensor=sensorManager.getDefaultSensor(Sensor.TYPE_ROTATION_VECTOR);
  if (rotationSensor == null) {
    Log.w("RotationProvider: no rotation sensor on this device");
    return Observable.error(new RuntimeException("no rotation sensor"));
  }
  final Observable<Float> observable=Observable.create(new OnSubscribe<Float>(){
    @Override public void call(    final Subscriber<? super Float> subscriber){
      final SensorEventListener listener=new SensorEventListener(){
        private final float[] rotationMatrix=new float[16];
        private final float[] orientation=new float[4];
        private final float[] values=new float[4];
        @Override public void onSensorChanged(        final SensorEvent event){
          if (isTruncationNeeded) {
            System.arraycopy(event.values,0,values,0,4);
            SensorManager.getRotationMatrixFromVector(rotationMatrix,values);
          }
 else {
            try {
              SensorManager.getRotationMatrixFromVector(rotationMatrix,event.values);
            }
 catch (            final IllegalArgumentException ignored) {
              Log.d("installing workaround for mismatched number of values in rotation vector");
              isTruncationNeeded=true;
              onSensorChanged(event);
              return;
            }
          }
          SensorManager.getOrientation(rotationMatrix,orientation);
          subscriber.onNext((float)(orientation[0] * 180 / Math.PI));
        }
        @Override public void onAccuracyChanged(        final Sensor sensor,        final int accuracy){
        }
      }
;
      Log.d("RotationProvider: registering listener");
      sensorManager.registerListener(listener,rotationSensor,SensorManager.SENSOR_DELAY_NORMAL);
      subscriber.add(Subscriptions.create(new Action0(){
        @Override public void call(){
          AndroidRxUtils.looperCallbacksWorker.schedule(new Action0(){
            @Override public void call(){
              Log.d("RotationProvider: unregistering listener");
              sensorManager.unregisterListener(listener,rotationSensor);
            }
          }
);
        }
      }
));
    }
  }
);
  return observable.subscribeOn(AndroidRxUtils.looperCallbacksScheduler).share().onBackpressureLatest();
}
