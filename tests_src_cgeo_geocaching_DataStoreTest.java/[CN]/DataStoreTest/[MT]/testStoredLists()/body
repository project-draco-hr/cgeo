{
  int listId1=StoredList.STANDARD_LIST_ID;
  int listId2=StoredList.STANDARD_LIST_ID;
  final Geocache cache1=new Geocache();
  cache1.setGeocode("Cache 1");
  final Geocache cache2=new Geocache();
  cache2.setGeocode("Cache 2");
  assertThat(cache2).isNotNull();
  try {
    listId1=DataStore.createList("DataStore Test");
    assertThat(listId1 > StoredList.STANDARD_LIST_ID).isTrue();
    listId2=DataStore.createList("DataStoreTest");
    assertThat(listId2 > StoredList.STANDARD_LIST_ID).isTrue();
    assertThat(DataStore.getLists().size() >= 2).isTrue();
    cache1.setDetailed(true);
    cache1.setListId(listId1);
    cache2.setDetailed(true);
    cache2.setListId(listId1);
    DataStore.saveCache(cache1,LoadFlags.SAVE_ALL);
    DataStore.saveCache(cache2,LoadFlags.SAVE_ALL);
    assertThat(DataStore.getAllCachesCount() >= 2).isTrue();
    assertEquals(1,DataStore.renameList(listId1,"DataStore Test (renamed)"));
    final StoredList list1=DataStore.getList(listId1);
    assertThat(list1).isNotNull();
    assertThat(list1.title).isEqualTo("DataStore Test (renamed)");
    DataStore.moveToList(Collections.singletonList(cache1),listId2);
    assertEquals(1,DataStore.getAllStoredCachesCount(CacheType.ALL,listId2));
    assertThat(DataStore.removeList(listId1)).isTrue();
    DataStore.markDropped(Collections.singletonList(cache2));
    DataStore.moveToList(Collections.singletonList(cache2),listId2);
    assertEquals(2,DataStore.getAllStoredCachesCount(CacheType.ALL,listId2));
    DataStore.removeList(listId2);
  }
  finally {
    final Set<String> geocodes=new HashSet<String>();
    geocodes.add(cache1.getGeocode());
    geocodes.add(cache2.getGeocode());
    DataStore.removeCaches(geocodes,LoadFlags.REMOVE_ALL);
    DataStore.removeList(listId1);
    DataStore.removeList(listId2);
  }
}
