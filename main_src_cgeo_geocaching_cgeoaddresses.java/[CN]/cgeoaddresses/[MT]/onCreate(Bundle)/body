{
  super.onCreate(savedInstanceState);
  inflater=getLayoutInflater();
  setTheme();
  setContentView(R.layout.addresses);
  setTitle(res.getString(R.string.search_address_result));
  Bundle extras=getIntent().getExtras();
  if (extras != null) {
    keyword=extras.getString("keyword");
  }
  if (keyword == null) {
    showToast(res.getString(R.string.err_search_address_forgot));
    finish();
    return;
  }
  waitDialog=ProgressDialog.show(this,res.getString(R.string.search_address_started),keyword,true);
  waitDialog.setCancelable(true);
  new AsyncTask<Void,Void,List<Address>>(){
    @Override protected List<Address> doInBackground(    Void... params){
      final Geocoder geocoder=new Geocoder(cgeoaddresses.this,Locale.getDefault());
      try {
        return geocoder.getFromLocationName(keyword,20);
      }
 catch (      Exception e) {
        Log.e(Settings.tag,"cgeoaddresses.doInBackground",e);
        return null;
      }
    }
    @Override protected void onPostExecute(    final List<Address> addresses){
      waitDialog.dismiss();
      try {
        if (addList == null) {
          addList=(LinearLayout)findViewById(R.id.address_list);
        }
        if (CollectionUtils.isEmpty(addresses)) {
          showToast(res.getString(R.string.err_search_address_no_match));
          finish();
          return;
        }
 else {
          LinearLayout oneAddPre=null;
          final Geopoint lastLoc=cgeoapplication.getInstance().getLastCoords();
          for (          Address address : addresses) {
            oneAddPre=(LinearLayout)inflater.inflate(R.layout.address_button,null);
            Button oneAdd=(Button)oneAddPre.findViewById(R.id.button);
            final int maxIndex=address.getMaxAddressLineIndex();
            final ArrayList<String> lines=new ArrayList<String>();
            for (int i=0; i <= maxIndex; i++) {
              String line=address.getAddressLine(i);
              if (StringUtils.isNotBlank(line)) {
                lines.add(line);
              }
            }
            final String listTitle=StringUtils.join(lines,"; ");
            if (lastLoc != null) {
              if (address.hasLatitude() && address.hasLongitude()) {
                lines.add(cgBase.getHumanDistance(lastLoc.distanceTo(new Geopoint(address.getLatitude(),address.getLongitude()))));
              }
            }
            oneAdd.setText(StringUtils.join(lines,"\n"));
            oneAdd.setLines(lines.size());
            oneAdd.setClickable(true);
            oneAdd.setOnClickListener(new buttonListener(address.getLatitude(),address.getLongitude(),listTitle));
            addList.addView(oneAddPre);
          }
        }
      }
 catch (      Exception e) {
        Log.e(Settings.tag,"cgeoaddresses.onPostExecute",e);
      }
    }
  }
.execute();
}
