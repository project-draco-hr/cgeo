{
  init();
  if ((geocodes != null && geocodes.length > 0) && centerLat != null && centerLon != null && spanLat != null && spanLon != null) {
    throw new IllegalArgumentException("Please use only one parameter");
  }
  StringBuilder where=new StringBuilder();
  Cursor cursor=null;
  List<cgCache> caches=new ArrayList<cgCache>();
  try {
    if (geocodes != null && geocodes.length > 0) {
      StringBuilder all=new StringBuilder();
      for (      Object one : geocodes) {
        if (all.length() > 0) {
          all.append(", ");
        }
        all.append('"');
        all.append((String)one);
        all.append('"');
      }
      if (where.length() > 0) {
        where.append(" and ");
      }
      where.append("geocode in (");
      where.append(all);
      where.append(')');
    }
 else {
      return caches;
    }
    if (centerLat != null && centerLon != null && spanLat != null && spanLon != null) {
      double latMin=(centerLat / 1e6) - ((spanLat / 1e6) / 2) - ((spanLat / 1e6) / 4);
      double latMax=(centerLat / 1e6) + ((spanLat / 1e6) / 2) + ((spanLat / 1e6) / 4);
      double lonMin=(centerLon / 1e6) - ((spanLon / 1e6) / 2) - ((spanLon / 1e6) / 4);
      double lonMax=(centerLon / 1e6) + ((spanLon / 1e6) / 2) + ((spanLon / 1e6) / 4);
      double llCache;
      if (latMin > latMax) {
        llCache=latMax;
        latMax=latMin;
        latMin=llCache;
      }
      if (lonMin > lonMax) {
        llCache=lonMax;
        lonMax=lonMin;
        lonMin=llCache;
      }
      if (where.length() > 0) {
        where.append(" and ");
      }
      where.append("(latitude >= ");
      where.append(String.format((Locale)null,"%.6f",latMin));
      where.append(" and latitude <= ");
      where.append(String.format((Locale)null,"%.6f",latMax));
      where.append(" and longitude >= ");
      where.append(String.format((Locale)null,"%.6f",lonMin));
      where.append(" and longitude <= ");
      where.append(String.format((Locale)null,"%.6f",lonMax));
      where.append(')');
    }
    cursor=databaseRO.query(dbTableCaches,CACHE_COLUMNS,where.toString(),null,null,null,null,null);
    if (cursor != null) {
      if (cursor.getCount() > 0) {
        cursor.moveToFirst();
        do {
          cgCache cache=createCacheFromDatabaseContent(cursor);
          if (loadFlags.contains(LoadFlag.LOADATTRIBUTES)) {
            cache.setAttributes(loadAttributes(cache.getGeocode()));
          }
          if (loadFlags.contains(LoadFlag.LOADWAYPOINTS)) {
            final List<cgWaypoint> waypoints=loadWaypoints(cache.getGeocode());
            if (CollectionUtils.isNotEmpty(waypoints)) {
              cache.setWaypoints(waypoints);
            }
          }
          if (loadFlags.contains(LoadFlag.LOADSPOILERS)) {
            final List<cgImage> spoilers=loadSpoilers(cache.getGeocode());
            if (CollectionUtils.isNotEmpty(spoilers)) {
              if (cache.getSpoilers() == null) {
                cache.setSpoilers(new ArrayList<cgImage>());
              }
 else {
                cache.getSpoilers().clear();
              }
              cache.getSpoilers().addAll(spoilers);
            }
          }
          if (loadFlags.contains(LoadFlag.LOADLOGS)) {
            cache.setLogs(loadLogs(cache.getGeocode()));
            final Map<LogType,Integer> logCounts=loadLogCounts(cache.getGeocode());
            if (MapUtils.isNotEmpty(logCounts)) {
              cache.getLogCounts().clear();
              cache.getLogCounts().putAll(logCounts);
            }
          }
          if (loadFlags.contains(LoadFlag.LOADINVENTORY)) {
            final List<cgTrackable> inventory=loadInventory(cache.getGeocode());
            if (CollectionUtils.isNotEmpty(inventory)) {
              if (cache.getInventory() == null) {
                cache.setInventory(new ArrayList<cgTrackable>());
              }
 else {
                cache.getInventory().clear();
              }
              cache.getInventory().addAll(inventory);
            }
          }
          if (loadFlags.contains(LoadFlag.LOADOFFLINELOG)) {
            cache.setLogOffline(hasLogOffline(cache.getGeocode()));
          }
          cache.addStorageLocation(StorageLocations.DATABASE);
          caches.add(cache);
        }
 while (cursor.moveToNext());
      }
 else {
        cursor.close();
        return null;
      }
    }
  }
 catch (  Exception e) {
    Log.e(Settings.tag,"cgData.loadCaches: " + e.toString());
  }
  if (cursor != null) {
    cursor.close();
  }
  return caches;
}
