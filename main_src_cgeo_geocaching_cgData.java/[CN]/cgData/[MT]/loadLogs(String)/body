{
  if (StringUtils.isBlank(geocode)) {
    return null;
  }
  init();
  List<LogEntry> logs=new ArrayList<LogEntry>();
  Cursor cursor=databaseRO.rawQuery("SELECT cg_logs._id as cg_logs_id, type, author, log, date, found, friend, " + dbTableLogImages + "._id as cg_logImages_id, log_id, title, url FROM "+ dbTableLogs+ " LEFT OUTER JOIN "+ dbTableLogImages+ " ON ( cg_logs._id = log_id ) WHERE geocode = ?  ORDER BY date desc, cg_logs._id asc",new String[]{geocode});
  if (cursor != null && cursor.getCount() > 0) {
    LogEntry log=null;
    int indexLogsId=cursor.getColumnIndex("cg_logs_id");
    int indexType=cursor.getColumnIndex("type");
    int indexAuthor=cursor.getColumnIndex("author");
    int indexLog=cursor.getColumnIndex("log");
    int indexDate=cursor.getColumnIndex("date");
    int indexFound=cursor.getColumnIndex("found");
    int indexFriend=cursor.getColumnIndex("friend");
    int indexLogImagesId=cursor.getColumnIndex("cg_logImages_id");
    int indexTitle=cursor.getColumnIndex("title");
    int indexUrl=cursor.getColumnIndex("url");
    while (cursor.moveToNext() && logs.size() < 100) {
      if (log == null || log.id != cursor.getInt(indexLogsId)) {
        log=new LogEntry(cursor.getString(indexAuthor),cursor.getLong(indexDate),LogType.getById(cursor.getInt(indexType)),cursor.getString(indexLog));
        log.id=cursor.getInt(indexLogsId);
        log.found=cursor.getInt(indexFound);
        log.friend=cursor.getInt(indexFriend) == 1;
        logs.add(log);
      }
      if (!cursor.isNull(indexLogImagesId)) {
        String title=cursor.getString(indexTitle);
        String url=cursor.getString(indexUrl);
        log.addLogImage(new cgImage(url,title));
      }
    }
  }
  if (cursor != null) {
    cursor.close();
  }
  return logs;
}
