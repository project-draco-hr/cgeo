{
  Log.i(Settings.tag,"Upgrade database from ver. " + oldVersion + " to ver. "+ newVersion+ ": start");
  try {
    if (db.isReadOnly()) {
      return;
    }
    db.beginTransaction();
    if (oldVersion <= 0) {
      dropDatabase(db);
      onCreate(db);
      Log.i(Settings.tag,"Database structure created.");
    }
    if (oldVersion > 0) {
      db.execSQL("delete from " + dbTableCaches + " where reason = 0");
      if (oldVersion < 34) {
        try {
          db.execSQL("create index if not exists in_a on " + dbTableCaches + " (geocode)");
          db.execSQL("create index if not exists in_b on " + dbTableCaches + " (guid)");
          db.execSQL("create index if not exists in_c on " + dbTableCaches + " (reason)");
          db.execSQL("create index if not exists in_d on " + dbTableCaches + " (detailed)");
          db.execSQL("create index if not exists in_e on " + dbTableCaches + " (type)");
          db.execSQL("create index if not exists in_a on " + dbTableAttributes + " (geocode)");
          db.execSQL("create index if not exists in_a on " + dbTableWaypoints + " (geocode)");
          db.execSQL("create index if not exists in_b on " + dbTableWaypoints + " (geocode, type)");
          db.execSQL("create index if not exists in_a on " + dbTableSpoilers + " (geocode)");
          db.execSQL("create index if not exists in_a on " + dbTableLogs + " (geocode)");
          db.execSQL("create index if not exists in_a on " + dbTableTrackables + " (geocode)");
          Log.i(Settings.tag,"Indexes added.");
        }
 catch (        Exception e) {
          Log.e(Settings.tag,"Failed to upgrade to ver. 34: " + e.toString());
        }
      }
      if (oldVersion < 37) {
        try {
          db.execSQL("alter table " + dbTableCaches + " add column direction text");
          db.execSQL("alter table " + dbTableCaches + " add column distance double");
          Log.i(Settings.tag,"Columns direction and distance added to " + dbTableCaches + ".");
        }
 catch (        Exception e) {
          Log.e(Settings.tag,"Failed to upgrade to ver. 37: " + e.toString());
        }
      }
      if (oldVersion < 38) {
        try {
          db.execSQL("drop table " + dbTableLogs);
          db.execSQL(dbCreateLogs);
          Log.i(Settings.tag,"Changed type column in " + dbTableLogs + " to integer.");
        }
 catch (        Exception e) {
          Log.e(Settings.tag,"Failed to upgrade to ver. 38: " + e.toString());
        }
      }
      if (oldVersion < 39) {
        try {
          db.execSQL(dbCreateLists);
          Log.i(Settings.tag,"Created lists table.");
        }
 catch (        Exception e) {
          Log.e(Settings.tag,"Failed to upgrade to ver. 39: " + e.toString());
        }
      }
      if (oldVersion < 40) {
        try {
          db.execSQL("drop table " + dbTableTrackables);
          db.execSQL(dbCreateTrackables);
          Log.i(Settings.tag,"Changed type of geocode column in trackables table.");
        }
 catch (        Exception e) {
          Log.e(Settings.tag,"Failed to upgrade to ver. 40: " + e.toString());
        }
      }
      if (oldVersion < 41) {
        try {
          db.execSQL("alter table " + dbTableCaches + " add column rating float");
          db.execSQL("alter table " + dbTableCaches + " add column votes integer");
          db.execSQL("alter table " + dbTableCaches + " add column vote integer");
          Log.i(Settings.tag,"Added columns for GCvote.");
        }
 catch (        Exception e) {
          Log.e(Settings.tag,"Failed to upgrade to ver. 41: " + e.toString());
        }
      }
      if (oldVersion < 42) {
        try {
          db.execSQL(dbCreateLogsOffline);
          Log.i(Settings.tag,"Added table for offline logs");
        }
 catch (        Exception e) {
          Log.e(Settings.tag,"Failed to upgrade to ver. 42: " + e.toString());
        }
      }
      if (oldVersion < 43) {
        try {
          final String dbTableCachesTemp=dbTableCaches + "_temp";
          final String dbCreateCachesTemp="" + "create temporary table " + dbTableCachesTemp + " ("+ "_id integer primary key autoincrement, "+ "updated long not null, "+ "detailed integer not null default 0, "+ "detailedupdate long, "+ "geocode text unique not null, "+ "reason integer not null default 0, "+ "cacheid text, "+ "guid text, "+ "type text, "+ "name text, "+ "owner text, "+ "hidden long, "+ "hint text, "+ "size text, "+ "difficulty float, "+ "terrain float, "+ "latlon text, "+ "latitude_string text, "+ "longitude_string text, "+ "location text, "+ "distance double, "+ "latitude double, "+ "longitude double, "+ "shortdesc text, "+ "description text, "+ "rating float, "+ "votes integer, "+ "vote integer, "+ "disabled integer not null default 0, "+ "archived integer not null default 0, "+ "members integer not null default 0, "+ "found integer not null default 0, "+ "favourite integer not null default 0, "+ "inventorycoins integer default 0, "+ "inventorytags integer default 0, "+ "inventoryunknown integer default 0 "+ "); ";
          final String dbCreateCachesNew="" + "create table " + dbTableCaches + " ("+ "_id integer primary key autoincrement, "+ "updated long not null, "+ "detailed integer not null default 0, "+ "detailedupdate long, "+ "geocode text unique not null, "+ "reason integer not null default 0, "+ "cacheid text, "+ "guid text, "+ "type text, "+ "name text, "+ "owner text, "+ "hidden long, "+ "hint text, "+ "size text, "+ "difficulty float, "+ "terrain float, "+ "latlon text, "+ "latitude_string text, "+ "longitude_string text, "+ "location text, "+ "direction double, "+ "distance double, "+ "latitude double, "+ "longitude double, "+ "shortdesc text, "+ "description text, "+ "rating float, "+ "votes integer, "+ "vote integer, "+ "disabled integer not null default 0, "+ "archived integer not null default 0, "+ "members integer not null default 0, "+ "found integer not null default 0, "+ "favourite integer not null default 0, "+ "inventorycoins integer default 0, "+ "inventorytags integer default 0, "+ "inventoryunknown integer default 0 "+ "); ";
          db.beginTransaction();
          db.execSQL(dbCreateCachesTemp);
          db.execSQL("insert into " + dbTableCachesTemp + " select _id, updated, detailed, detailedupdate, geocode, reason, cacheid, guid, type, name, owner, hidden, hint, size, difficulty, terrain, latlon, latitude_string, longitude_string, location, distance, latitude, longitude, shortdesc, description, rating, votes, vote, disabled, archived, members, found, favourite, inventorycoins, inventorytags, inventoryunknown from "+ dbTableCaches);
          db.execSQL("drop table " + dbTableCaches);
          db.execSQL(dbCreateCachesNew);
          db.execSQL("insert into " + dbTableCaches + " select _id, updated, detailed, detailedupdate, geocode, reason, cacheid, guid, type, name, owner, hidden, hint, size, difficulty, terrain, latlon, latitude_string, longitude_string, location, null, distance, latitude, longitude, shortdesc, description, rating, votes, vote, disabled, archived, members, found, favourite, inventorycoins, inventorytags, inventoryunknown from "+ dbTableCachesTemp);
          db.execSQL("drop table " + dbTableCachesTemp);
          db.setTransactionSuccessful();
          Log.i(Settings.tag,"Changed direction column");
        }
 catch (        Exception e) {
          Log.e(Settings.tag,"Failed to upgrade to ver. 43: " + e.toString());
        }
 finally {
          db.endTransaction();
        }
      }
      if (oldVersion < 44) {
        try {
          db.execSQL("alter table " + dbTableCaches + " add column favourite_cnt integer");
          Log.i(Settings.tag,"Column favourite_cnt added to " + dbTableCaches + ".");
        }
 catch (        Exception e) {
          Log.e(Settings.tag,"Failed to upgrade to ver. 44: " + e.toString());
        }
      }
      if (oldVersion < 45) {
        try {
          db.execSQL("alter table " + dbTableCaches + " add column owner_real text");
          Log.i(Settings.tag,"Column owner_real added to " + dbTableCaches + ".");
        }
 catch (        Exception e) {
          Log.e(Settings.tag,"Failed to upgrade to ver. 45: " + e.toString());
        }
      }
      if (oldVersion < 46) {
        try {
          db.execSQL("alter table " + dbTableCaches + " add column visiteddate long");
          db.execSQL("create index if not exists in_f on " + dbTableCaches + " (visiteddate, detailedupdate)");
          Log.i(Settings.tag,"Added column for date of visit.");
        }
 catch (        Exception e) {
          Log.e(Settings.tag,"Failed to upgrade to ver. 46: " + e.toString());
        }
      }
      if (oldVersion < 47) {
        try {
          db.execSQL("alter table " + dbTableCaches + " add column own integer not null default 0");
          Log.i(Settings.tag,"Added column own.");
        }
 catch (        Exception e) {
          Log.e(Settings.tag,"Failed to upgrade to ver. 47: " + e.toString());
        }
      }
      if (oldVersion < 48) {
        try {
          db.execSQL("alter table " + dbTableCaches + " add column elevation double");
          Log.i(Settings.tag,"Column elevation added to " + dbTableCaches + ".");
        }
 catch (        Exception e) {
          Log.e(Settings.tag,"Failed to upgrade to ver. 48: " + e.toString());
        }
      }
      if (oldVersion < 49) {
        try {
          db.execSQL(dbCreateLogCount);
          Log.i(Settings.tag,"Created table " + dbTableLogCount + ".");
        }
 catch (        Exception e) {
          Log.e(Settings.tag,"Failed to upgrade to ver. 49: " + e.toString());
        }
      }
      if (oldVersion < 50) {
        try {
          db.execSQL("alter table " + dbTableCaches + " add column myvote float");
          Log.i(Settings.tag,"Added float column for votes to " + dbTableCaches + ".");
        }
 catch (        Exception e) {
          Log.e(Settings.tag,"Failed to upgrade to ver. 50: " + e.toString());
        }
      }
      if (oldVersion < 51) {
        try {
          db.execSQL("alter table " + dbTableCaches + " add column reliable_latlon integer");
          Log.i(Settings.tag,"Column reliable_latlon added to " + dbTableCaches + ".");
        }
 catch (        Exception e) {
          Log.e(Settings.tag,"Failed to upgrade to ver. 51: " + e.toString());
        }
      }
      if (oldVersion < 52) {
        try {
          db.execSQL(dbCreateSearchDestinationHistory);
          Log.i(Settings.tag,"Added table " + dbTableSearchDestionationHistory + ".");
        }
 catch (        Exception e) {
          Log.e(Settings.tag,"Failed to upgrade to ver. 52",e);
        }
      }
      if (oldVersion < 53) {
        try {
          db.execSQL("alter table " + dbTableCaches + " add column onWatchlist integer");
          Log.i(Settings.tag,"Column onWatchlist added to " + dbTableCaches + ".");
        }
 catch (        Exception e) {
          Log.e(Settings.tag,"Failed to upgrade to ver. 53",e);
        }
      }
      if (oldVersion < 54) {
        try {
          db.execSQL(dbCreateLogImages);
        }
 catch (        Exception e) {
          Log.e(Settings.tag,"Failed to upgrade to ver. 54: " + e.toString());
        }
      }
      if (oldVersion < 55) {
        try {
          db.execSQL("alter table " + dbTableCaches + " add column personal_note text");
        }
 catch (        Exception e) {
          Log.e(Settings.tag,"Failed to upgrade to ver. 55: " + e.toString());
        }
      }
      if (oldVersion < 56) {
        try {
          db.execSQL("update " + dbTableAttributes + " set attribute = "+ "lower(attribute) where attribute like \"%_yes\" "+ "or attribute like \"%_no\"");
        }
 catch (        Exception e) {
          Log.e(Settings.tag,"Failed to upgrade to ver. 56: " + e.toString());
        }
      }
      if (oldVersion < 57) {
        try {
          db.execSQL("drop index in_a");
          db.execSQL("drop index in_b");
          db.execSQL("drop index in_c");
          db.execSQL("drop index in_d");
          db.execSQL("drop index in_e");
          db.execSQL("drop index in_f");
          createIndices(db);
        }
 catch (        Exception e) {
          Log.e(Settings.tag,"Failed to upgrade to ver. 57: " + e.toString());
        }
      }
      if (oldVersion < 58) {
        try {
          db.beginTransaction();
          final String dbTableCachesTemp=dbTableCaches + "_temp";
          final String dbCreateCachesTemp="" + "create table " + dbTableCachesTemp + " ("+ "_id integer primary key autoincrement, "+ "updated long not null, "+ "detailed integer not null default 0, "+ "detailedupdate long, "+ "visiteddate long, "+ "geocode text unique not null, "+ "reason integer not null default 0, "+ "cacheid text, "+ "guid text, "+ "type text, "+ "name text, "+ "own integer not null default 0, "+ "owner text, "+ "owner_real text, "+ "hidden long, "+ "hint text, "+ "size text, "+ "difficulty float, "+ "terrain float, "+ "latlon text, "+ "location text, "+ "direction double, "+ "distance double, "+ "latitude double, "+ "longitude double, "+ "reliable_latlon integer, "+ "elevation double, "+ "personal_note text, "+ "shortdesc text, "+ "description text, "+ "favourite_cnt integer, "+ "rating float, "+ "votes integer, "+ "myvote float, "+ "disabled integer not null default 0, "+ "archived integer not null default 0, "+ "members integer not null default 0, "+ "found integer not null default 0, "+ "favourite integer not null default 0, "+ "inventorycoins integer default 0, "+ "inventorytags integer default 0, "+ "inventoryunknown integer default 0, "+ "onWatchlist integer default 0 "+ "); ";
          db.execSQL(dbCreateCachesTemp);
          db.execSQL("insert into " + dbTableCachesTemp + " select _id,updated,detailed,detailedupdate,visiteddate,geocode,reason,cacheid,guid,type,name,own,owner,owner_real,"+ "hidden,hint,size,difficulty,terrain,latlon,location,direction,distance,latitude,longitude,reliable_latlon,elevation,"+ "personal_note,shortdesc,description,favourite_cnt,rating,votes,myvote,disabled,archived,members,found,favourite,inventorycoins,"+ "inventorytags,inventoryunknown,onWatchlist from "+ dbTableCaches);
          db.execSQL("drop table " + dbTableCaches);
          db.execSQL("alter table " + dbTableCachesTemp + " rename to "+ dbTableCaches);
          final String dbTableWaypointsTemp=dbTableWaypoints + "_temp";
          final String dbCreateWaypointsTemp="" + "create table " + dbTableWaypointsTemp + " ("+ "_id integer primary key autoincrement, "+ "geocode text not null, "+ "updated long not null, "+ "type text not null default 'waypoint', "+ "prefix text, "+ "lookup text, "+ "name text, "+ "latlon text, "+ "latitude double, "+ "longitude double, "+ "note text "+ "); ";
          db.execSQL(dbCreateWaypointsTemp);
          db.execSQL("insert into " + dbTableWaypointsTemp + " select _id, geocode, updated, type, prefix, lookup, name, latlon, latitude, longitude, note from "+ dbTableWaypoints);
          db.execSQL("drop table " + dbTableWaypoints);
          db.execSQL("alter table " + dbTableWaypointsTemp + " rename to "+ dbTableWaypoints);
          createIndices(db);
          db.setTransactionSuccessful();
          Log.i(Settings.tag,"Removed latitude_string and longitude_string columns");
        }
 catch (        Exception e) {
          Log.e(Settings.tag,"Failed to upgrade to ver. 58",e);
        }
 finally {
          db.endTransaction();
        }
      }
      if (oldVersion < 59) {
        try {
          createIndices(db);
          final SQLiteStatement select=db.compileStatement("select count(*) from " + dbTableCaches + " where geocode = ?");
          final File[] files=new File(Settings.getStorage()).listFiles();
          final ArrayList<File> toRemove=new ArrayList<File>(files.length);
          for (          final File file : files) {
            if (file.isDirectory()) {
              final String geocode=file.getName();
              if (geocode.equals("_others")) {
                continue;
              }
              select.bindString(1,geocode);
              if (select.simpleQueryForLong() == 0) {
                toRemove.add(file);
              }
            }
          }
          new Thread(new Runnable(){
            @Override public void run(){
              for (              final File dir : toRemove) {
                Log.i(Settings.tag,"Removing obsolete cache directory for " + dir.getName());
                cgBase.deleteDirectory(dir);
              }
            }
          }
).start();
        }
 catch (        Exception e) {
          Log.e(Settings.tag,"Failed to upgrade to ver. 59",e);
        }
      }
    }
    db.setTransactionSuccessful();
  }
  finally {
    db.endTransaction();
  }
  Log.i(Settings.tag,"Upgrade database from ver. " + oldVersion + " to ver. "+ newVersion+ ": completed");
}
