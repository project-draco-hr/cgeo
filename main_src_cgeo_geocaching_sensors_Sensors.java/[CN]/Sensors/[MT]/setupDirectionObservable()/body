{
  if (!hasCompassCapabilities) {
    Log.i("No compass capabilities, using only the GPS for the orientation");
    directionObservable=RxUtils.rememberLast(geoDataObservableLowPower.map(GPS_TO_DIRECTION).doOnNext(onNextrememberDirectionAction),0f);
    return;
  }
  final AtomicBoolean useDirectionFromGps=new AtomicBoolean(false);
  final Observable<Float> sensorDirectionObservable=Settings.useOrientationSensor(app) ? OrientationProvider.create(app) : RotationProvider.create(app);
  final Observable<Float> magneticDirectionObservable=sensorDirectionObservable.onErrorResumeNext(new Func1<Throwable,Observable<Float>>(){
    @Override public Observable<Float> call(    final Throwable throwable){
      Log.e("Device orientation is not available due to sensors error, disabling compass",throwable);
      Settings.setUseCompass(false);
      return Observable.<Float>never().startWith(0.0f);
    }
  }
).filter(new Func1<Float,Boolean>(){
    @Override public Boolean call(    final Float aFloat){
      return Settings.isUseCompass() && !useDirectionFromGps.get();
    }
  }
);
  final Observable<Float> directionFromGpsObservable=geoDataObservableLowPower.filter(new Func1<GeoData,Boolean>(){
    @Override public Boolean call(    final GeoData geoData){
      final boolean useGps=geoData.getSpeed() > 5.0f;
      useDirectionFromGps.set(useGps);
      return useGps || !Settings.isUseCompass();
    }
  }
).map(GPS_TO_DIRECTION);
  directionObservable=RxUtils.rememberLast(Observable.merge(magneticDirectionObservable,directionFromGpsObservable).doOnNext(onNextrememberDirectionAction),0f);
}
