{
  if (!hasMagneticFieldSensor) {
    Log.i("No magnetic field sensor, using only the GPS for the orientation");
    directionObservable=RxUtils.rememberLast(geoDataObservableLowPower.map(GPS_TO_DIRECTION).doOnNext(onNextrememberDirectionAction),0f);
    return;
  }
  final AtomicBoolean useDirectionFromGps=new AtomicBoolean(false);
  final Observable<Float> magneticDirectionObservable=RotationProvider.create(app,useLowPower).onErrorResumeNext(new Func1<Throwable,Observable<? extends Float>>(){
    @Override public Observable<? extends Float> call(    final Throwable throwable){
      return OrientationProvider.create(app);
    }
  }
).onErrorResumeNext(new Func1<Throwable,Observable<? extends Float>>(){
    @Override public Observable<? extends Float> call(    final Throwable throwable){
      Log.e("Device orientation will not be available as no suitable sensors were found, disabling compass");
      Settings.setUseCompass(false);
      return Observable.<Float>never().startWith(0.0f);
    }
  }
).filter(new Func1<Float,Boolean>(){
    @Override public Boolean call(    final Float aFloat){
      return Settings.isUseCompass() && !useDirectionFromGps.get();
    }
  }
);
  final Observable<Float> directionFromGpsObservable=geoDataObservable(true).filter(new Func1<GeoData,Boolean>(){
    @Override public Boolean call(    final GeoData geoData){
      final boolean useGps=geoData.getSpeed() > 5.0f;
      useDirectionFromGps.set(useGps);
      return useGps || !Settings.isUseCompass();
    }
  }
).map(GPS_TO_DIRECTION);
  directionObservable=RxUtils.rememberLast(Observable.merge(magneticDirectionObservable,directionFromGpsObservable).doOnNext(onNextrememberDirectionAction),0f);
}
