{
  final HashMap<String,cgCoord> coords=new HashMap<String,cgCoord>();
  if (fileContent == null || fileContent.length() <= 0) {
    return coords;
  }
  final String[] points=fileContent.split("<waypoint>");
  for (  String pointString : points) {
    final cgCoord pointCoord=new cgCoord();
    HashMap<String,Object> tmp=null;
    final Matcher matcherGeocode=patternGeocode.matcher(pointString);
    if (matcherGeocode.find()) {
      String geocode=matcherGeocode.group(1).trim().toUpperCase();
      pointCoord.name=geocode;
      pointCoord.geocode=geocode;
    }
    final Matcher matcherName=patternName.matcher(pointString);
    if (matcherName.find()) {
      String name=matcherName.group(1).trim();
      int pos=name.indexOf(" by ");
      if (pos > 0) {
        name=name.substring(0,pos).trim();
      }
      pointCoord.name=name;
    }
    final Matcher matcherLat=patternLat.matcher(pointString);
    if (matcherLat.find()) {
      tmp=cgBase.parseCoordinate(matcherLat.group(1).trim(),"lat");
      pointCoord.latitude=(Double)tmp.get("coordinate");
    }
    final Matcher matcherLon=patternLon.matcher(pointString);
    if (matcherLon.find()) {
      tmp=cgBase.parseCoordinate(matcherLon.group(1).trim(),"lon");
      pointCoord.longitude=(Double)tmp.get("coordinate");
    }
    final Matcher matcherDifficulty=patternDifficulty.matcher(pointString);
    if (matcherDifficulty.find()) {
      pointCoord.difficulty=new Float(matcherDifficulty.group(1).trim());
    }
    final Matcher matcherTerrain=patternTerrain.matcher(pointString);
    if (matcherTerrain.find()) {
      pointCoord.terrain=new Float(matcherTerrain.group(1).trim());
    }
    final Matcher matcherContainer=patternContainer.matcher(pointString);
    if (matcherContainer.find()) {
      final int size=Integer.parseInt(matcherContainer.group(1).trim());
      if (size == 1) {
        pointCoord.size="not chosen";
      }
 else       if (size == 2) {
        pointCoord.size="micro";
      }
 else       if (size == 3) {
        pointCoord.size="regular";
      }
 else       if (size == 4) {
        pointCoord.size="large";
      }
 else       if (size == 5) {
        pointCoord.size="virtual";
      }
 else       if (size == 6) {
        pointCoord.size="other";
      }
 else       if (size == 8) {
        pointCoord.size="small";
      }
 else {
        pointCoord.size="unknown";
      }
    }
    if (pointCoord.name != null && pointCoord.name.length() > 0) {
      coords.put(pointCoord.name,pointCoord);
    }
  }
  Log.i(cgSettings.tag,"Coordinates found in .loc file: " + coords.size());
  return coords;
}
