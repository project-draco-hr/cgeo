{
  final String bearingText=bearingEditText.getText().toString();
  final String distanceText=distanceEditText.getText().toString() + distanceUnit;
  final String latText=latButton.getText().toString();
  final String lonText=lonButton.getText().toString();
  if (StringUtils.isBlank(bearingText) && StringUtils.isBlank(distanceText) && StringUtils.isBlank(latText)&& StringUtils.isBlank(lonText)) {
    showToast(res.getString(R.string.err_point_no_position_given));
    return null;
  }
  Geopoint coords;
  if (StringUtils.isNotBlank(latText) && StringUtils.isNotBlank(lonText)) {
    try {
      coords=new Geopoint(latText,lonText);
    }
 catch (    final Geopoint.ParseException e) {
      showToast(res.getString(e.resource));
      return null;
    }
  }
 else {
    coords=app.currentGeo().getCoords();
  }
  if (StringUtils.isNotBlank(bearingText) && StringUtils.isNotBlank(distanceText)) {
    double bearing;
    try {
      bearing=Double.parseDouble(bearingText);
    }
 catch (    final NumberFormatException ignored) {
      Dialogs.message(this,R.string.err_point_bear_and_dist_title,R.string.err_point_bear_and_dist);
      return null;
    }
    double distance;
    try {
      distance=DistanceParser.parseDistance(distanceText,!Settings.useImperialUnits());
    }
 catch (    final NumberFormatException ignored) {
      showToast(res.getString(R.string.err_parse_dist));
      return null;
    }
    coords=coords.project(bearing,distance);
  }
  saveCoords(coords);
  return coords;
}
